import SwaggerParser from '@apidevtools/swagger-parser';
import { promises as _promises } from 'fs';
import { outputFile } from 'fs-extra';
import path from 'path';
import { getPageMetadataAndSlug } from '../../createPage/getPageMetadataAndSlug.js';
import { preparseMdx } from '../../createPage/preparseMdx/index.js';
import { loadOpenApi } from '../../utils.js';
import { updateConfigFile } from './updateConfigFile.js';
import { updateFavicons } from './updateFavicons.js';
import { updateFiles } from './updateFiles.js';
import { updateGeneratedNav } from './updateGeneratedNav.js';
import { updateOpenApiFiles } from './updateOpenApiFiles.js';
const { readFile } = _promises;
export const update = async (contentDirectoryPath, staticFilenames, openApiFiles, contentFilenames, snippets) => {
    let pagesAcc = {};
    const contentPromises = [];
    contentFilenames.forEach((filename) => {
        contentPromises.push((async () => {
            const sourcePath = path.join(contentDirectoryPath, filename);
            const targetPath = path.join('src', '_props', filename);
            const contentStr = (await readFile(sourcePath)).toString();
            // if is snippet add to static file array
            const fileContent = await preparseMdx(contentStr, contentDirectoryPath, sourcePath);
            const { slug, pageMetadata } = getPageMetadataAndSlug(filename, contentStr, openApiFiles);
            await outputFile(targetPath, fileContent, {
                flag: 'w',
            });
            pagesAcc = {
                ...pagesAcc,
                [slug]: pageMetadata,
            };
        })());
    });
    const initialFileUploadResponses = await Promise.all([
        updateConfigFile(contentDirectoryPath),
        ...contentPromises,
        ...updateFiles(contentDirectoryPath, 'public', [...staticFilenames, ...snippets]),
    ]);
    const mintConfig = initialFileUploadResponses[0];
    // Download OpenApi file if url is provided
    if (mintConfig.openapi &&
        typeof mintConfig.openapi === 'string' &&
        !mintConfig.openapi.startsWith('/') &&
        mintConfig.openapi.startsWith('http')) {
        try {
            const axios = await import('axios').then((x) => x.default);
            const { data } = await axios.get(mintConfig.openapi, {
                responseType: 'text',
                // Disable automatic JSON parsing
                transformResponse: (res) => res,
            });
            const specFromUrl = await SwaggerParser.validate(loadOpenApi(mintConfig.openapi, data));
            openApiFiles.push({
                filename: 'openapi-from-url',
                spec: specFromUrl,
            });
        }
        catch (e) {
            console.log("OpenApi file couldn't be downloaded from url.", e);
        }
    }
    await Promise.all([
        updateOpenApiFiles(openApiFiles),
        updateGeneratedNav(pagesAcc, mintConfig.navigation),
        updateFavicons(mintConfig, contentDirectoryPath),
    ]);
    return mintConfig;
};
export { updateOpenApiFiles, updateGeneratedNav };
