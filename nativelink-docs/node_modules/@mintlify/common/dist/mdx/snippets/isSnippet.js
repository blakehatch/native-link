import grayMatter from 'gray-matter';
import { getAST } from '../remark.js';
import { isComment, isExport } from '../utils.js';
const { test: hasFrontmatter } = grayMatter;
/**
 * if a file only has exports and no frontmatter it is a snippet
 * @param content mdx file content
 * @returns boolean
 */
export const isSnippet = (content) => {
    if (hasFrontmatter(content)) {
        return false;
    }
    return consistsOfOnlyExports(content);
};
/**
 * An export looks like this in AST form:
 * {
 *   type: 'mdxjsEsm',
 *   data: {
 *     estree: {
 *       type: 'Program',
 *       sourceType: 'module'
 *       body: [
 *         type: 'ExportNamedDeclaration'
 *       ]
 *     }
 *   }
 * }
 * @param content mdx file content
 * @returns whether it only has exports or not
 */
const consistsOfOnlyExports = (content) => {
    var _a, _b, _c, _d;
    const tree = getAST(content);
    for (const child of tree.children) {
        if (isComment(child))
            continue;
        if (child.type !== 'mdxjsEsm')
            return false;
        if (((_b = (_a = child.data) === null || _a === void 0 ? void 0 : _a.estree) === null || _b === void 0 ? void 0 : _b.type) !== 'Program' && ((_d = (_c = child.data) === null || _c === void 0 ? void 0 : _c.estree) === null || _d === void 0 ? void 0 : _d.sourceType) !== 'module')
            return false;
        for (const bodyChild of child.data.estree.body) {
            if (!isExport(bodyChild.type))
                return false;
        }
    }
    return true;
};
