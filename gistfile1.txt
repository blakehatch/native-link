diff --git a/Cargo.Bazel.lock b/Cargo.Bazel.lock
index 7592a77..a768eeb 100644
--- a/Cargo.Bazel.lock
+++ b/Cargo.Bazel.lock
@@ -1,5 +1,5 @@
 {
-  "checksum": "ab4d365f12cccf08d844992f1bece260d9d2fc782bbe6d68ed8b288ce9bfdf71",
+  "checksum": "6690d3d5f1435a01434eb5e1b83acb684267d4e1461ee437fa7a6338a6606841",
   "crates": {
     "addr2line 0.20.0": {
       "name": "addr2line",
@@ -698,6 +698,105 @@
       },
       "license": "Apache-2.0 OR MIT"
     },
+    "async-stream 0.3.5": {
+      "name": "async-stream",
+      "version": "0.3.5",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/async-stream/0.3.5/download",
+          "sha256": "cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "async_stream",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "async_stream",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "futures-core 0.3.28",
+              "target": "futures_core"
+            },
+            {
+              "id": "pin-project-lite 0.2.10",
+              "target": "pin_project_lite"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "proc_macro_deps": {
+          "common": [
+            {
+              "id": "async-stream-impl 0.3.5",
+              "target": "async_stream_impl"
+            }
+          ],
+          "selects": {}
+        },
+        "version": "0.3.5"
+      },
+      "license": "MIT"
+    },
+    "async-stream-impl 0.3.5": {
+      "name": "async-stream-impl",
+      "version": "0.3.5",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/async-stream-impl/0.3.5/download",
+          "sha256": "16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193"
+        }
+      },
+      "targets": [
+        {
+          "ProcMacro": {
+            "crate_name": "async_stream_impl",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "async_stream_impl",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "proc-macro2 1.0.66",
+              "target": "proc_macro2"
+            },
+            {
+              "id": "quote 1.0.31",
+              "target": "quote"
+            },
+            {
+              "id": "syn 2.0.26",
+              "target": "syn"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "0.3.5"
+      },
+      "license": "MIT"
+    },
     "async-trait 0.1.71": {
       "name": "async-trait",
       "version": "0.1.71",
@@ -1215,6 +1314,7 @@
         ],
         "crate_features": {
           "common": [
+            "alloc",
             "default",
             "std"
           ],
@@ -2359,6 +2459,43 @@
       },
       "license": "Apache-2.0 OR MIT"
     },
+    "deranged 0.3.8": {
+      "name": "deranged",
+      "version": "0.3.8",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/deranged/0.3.8/download",
+          "sha256": "f2696e8a945f658fd14dc3b87242e6b80cd0f36ff04ea560fa39082368847946"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "deranged",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "deranged",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "alloc",
+            "std"
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "0.3.8"
+      },
+      "license": "MIT OR Apache-2.0"
+    },
     "diff 0.1.13": {
       "name": "diff",
       "version": "0.1.13",
@@ -2640,6 +2777,10 @@
               "id": "rand 0.8.5",
               "target": "rand"
             },
+            {
+              "id": "rcgen 0.11.3",
+              "target": "rcgen"
+            },
             {
               "id": "relative-path 1.8.0",
               "target": "relative_path"
@@ -2660,6 +2801,10 @@
               "id": "rusoto_signature 0.48.0",
               "target": "rusoto_signature"
             },
+            {
+              "id": "rustls-pemfile 1.0.3",
+              "target": "rustls_pemfile"
+            },
             {
               "id": "scopeguard 1.2.0",
               "target": "scopeguard"
@@ -2684,10 +2829,18 @@
               "id": "stdext 0.3.1",
               "target": "stdext"
             },
+            {
+              "id": "tls-listener 0.7.0",
+              "target": "tls_listener"
+            },
             {
               "id": "tokio 1.29.1",
               "target": "tokio"
             },
+            {
+              "id": "tokio-rustls 0.24.1",
+              "target": "tokio_rustls"
+            },
             {
               "id": "tokio-stream 0.1.14",
               "target": "tokio_stream"
@@ -4060,6 +4213,7 @@
             "async-await",
             "async-await-macro",
             "channel",
+            "default",
             "futures-channel",
             "futures-io",
             "futures-macro",
@@ -7142,6 +7296,52 @@
       },
       "license": "MIT OR Apache-2.0"
     },
+    "pem 3.0.2": {
+      "name": "pem",
+      "version": "3.0.2",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/pem/3.0.2/download",
+          "sha256": "3163d2912b7c3b52d651a055f2c7eec9ba5cd22d26ef75b8dd3a59980b185923"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "pem",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "pem",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "default",
+            "std"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "base64 0.21.2",
+              "target": "base64"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "3.0.2"
+      },
+      "license": "MIT"
+    },
     "percent-encoding 2.3.0": {
       "name": "percent-encoding",
       "version": "2.3.0",
@@ -8411,6 +8611,64 @@
       },
       "license": "MIT OR Apache-2.0"
     },
+    "rcgen 0.11.3": {
+      "name": "rcgen",
+      "version": "0.11.3",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/rcgen/0.11.3/download",
+          "sha256": "52c4f3084aa3bc7dfbba4eff4fab2a54db4324965d8872ab933565e6fbd83bc6"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "rcgen",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "rcgen",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "default",
+            "pem"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "pem 3.0.2",
+              "target": "pem"
+            },
+            {
+              "id": "ring 0.16.20",
+              "target": "ring"
+            },
+            {
+              "id": "time 0.3.26",
+              "target": "time"
+            },
+            {
+              "id": "yasna 0.5.2",
+              "target": "yasna"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "0.11.3"
+      },
+      "license": "MIT OR Apache-2.0"
+    },
     "redox_syscall 0.2.16": {
       "name": "redox_syscall",
       "version": "0.2.16",
@@ -8740,19 +8998,19 @@
       },
       "license": "MIT/Apache-2.0"
     },
-    "rusoto_core 0.48.0": {
-      "name": "rusoto_core",
-      "version": "0.48.0",
+    "ring 0.16.20": {
+      "name": "ring",
+      "version": "0.16.20",
       "repository": {
         "Http": {
-          "url": "https://crates.io/api/v1/crates/rusoto_core/0.48.0/download",
-          "sha256": "1db30db44ea73551326269adcf7a2169428a054f14faf9e1768f2163494f2fa2"
+          "url": "https://crates.io/api/v1/crates/ring/0.16.20/download",
+          "sha256": "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"
         }
       },
       "targets": [
         {
           "Library": {
-            "crate_name": "rusoto_core",
+            "crate_name": "ring",
             "crate_root": "src/lib.rs",
             "srcs": [
               "**/*.rs"
@@ -8769,67 +9027,178 @@
           }
         }
       ],
-      "library_target_name": "rusoto_core",
+      "library_target_name": "ring",
       "common_attrs": {
         "compile_data_glob": [
           "**"
         ],
         "crate_features": {
           "common": [
+            "alloc",
             "default",
-            "hyper-tls",
-            "native-tls"
+            "dev_urandom_fallback",
+            "once_cell"
           ],
           "selects": {}
         },
         "deps": {
           "common": [
             {
-              "id": "base64 0.13.1",
-              "target": "base64"
-            },
-            {
-              "id": "bytes 1.4.0",
-              "target": "bytes"
-            },
-            {
-              "id": "crc32fast 1.3.2",
-              "target": "crc32fast"
-            },
-            {
-              "id": "futures 0.3.28",
-              "target": "futures"
-            },
-            {
-              "id": "http 0.2.9",
-              "target": "http"
-            },
-            {
-              "id": "hyper 0.14.27",
-              "target": "hyper"
-            },
-            {
-              "id": "hyper-tls 0.5.0",
-              "target": "hyper_tls"
-            },
-            {
-              "id": "lazy_static 1.4.0",
-              "target": "lazy_static"
-            },
-            {
-              "id": "log 0.4.19",
-              "target": "log"
-            },
-            {
-              "id": "rusoto_core 0.48.0",
+              "id": "ring 0.16.20",
               "target": "build_script_build"
             },
             {
-              "id": "rusoto_credential 0.48.0",
-              "target": "rusoto_credential"
-            },
-            {
-              "id": "rusoto_signature 0.48.0",
+              "id": "untrusted 0.7.1",
+              "target": "untrusted"
+            }
+          ],
+          "selects": {
+            "cfg(all(target_arch = \"wasm32\", target_vendor = \"unknown\", target_os = \"unknown\", target_env = \"\"))": [
+              {
+                "id": "web-sys 0.3.64",
+                "target": "web_sys"
+              }
+            ],
+            "cfg(any(target_arch = \"x86\", target_arch = \"x86_64\", all(any(target_arch = \"aarch64\", target_arch = \"arm\"), any(target_os = \"android\", target_os = \"fuchsia\", target_os = \"linux\"))))": [
+              {
+                "id": "spin 0.5.2",
+                "target": "spin"
+              }
+            ],
+            "cfg(any(target_os = \"android\", target_os = \"linux\"))": [
+              {
+                "id": "libc 0.2.147",
+                "target": "libc"
+              },
+              {
+                "id": "once_cell 1.18.0",
+                "target": "once_cell"
+              }
+            ],
+            "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"solaris\"))": [
+              {
+                "id": "once_cell 1.18.0",
+                "target": "once_cell"
+              }
+            ],
+            "cfg(target_os = \"windows\")": [
+              {
+                "id": "winapi 0.3.9",
+                "target": "winapi"
+              }
+            ]
+          }
+        },
+        "edition": "2018",
+        "version": "0.16.20"
+      },
+      "build_script_attrs": {
+        "data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "cc 1.0.79",
+              "target": "cc"
+            }
+          ],
+          "selects": {}
+        },
+        "links": "ring-asm"
+      },
+      "license": null
+    },
+    "rusoto_core 0.48.0": {
+      "name": "rusoto_core",
+      "version": "0.48.0",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/rusoto_core/0.48.0/download",
+          "sha256": "1db30db44ea73551326269adcf7a2169428a054f14faf9e1768f2163494f2fa2"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "rusoto_core",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        },
+        {
+          "BuildScript": {
+            "crate_name": "build_script_build",
+            "crate_root": "build.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "rusoto_core",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "default",
+            "hyper-tls",
+            "native-tls"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "base64 0.13.1",
+              "target": "base64"
+            },
+            {
+              "id": "bytes 1.4.0",
+              "target": "bytes"
+            },
+            {
+              "id": "crc32fast 1.3.2",
+              "target": "crc32fast"
+            },
+            {
+              "id": "futures 0.3.28",
+              "target": "futures"
+            },
+            {
+              "id": "http 0.2.9",
+              "target": "http"
+            },
+            {
+              "id": "hyper 0.14.27",
+              "target": "hyper"
+            },
+            {
+              "id": "hyper-tls 0.5.0",
+              "target": "hyper_tls"
+            },
+            {
+              "id": "lazy_static 1.4.0",
+              "target": "lazy_static"
+            },
+            {
+              "id": "log 0.4.19",
+              "target": "log"
+            },
+            {
+              "id": "rusoto_core 0.48.0",
+              "target": "build_script_build"
+            },
+            {
+              "id": "rusoto_credential 0.48.0",
+              "target": "rusoto_credential"
+            },
+            {
+              "id": "rusoto_signature 0.48.0",
               "target": "rusoto_signature"
             },
             {
@@ -9375,6 +9744,173 @@
       },
       "license": "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
     },
+    "rustls 0.21.7": {
+      "name": "rustls",
+      "version": "0.21.7",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/rustls/0.21.7/download",
+          "sha256": "cd8d6c9f025a446bc4d18ad9632e69aec8f287aa84499ee335599fabd20c3fd8"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "rustls",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        },
+        {
+          "BuildScript": {
+            "crate_name": "build_script_build",
+            "crate_root": "build.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "rustls",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "log",
+            "logging",
+            "tls12"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "log 0.4.19",
+              "target": "log"
+            },
+            {
+              "id": "ring 0.16.20",
+              "target": "ring"
+            },
+            {
+              "id": "rustls 0.21.7",
+              "target": "build_script_build"
+            },
+            {
+              "id": "rustls-webpki 0.101.6",
+              "target": "webpki"
+            },
+            {
+              "id": "sct 0.7.0",
+              "target": "sct"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "0.21.7"
+      },
+      "build_script_attrs": {
+        "data_glob": [
+          "**"
+        ]
+      },
+      "license": "Apache-2.0 OR ISC OR MIT"
+    },
+    "rustls-pemfile 1.0.3": {
+      "name": "rustls-pemfile",
+      "version": "1.0.3",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/rustls-pemfile/1.0.3/download",
+          "sha256": "2d3987094b1d07b653b7dfdc3f70ce9a1da9c51ac18c1b06b662e4f9a0e9f4b2"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "rustls_pemfile",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "rustls_pemfile",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "base64 0.21.2",
+              "target": "base64"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "1.0.3"
+      },
+      "license": "Apache-2.0 OR ISC OR MIT"
+    },
+    "rustls-webpki 0.101.6": {
+      "name": "rustls-webpki",
+      "version": "0.101.6",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/rustls-webpki/0.101.6/download",
+          "sha256": "3c7d5dece342910d9ba34d259310cae3e0154b873b35408b787b59bce53d34fe"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "webpki",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "webpki",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "alloc",
+            "default",
+            "std"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "ring 0.16.20",
+              "target": "ring"
+            },
+            {
+              "id": "untrusted 0.7.1",
+              "target": "untrusted"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "0.101.6"
+      },
+      "license": "ISC"
+    },
     "rustversion 1.0.14": {
       "name": "rustversion",
       "version": "1.0.14",
@@ -9534,6 +10070,49 @@
       },
       "license": "MIT OR Apache-2.0"
     },
+    "sct 0.7.0": {
+      "name": "sct",
+      "version": "0.7.0",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/sct/0.7.0/download",
+          "sha256": "d53dcdb7c9f8158937a7981b48accfd39a43af418591a5d008c7b22b5e1b7ca4"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "sct",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "sct",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "ring 0.16.20",
+              "target": "ring"
+            },
+            {
+              "id": "untrusted 0.7.1",
+              "target": "untrusted"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "0.7.0"
+      },
+      "license": "Apache-2.0/ISC/MIT"
+    },
     "security-framework 2.9.2": {
       "name": "security-framework",
       "version": "2.9.2",
@@ -10381,6 +10960,36 @@
       },
       "license": "MIT OR Apache-2.0"
     },
+    "spin 0.5.2": {
+      "name": "spin",
+      "version": "0.5.2",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/spin/0.5.2/download",
+          "sha256": "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "spin",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "spin",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "edition": "2015",
+        "version": "0.5.2"
+      },
+      "license": "MIT"
+    },
     "static_assertions 1.1.0": {
       "name": "static_assertions",
       "version": "1.1.0",
@@ -10812,45 +11421,194 @@
         ],
         "deps": {
           "common": [
-            {
-              "id": "thiserror 1.0.43",
-              "target": "build_script_build"
-            }
+            {
+              "id": "thiserror 1.0.43",
+              "target": "build_script_build"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "proc_macro_deps": {
+          "common": [
+            {
+              "id": "thiserror-impl 1.0.43",
+              "target": "thiserror_impl"
+            }
+          ],
+          "selects": {}
+        },
+        "version": "1.0.43"
+      },
+      "build_script_attrs": {
+        "data_glob": [
+          "**"
+        ]
+      },
+      "license": "MIT OR Apache-2.0"
+    },
+    "thiserror-impl 1.0.43": {
+      "name": "thiserror-impl",
+      "version": "1.0.43",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/thiserror-impl/1.0.43/download",
+          "sha256": "463fe12d7993d3b327787537ce8dd4dfa058de32fc2b195ef3cde03dc4771e8f"
+        }
+      },
+      "targets": [
+        {
+          "ProcMacro": {
+            "crate_name": "thiserror_impl",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "thiserror_impl",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "proc-macro2 1.0.66",
+              "target": "proc_macro2"
+            },
+            {
+              "id": "quote 1.0.31",
+              "target": "quote"
+            },
+            {
+              "id": "syn 2.0.26",
+              "target": "syn"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2021",
+        "version": "1.0.43"
+      },
+      "license": "MIT OR Apache-2.0"
+    },
+    "time 0.1.45": {
+      "name": "time",
+      "version": "0.1.45",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/time/0.1.45/download",
+          "sha256": "1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "time",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "time",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "libc 0.2.147",
+              "target": "libc"
+            }
+          ],
+          "selects": {
+            "cfg(target_os = \"wasi\")": [
+              {
+                "id": "wasi 0.10.0+wasi-snapshot-preview1",
+                "target": "wasi"
+              }
+            ],
+            "cfg(windows)": [
+              {
+                "id": "winapi 0.3.9",
+                "target": "winapi"
+              }
+            ]
+          }
+        },
+        "edition": "2015",
+        "version": "0.1.45"
+      },
+      "license": "MIT/Apache-2.0"
+    },
+    "time 0.3.26": {
+      "name": "time",
+      "version": "0.3.26",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/time/0.3.26/download",
+          "sha256": "a79d09ac6b08c1ab3906a2f7cc2e81a0e27c7ae89c63812df75e52bef0751e07"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "time",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "time",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "alloc",
+            "std"
           ],
           "selects": {}
         },
-        "edition": "2021",
-        "proc_macro_deps": {
+        "deps": {
           "common": [
             {
-              "id": "thiserror-impl 1.0.43",
-              "target": "thiserror_impl"
+              "id": "deranged 0.3.8",
+              "target": "deranged"
+            },
+            {
+              "id": "time-core 0.1.1",
+              "target": "time_core"
             }
           ],
           "selects": {}
         },
-        "version": "1.0.43"
-      },
-      "build_script_attrs": {
-        "data_glob": [
-          "**"
-        ]
+        "edition": "2021",
+        "version": "0.3.26"
       },
       "license": "MIT OR Apache-2.0"
     },
-    "thiserror-impl 1.0.43": {
-      "name": "thiserror-impl",
-      "version": "1.0.43",
+    "time-core 0.1.1": {
+      "name": "time-core",
+      "version": "0.1.1",
       "repository": {
         "Http": {
-          "url": "https://crates.io/api/v1/crates/thiserror-impl/1.0.43/download",
-          "sha256": "463fe12d7993d3b327787537ce8dd4dfa058de32fc2b195ef3cde03dc4771e8f"
+          "url": "https://crates.io/api/v1/crates/time-core/0.1.1/download",
+          "sha256": "7300fbefb4dadc1af235a9cef3737cea692a9d97e1b9cbcd4ebdae6f8868e6fb"
         }
       },
       "targets": [
         {
-          "ProcMacro": {
-            "crate_name": "thiserror_impl",
+          "Library": {
+            "crate_name": "time_core",
             "crate_root": "src/lib.rs",
             "srcs": [
               "**/*.rs"
@@ -10858,46 +11616,29 @@
           }
         }
       ],
-      "library_target_name": "thiserror_impl",
+      "library_target_name": "time_core",
       "common_attrs": {
         "compile_data_glob": [
           "**"
         ],
-        "deps": {
-          "common": [
-            {
-              "id": "proc-macro2 1.0.66",
-              "target": "proc_macro2"
-            },
-            {
-              "id": "quote 1.0.31",
-              "target": "quote"
-            },
-            {
-              "id": "syn 2.0.26",
-              "target": "syn"
-            }
-          ],
-          "selects": {}
-        },
         "edition": "2021",
-        "version": "1.0.43"
+        "version": "0.1.1"
       },
       "license": "MIT OR Apache-2.0"
     },
-    "time 0.1.45": {
-      "name": "time",
-      "version": "0.1.45",
+    "tls-listener 0.7.0": {
+      "name": "tls-listener",
+      "version": "0.7.0",
       "repository": {
         "Http": {
-          "url": "https://crates.io/api/v1/crates/time/0.1.45/download",
-          "sha256": "1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a"
+          "url": "https://crates.io/api/v1/crates/tls-listener/0.7.0/download",
+          "sha256": "81294c017957a1a69794f506723519255879e15a870507faf45dfed288b763dd"
         }
       },
       "targets": [
         {
           "Library": {
-            "crate_name": "time",
+            "crate_name": "tls_listener",
             "crate_root": "src/lib.rs",
             "srcs": [
               "**/*.rs"
@@ -10905,37 +11646,55 @@
           }
         }
       ],
-      "library_target_name": "time",
+      "library_target_name": "tls_listener",
       "common_attrs": {
         "compile_data_glob": [
           "**"
         ],
+        "crate_features": {
+          "common": [
+            "default",
+            "hyper",
+            "hyper-h2",
+            "rustls",
+            "tokio-net",
+            "tokio-rustls"
+          ],
+          "selects": {}
+        },
         "deps": {
           "common": [
             {
-              "id": "libc 0.2.147",
-              "target": "libc"
+              "id": "futures-util 0.3.28",
+              "target": "futures_util"
+            },
+            {
+              "id": "hyper 0.14.27",
+              "target": "hyper"
+            },
+            {
+              "id": "pin-project-lite 0.2.10",
+              "target": "pin_project_lite"
+            },
+            {
+              "id": "thiserror 1.0.43",
+              "target": "thiserror"
+            },
+            {
+              "id": "tokio 1.29.1",
+              "target": "tokio"
+            },
+            {
+              "id": "tokio-rustls 0.24.1",
+              "target": "tokio_rustls"
             }
           ],
-          "selects": {
-            "cfg(target_os = \"wasi\")": [
-              {
-                "id": "wasi 0.10.0+wasi-snapshot-preview1",
-                "target": "wasi"
-              }
-            ],
-            "cfg(windows)": [
-              {
-                "id": "winapi 0.3.9",
-                "target": "winapi"
-              }
-            ]
-          }
+          "selects": {}
         },
-        "edition": "2015",
-        "version": "0.1.45"
+        "edition": "2018",
+        "version": "0.7.0"
       },
-      "license": "MIT/Apache-2.0"
+      "license": "Apache-2.0"
     },
     "tokio 1.29.1": {
       "name": "tokio",
@@ -11215,6 +11974,57 @@
       },
       "license": "MIT"
     },
+    "tokio-rustls 0.24.1": {
+      "name": "tokio-rustls",
+      "version": "0.24.1",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/tokio-rustls/0.24.1/download",
+          "sha256": "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "tokio_rustls",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "tokio_rustls",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "default",
+            "logging",
+            "tls12"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "rustls 0.21.7",
+              "target": "rustls"
+            },
+            {
+              "id": "tokio 1.29.1",
+              "target": "tokio"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "0.24.1"
+      },
+      "license": "MIT/Apache-2.0"
+    },
     "tokio-stream 0.1.14": {
       "name": "tokio-stream",
       "version": "0.1.14",
@@ -11377,12 +12187,17 @@
             "default",
             "gzip",
             "prost",
+            "tls",
             "transport"
           ],
           "selects": {}
         },
         "deps": {
           "common": [
+            {
+              "id": "async-stream 0.3.5",
+              "target": "async_stream"
+            },
             {
               "id": "axum 0.6.19",
               "target": "axum"
@@ -11439,10 +12254,18 @@
               "id": "prost 0.11.9",
               "target": "prost"
             },
+            {
+              "id": "rustls-pemfile 1.0.3",
+              "target": "rustls_pemfile"
+            },
             {
               "id": "tokio 1.29.1",
               "target": "tokio"
             },
+            {
+              "id": "tokio-rustls 0.24.1",
+              "target": "tokio_rustls"
+            },
             {
               "id": "tokio-stream 0.1.14",
               "target": "tokio_stream"
@@ -12069,6 +12892,36 @@
       },
       "license": "(MIT OR Apache-2.0) AND Unicode-DFS-2016"
     },
+    "untrusted 0.7.1": {
+      "name": "untrusted",
+      "version": "0.7.1",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/untrusted/0.7.1/download",
+          "sha256": "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "untrusted",
+            "crate_root": "src/untrusted.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "untrusted",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "edition": "2018",
+        "version": "0.7.1"
+      },
+      "license": "ISC"
+    },
     "utf8parse 0.2.1": {
       "name": "utf8parse",
       "version": "0.2.1",
@@ -12594,6 +13447,49 @@
       },
       "license": "MIT/Apache-2.0"
     },
+    "web-sys 0.3.64": {
+      "name": "web-sys",
+      "version": "0.3.64",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/web-sys/0.3.64/download",
+          "sha256": "9b85cbef8c220a6abc02aefd892dfc0fc23afb1c6a426316ec33253a3877249b"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "web_sys",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "web_sys",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "deps": {
+          "common": [
+            {
+              "id": "js-sys 0.3.64",
+              "target": "js_sys"
+            },
+            {
+              "id": "wasm-bindgen 0.2.87",
+              "target": "wasm_bindgen"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "0.3.64"
+      },
+      "license": "MIT/Apache-2.0"
+    },
     "which 4.4.0": {
       "name": "which",
       "version": "4.4.0",
@@ -13443,6 +14339,53 @@
       },
       "license": "MIT/Apache-2.0"
     },
+    "yasna 0.5.2": {
+      "name": "yasna",
+      "version": "0.5.2",
+      "repository": {
+        "Http": {
+          "url": "https://crates.io/api/v1/crates/yasna/0.5.2/download",
+          "sha256": "e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd"
+        }
+      },
+      "targets": [
+        {
+          "Library": {
+            "crate_name": "yasna",
+            "crate_root": "src/lib.rs",
+            "srcs": [
+              "**/*.rs"
+            ]
+          }
+        }
+      ],
+      "library_target_name": "yasna",
+      "common_attrs": {
+        "compile_data_glob": [
+          "**"
+        ],
+        "crate_features": {
+          "common": [
+            "default",
+            "std",
+            "time"
+          ],
+          "selects": {}
+        },
+        "deps": {
+          "common": [
+            {
+              "id": "time 0.3.26",
+              "target": "time"
+            }
+          ],
+          "selects": {}
+        },
+        "edition": "2018",
+        "version": "0.5.2"
+      },
+      "license": "MIT OR Apache-2.0"
+    },
     "zeroize 1.6.0": {
       "name": "zeroize",
       "version": "1.6.0",
@@ -13502,6 +14445,7 @@
     ],
     "cfg(all(target_arch = \"aarch64\", target_vendor = \"apple\"))": [],
     "cfg(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\"))))": [],
+    "cfg(all(target_arch = \"wasm32\", target_vendor = \"unknown\", target_os = \"unknown\", target_env = \"\"))": [],
     "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(windows_raw_dylib)))": [],
     "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": [],
     "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": [
@@ -13512,6 +14456,19 @@
       "aarch64-unknown-linux-gnu",
       "x86_64-unknown-linux-gnu"
     ],
+    "cfg(any(target_arch = \"x86\", target_arch = \"x86_64\", all(any(target_arch = \"aarch64\", target_arch = \"arm\"), any(target_os = \"android\", target_os = \"fuchsia\", target_os = \"linux\"))))": [
+      "aarch64-unknown-linux-gnu",
+      "arm-unknown-linux-gnueabi",
+      "armv7-unknown-linux-gnueabi",
+      "x86_64-unknown-linux-gnu"
+    ],
+    "cfg(any(target_os = \"android\", target_os = \"linux\"))": [
+      "aarch64-unknown-linux-gnu",
+      "arm-unknown-linux-gnueabi",
+      "armv7-unknown-linux-gnueabi",
+      "x86_64-unknown-linux-gnu"
+    ],
+    "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"illumos\", target_os = \"netbsd\", target_os = \"openbsd\", target_os = \"solaris\"))": [],
     "cfg(any(target_os = \"macos\", target_os = \"ios\"))": [],
     "cfg(any(unix, target_os = \"wasi\"))": [
       "aarch64-unknown-linux-gnu",
diff --git a/Cargo.lock b/Cargo.lock
index c984205..ef5d787 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -228,6 +228,28 @@ dependencies = [
  "event-listener",
 ]
 
+[[package]]
+name = "async-stream"
+version = "0.3.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51"
+dependencies = [
+ "async-stream-impl",
+ "futures-core",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "async-stream-impl"
+version = "0.3.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.26",
+]
+
 [[package]]
 name = "async-trait"
 version = "0.1.71"
@@ -560,9 +582,13 @@ dependencies = [
  "metrics_utils",
  "parking_lot",
  "prometheus-client",
+ "rcgen",
+ "rustls-pemfile",
  "scopeguard",
  "store",
+ "tls-listener",
  "tokio",
+ "tokio-rustls",
  "tonic",
  "tower",
  "worker_api_server",
@@ -626,7 +652,7 @@ dependencies = [
  "js-sys",
  "num-traits",
  "serde",
- "time",
+ "time 0.1.45",
  "wasm-bindgen",
  "winapi",
 ]
@@ -882,6 +908,12 @@ dependencies = [
  "verify_store",
 ]
 
+[[package]]
+name = "deranged"
+version = "0.3.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2696e8a945f658fd14dc3b87242e6b80cd0f36ff04ea560fa39082368847946"
+
 [[package]]
 name = "diff"
 version = "0.1.13"
@@ -2070,6 +2102,16 @@ dependencies = [
  "windows-targets",
 ]
 
+[[package]]
+name = "pem"
+version = "3.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3163d2912b7c3b52d651a055f2c7eec9ba5cd22d26ef75b8dd3a59980b185923"
+dependencies = [
+ "base64 0.21.2",
+ "serde",
+]
+
 [[package]]
 name = "percent-encoding"
 version = "2.3.0"
@@ -2368,6 +2410,18 @@ dependencies = [
  "getrandom",
 ]
 
+[[package]]
+name = "rcgen"
+version = "0.11.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "52c4f3084aa3bc7dfbba4eff4fab2a54db4324965d8872ab933565e6fbd83bc6"
+dependencies = [
+ "pem",
+ "ring",
+ "time 0.3.26",
+ "yasna",
+]
+
 [[package]]
 name = "redox_syscall"
 version = "0.2.16"
@@ -2495,6 +2549,21 @@ dependencies = [
  "tokio",
 ]
 
+[[package]]
+name = "ring"
+version = "0.16.20"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"
+dependencies = [
+ "cc",
+ "libc",
+ "once_cell",
+ "spin",
+ "untrusted",
+ "web-sys",
+ "winapi",
+]
+
 [[package]]
 name = "running_actions_manager"
 version = "0.0.0"
@@ -2673,6 +2742,37 @@ dependencies = [
  "windows-sys",
 ]
 
+[[package]]
+name = "rustls"
+version = "0.21.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd8d6c9f025a446bc4d18ad9632e69aec8f287aa84499ee335599fabd20c3fd8"
+dependencies = [
+ "log",
+ "ring",
+ "rustls-webpki",
+ "sct",
+]
+
+[[package]]
+name = "rustls-pemfile"
+version = "1.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2d3987094b1d07b653b7dfdc3f70ce9a1da9c51ac18c1b06b662e4f9a0e9f4b2"
+dependencies = [
+ "base64 0.21.2",
+]
+
+[[package]]
+name = "rustls-webpki"
+version = "0.101.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3c7d5dece342910d9ba34d259310cae3e0154b873b35408b787b59bce53d34fe"
+dependencies = [
+ "ring",
+ "untrusted",
+]
+
 [[package]]
 name = "rustversion"
 version = "1.0.14"
@@ -2766,6 +2866,16 @@ version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
+[[package]]
+name = "sct"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d53dcdb7c9f8158937a7981b48accfd39a43af418591a5d008c7b22b5e1b7ca4"
+dependencies = [
+ "ring",
+ "untrusted",
+]
+
 [[package]]
 name = "security-framework"
 version = "2.9.2"
@@ -3023,6 +3133,12 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "spin"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"
+
 [[package]]
 name = "static_assertions"
 version = "1.1.0"
@@ -3137,6 +3253,37 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "time"
+version = "0.3.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a79d09ac6b08c1ab3906a2f7cc2e81a0e27c7ae89c63812df75e52bef0751e07"
+dependencies = [
+ "deranged",
+ "serde",
+ "time-core",
+]
+
+[[package]]
+name = "time-core"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7300fbefb4dadc1af235a9cef3737cea692a9d97e1b9cbcd4ebdae6f8868e6fb"
+
+[[package]]
+name = "tls-listener"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81294c017957a1a69794f506723519255879e15a870507faf45dfed288b763dd"
+dependencies = [
+ "futures-util",
+ "hyper",
+ "pin-project-lite",
+ "thiserror",
+ "tokio",
+ "tokio-rustls",
+]
+
 [[package]]
 name = "tokio"
 version = "1.29.1"
@@ -3188,6 +3335,16 @@ dependencies = [
  "tokio",
 ]
 
+[[package]]
+name = "tokio-rustls"
+version = "0.24.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"
+dependencies = [
+ "rustls",
+ "tokio",
+]
+
 [[package]]
 name = "tokio-stream"
 version = "0.1.14"
@@ -3220,6 +3377,7 @@ version = "0.9.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3082666a3a6433f7f511c7192923fa1fe07c69332d3c6a2e6bb040b569199d5a"
 dependencies = [
+ "async-stream",
  "async-trait",
  "axum",
  "base64 0.21.2",
@@ -3235,7 +3393,9 @@ dependencies = [
  "percent-encoding",
  "pin-project",
  "prost",
+ "rustls-pemfile",
  "tokio",
+ "tokio-rustls",
  "tokio-stream",
  "tower",
  "tower-layer",
@@ -3369,6 +3529,12 @@ version = "1.0.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "301abaae475aa91687eb82514b328ab47a211a533026cb25fc3e519b86adfc3c"
 
+[[package]]
+name = "untrusted"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"
+
 [[package]]
 name = "utf8parse"
 version = "0.2.1"
@@ -3503,6 +3669,16 @@ version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ca6ad05a4870b2bf5fe995117d3728437bd27d7cd5f06f13c17443ef369775a1"
 
+[[package]]
+name = "web-sys"
+version = "0.3.64"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b85cbef8c220a6abc02aefd892dfc0fc23afb1c6a426316ec33253a3877249b"
+dependencies = [
+ "js-sys",
+ "wasm-bindgen",
+]
+
 [[package]]
 name = "which"
 version = "4.4.0"
@@ -3725,6 +3901,15 @@ version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
 
+[[package]]
+name = "yasna"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd"
+dependencies = [
+ "time 0.3.26",
+]
+
 [[package]]
 name = "zeroize"
 version = "1.6.0"
diff --git a/Cargo.toml b/Cargo.toml
index 4b6440d..7a90374 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -4,8 +4,8 @@
 # Do not edit this file directly.
 
 [profile.release]
-lto = true
-opt-level = 3
+# lto = true
+opt-level = 2
 
 [workspace]
 resolver = "2"
@@ -130,21 +130,25 @@ prost = "0.11.9"
 prost-build = "0.11.9"
 prost-types = "0.11.9"
 rand = "0.8.5"
+rcgen = "0.11.3"
 relative-path = "1.8.0"
 rusoto_core = "0.48.0"
 rusoto_mock = "=0.48.0"
 rusoto_s3 = "0.48.0"
 rusoto_signature = "0.48.0"
+rustls-pemfile = "1.0.3"
 scopeguard = "1.2.0"
 serde = "1.0.167"
 sha2 = "0.10.7"
 shellexpand = "3.1.0"
 shlex = "1.1.0"
 stdext = "0.3.1"
+tls-listener = { version = "0.7.0", features = ["hyper-h2", "rustls"] }
 tokio = { version = "1.29.1", features = ["macros", "io-util", "fs", "rt-multi-thread", "parking_lot"] }
+tokio-rustls = "0.24.1"
 tokio-stream = { version = "0.1.14", features = ["fs", "sync"] }
 tokio-util = { version = "0.7.8", features = ["io", "io-util", "codec"] }
-tonic = { version = "0.9.2", features = ["gzip"] }
+tonic = { version = "0.9.2", features = ["gzip", "tls", "transport"] }
 tonic-build = "0.9.2"
 tower = "0.4.13"
 uuid = { version = "1.4.0", features = ["v4"] }
diff --git a/cas/BUILD b/cas/BUILD
index 3de6b77..bda4060 100644
--- a/cas/BUILD
+++ b/cas/BUILD
@@ -28,8 +28,12 @@ rust_binary(
         "@crate_index//:parking_lot",
         "@crate_index//:prometheus-client",
         "@crate_index//:axum",
+        "@crate_index//:tls-listener",
         "@crate_index//:tower",
         "@crate_index//:tokio",
         "@crate_index//:tonic",
+        "@crate_index//:tokio-rustls",
+        "@crate_index//:rcgen",
+        "@crate_index//:rustls-pemfile",
     ],
 )
diff --git a/cas/cas_main.rs b/cas/cas_main.rs
index 5e144a2..920b22f 100644
--- a/cas/cas_main.rs
+++ b/cas/cas_main.rs
@@ -22,12 +22,16 @@ use async_lock::Mutex as AsyncMutex;
 use axum::Router;
 use clap::Parser;
 use futures::future::{select_all, BoxFuture, OptionFuture, TryFutureExt};
+use futures::FutureExt;
 use hyper::server::conn::Http;
 use hyper::{Body, Response};
 use parking_lot::Mutex;
+use rustls_pemfile::{certs, pkcs8_private_keys};
 use scopeguard::guard;
 use tokio::net::TcpListener;
 use tokio::task::spawn_blocking;
+use tokio_rustls::rustls::{Certificate, PrivateKey, ServerConfig as TlsServerConfig};
+use tokio_rustls::TlsAcceptor;
 use tonic::codec::CompressionEncoding;
 use tonic::transport::Server as TonicServer;
 use tower::util::ServiceExt;
@@ -386,13 +390,60 @@ async fn inner_main(cfg: CasConfig, server_start_timestamp: u64) -> Result<(), B
             )
         }
 
+        // Configure our TLS acceptor if we have TLS configured.
+        let maybe_tls_acceptor = server_cfg.tls.map_or(Ok(None), |tls_config| {
+            let mut cert_reader = std::io::BufReader::new(
+                std::fs::File::open(&tls_config.cert_file)
+                    .err_tip(|| format!("Could not open cert file {}", tls_config.cert_file))?,
+            );
+            let certs = certs(&mut cert_reader)
+                .err_tip(|| format!("Could not extract certs from file {}", tls_config.cert_file))?
+                .into_iter()
+                .map(Certificate)
+                .collect();
+            let mut key_reader = std::io::BufReader::new(
+                std::fs::File::open(&tls_config.key_file)
+                    .err_tip(|| format!("Could not open key file {}", tls_config.key_file))?,
+            );
+            let keys = pkcs8_private_keys(&mut key_reader)
+                .err_tip(|| format!("Could not extract key(s) from file {}", tls_config.key_file))?;
+            if keys.len() != 1 {
+                return Err(Box::new(make_err!(
+                    Code::InvalidArgument,
+                    "Expected 1 key in file {}, found {} keys",
+                    tls_config.key_file,
+                    keys.len()
+                )));
+            }
+            let mut config = TlsServerConfig::builder()
+                .with_safe_defaults()
+                .with_no_client_auth()
+                .with_single_cert(certs, PrivateKey(keys.into_iter().next().unwrap().into()))
+                .map_err(|e| make_err!(Code::Internal, "Could not create TlsServerConfig : {:?}", e))?;
+
+            config.alpn_protocols.push("h2".into());
+            Ok(Some(TlsAcceptor::from(Arc::new(config))))
+        })?;
+
         let socket_addr = server_cfg.listen_address.parse::<SocketAddr>()?;
         let tcp_listener = TcpListener::bind(&socket_addr).await?;
+        let mut http = Http::new();
+        http.http2_keep_alive_interval(Duration::from_secs(10));
+        http.http2_max_pending_accept_reset_streams(1000);
         log::warn!("Ready, listening on {}", socket_addr);
         root_futures.push(Box::pin(async move {
             loop {
                 // Wait for client to connect.
-                let (tcp_stream, remote_addr) = tcp_listener.accept().await?;
+                let (tcp_stream, remote_addr) = match tcp_listener.accept().await {
+                    Ok(result) => result,
+                    Err(e) => {
+                        log::error!(
+                            "{:?}",
+                            Result::<(), _>::Err(e).err_tip(|| "Failed to accept tcp connection")
+                        );
+                        continue;
+                    }
+                };
                 connected_clients_mux.inner.lock().insert(remote_addr);
                 connected_clients_mux.counter.inc();
 
@@ -401,7 +452,22 @@ async fn inner_main(cfg: CasConfig, server_start_timestamp: u64) -> Result<(), B
                 let scope_guard = guard(connected_clients_mux.clone(), move |connected_clients_mux| {
                     connected_clients_mux.inner.lock().remove(&remote_addr);
                 });
-                let fut = Http::new().serve_connection(tcp_stream, svc.clone());
+                let (http, svc) = (http.clone(), svc.clone());
+                let fut = if let Some(tls_acceptor) = &maybe_tls_acceptor {
+                    let tls_stream = match tls_acceptor.accept(tcp_stream).await {
+                        Ok(result) => result,
+                        Err(e) => {
+                            log::error!(
+                                "{:?}",
+                                Result::<(), _>::Err(e).err_tip(|| "Failed to accept tls stream")
+                            );
+                            continue;
+                        }
+                    };
+                    http.serve_connection(tls_stream, svc).left_future()
+                } else {
+                    http.serve_connection(tcp_stream, svc).right_future()
+                };
                 tokio::spawn(async move {
                     // Move it into our spawn, so if our spawn dies the cleanup happens.
                     let _guard = scope_guard;
diff --git a/cas/grpc_service/bytestream_server.rs b/cas/grpc_service/bytestream_server.rs
index 37c5a10..948617a 100644
--- a/cas/grpc_service/bytestream_server.rs
+++ b/cas/grpc_service/bytestream_server.rs
@@ -179,46 +179,63 @@ impl ByteStreamServer {
         Server::new(self)
     }
 
-    fn create_or_join_upload_stream(
+    async fn create_or_join_upload_stream(
         &self,
         uuid: String,
         store: Arc<dyn Store>,
         digest: DigestInfo,
     ) -> Result<ActiveStreamGuard<'_>, Error> {
-        let mut active_uploads = self.active_uploads.lock();
-        if let Some(maybe_idle_stream) = active_uploads.get_mut(&uuid) {
-            if let Some(idle_stream) = maybe_idle_stream.1.take() {
-                log::info!("Joining existing stream {uuid}");
-                return Ok(idle_stream.into_active_stream(maybe_idle_stream.0.clone(), self));
+        let mut retries = 0;
+        loop {
+            if retries != 0 {
+                tokio::time::sleep(Duration::from_millis(50)).await;
+            }
+            let mut active_uploads = self.active_uploads.lock();
+            if let Some(maybe_idle_stream) = active_uploads.get_mut(&uuid) {
+                if let Some(idle_stream) = maybe_idle_stream.1.take() {
+                    log::info!("Joining existing stream {uuid}");
+                    return Ok(idle_stream.into_active_stream(maybe_idle_stream.0.clone(), self));
+                }
+                retries += 1;
+                if retries < 100 {
+                    continue;
+                }
+                log::warn!(
+                    "Cannot upload same UUID simultaneously {uuid} {}-{}",
+                    digest.hash_str(),
+                    digest.size_bytes
+                );
+                return Err(make_input_err!("Cannot upload same UUID simultaneously"));
             }
-            return Err(make_input_err!("Cannot upload same UUID simultaneously"));
-        }
 
-        let (tx, rx) = make_buf_channel_pair();
-        let store_update_fut = Box::pin(async move {
-            // We need to wrap `Store::update()` in a another future because we need to capture
-            // `store` to ensure it's lifetime follows the future and not the caller.
-            Pin::new(store.as_ref())
-                // Bytestream always uses digest size as the actual byte size.
-                .update(
-                    digest,
-                    rx,
-                    UploadSizeInfo::ExactSize(usize::try_from(digest.size_bytes).err_tip(|| "Invalid digest size")?),
-                )
-                .await
-        });
-        let bytes_received = Arc::new(AtomicU64::new(0));
-        // Our stream is "in use" if the key is in the map, but the value is None.
-        active_uploads.insert(uuid.clone(), (bytes_received.clone(), None));
-        Ok(ActiveStreamGuard {
-            stream_state: Some(StreamState {
-                tx,
-                store_update_fut,
-                uuid,
-            }),
-            bytes_received,
-            bytestream_server: self,
-        })
+            let (tx, rx) = make_buf_channel_pair();
+            let store_update_fut = Box::pin(async move {
+                // We need to wrap `Store::update()` in a another future because we need to capture
+                // `store` to ensure it's lifetime follows the future and not the caller.
+                Pin::new(store.as_ref())
+                    // Bytestream always uses digest size as the actual byte size.
+                    .update(
+                        digest,
+                        rx,
+                        UploadSizeInfo::ExactSize(
+                            usize::try_from(digest.size_bytes).err_tip(|| "Invalid digest size")?,
+                        ),
+                    )
+                    .await
+            });
+            let bytes_received = Arc::new(AtomicU64::new(0));
+            // Our stream is "in use" if the key is in the map, but the value is None.
+            active_uploads.insert(uuid.clone(), (bytes_received.clone(), None));
+            return Ok(ActiveStreamGuard {
+                stream_state: Some(StreamState {
+                    tx,
+                    store_update_fut,
+                    uuid,
+                }),
+                bytes_received,
+                bytestream_server: self,
+            });
+        }
     }
 
     async fn inner_read(&self, grpc_request: Request<ReadRequest>) -> Result<Response<ReadStream>, Error> {
@@ -355,7 +372,7 @@ impl ByteStreamServer {
             .ok_or_else(|| make_input_err!("UUID must be set if writing data"))?;
         let digest = DigestInfo::try_new(&stream.hash, stream.expected_size)
             .err_tip(|| "Invalid digest input in ByteStream::write")?;
-        let mut active_stream_guard = self.create_or_join_upload_stream(uuid, store, digest)?;
+        let mut active_stream_guard = self.create_or_join_upload_stream(uuid, store, digest).await?;
         let expected_size = stream.expected_size as u64;
 
         async fn process_client_stream(
diff --git a/cas/scheduler/simple_scheduler.rs b/cas/scheduler/simple_scheduler.rs
index 04bbd1c..0c2dcd4 100644
--- a/cas/scheduler/simple_scheduler.rs
+++ b/cas/scheduler/simple_scheduler.rs
@@ -297,7 +297,7 @@ impl SimpleSchedulerImpl {
     }
 
     fn find_recently_completed_action(
-        &mut self,
+        &self,
         unique_qualifier: &ActionInfoHashKey,
     ) -> Option<watch::Receiver<Arc<ActionState>>> {
         self.recently_completed_actions
@@ -315,6 +315,7 @@ impl SimpleSchedulerImpl {
                     .map(|running_action| &running_action.action)
             })
             .map(Self::subscribe_to_channel)
+            .or_else(|| self.find_recently_completed_action(unique_qualifier))
     }
 
     fn retry_action(&mut self, action_info: &Arc<ActionInfo>, worker_id: &WorkerId, err: Error) {
@@ -713,7 +714,7 @@ impl ActionScheduler for SimpleScheduler {
         &self,
         unique_qualifier: &ActionInfoHashKey,
     ) -> Option<watch::Receiver<Arc<ActionState>>> {
-        let mut inner = self.get_inner_lock();
+        let inner = self.get_inner_lock();
         let result = inner
             .find_existing_action(unique_qualifier)
             .or_else(|| inner.find_recently_completed_action(unique_qualifier));
@@ -814,10 +815,18 @@ impl WorkerScheduler for SimpleScheduler {
                 })
                 .collect();
             for worker_id in &worker_ids_to_remove {
-                let err = make_err!(Code::Internal, "Worker {worker_id} timed out, removing from pool",);
+                let err = make_err!(Code::Internal, "Worker {worker_id} timed out, removing from pool");
                 log::warn!("{:?}", err);
                 inner.immediate_evict_worker(worker_id, err);
             }
+
+            for awaited_action in inner.queued_actions.values() {
+                let _ = awaited_action.notify_channel.send(awaited_action.current_state.clone());
+            }
+            for running_action in inner.active_actions.values() {
+                let _ = running_action.action.notify_channel.send(running_action.action.current_state.clone());
+            }
+
             Ok(())
         })
     }
diff --git a/cas/store/s3_store.rs b/cas/store/s3_store.rs
index f3d5ea1..bf5257f 100644
--- a/cas/store/s3_store.rs
+++ b/cas/store/s3_store.rs
@@ -146,10 +146,14 @@ impl S3Store {
             let credentials_provider =
                 DefaultCredentialsProvider::new().expect("failed to create credentials provider");
 
-            let region = config
-                .region
-                .parse::<Region>()
-                .map_err(|e| make_input_err!("{}", e.to_string()))?;
+            // let region = config
+            //     .region
+            //     .parse::<Region>()
+            //     .map_err(|e| make_input_err!("{}", e.to_string()))?;
+            let region = Region::Custom {
+                name: "us-central1".to_string(),
+                endpoint: "https://storage.googleapis.com".to_string(),
+            };
             S3Client::new_with(dispatcher, credentials_provider, region)
         };
         let jitter_amt = config.retry.jitter;
diff --git a/cas/worker/running_actions_manager.rs b/cas/worker/running_actions_manager.rs
index 27d55da..5c40d2a 100644
--- a/cas/worker/running_actions_manager.rs
+++ b/cas/worker/running_actions_manager.rs
@@ -861,14 +861,15 @@ impl RunningActionImpl {
                                 .map(|mut file_info| {
                                     file_info.name_or_path = NameOrPath::Path(entry);
                                     file_info
-                                })?,
+                                })
+                                .err_tip(|| format!("Uploading file {full_path:?}"))?,
                         ));
                     }
                     metadata
                 };
                 if metadata.is_dir() {
                     Ok(OutputType::Directory(
-                        upload_directory(cas_store, full_path, work_directory)
+                        upload_directory(cas_store, &full_path, work_directory)
                             .and_then(|(root_dir, children)| async move {
                                 let tree = ProtoTree {
                                     root: Some(root_dir),
@@ -882,7 +883,8 @@ impl RunningActionImpl {
                                     tree_digest,
                                 })
                             })
-                            .await?,
+                            .await
+                            .err_tip(|| format!("Uploading directory {full_path:?}"))?,
                     ))
                 } else if metadata.is_symlink() {
                     let output_symlink = upload_symlink(&full_path, work_directory)
@@ -890,7 +892,8 @@ impl RunningActionImpl {
                         .map(|mut symlink_info| {
                             symlink_info.name_or_path = NameOrPath::Path(entry);
                             symlink_info
-                        })?;
+                        })
+                        .err_tip(|| format!("Uploading symlink {full_path:?}"))?;
                     match fs::metadata(&full_path).await {
                         Ok(metadata) => {
                             if metadata.is_dir() {
@@ -933,16 +936,20 @@ impl RunningActionImpl {
 
         let stdout_digest_fut = self.metrics().upload_stdout.wrap(async {
             let cursor = Cursor::new(execution_result.stdout);
-            let (digest, mut cursor) = compute_digest(cursor).await?;
-            cursor.rewind().await.err_tip(|| "Could not rewind cursor")?;
-            upload_to_store(cas_store, digest, &mut cursor).await?;
+            let (digest, mut cursor) = compute_digest(cursor).await.err_tip(|| "Computing stdout digest")?;
+            cursor.rewind().await.err_tip(|| "Could not rewind stdout cursor")?;
+            upload_to_store(cas_store, digest, &mut cursor)
+                .await
+                .err_tip(|| "Uploading stdout")?;
             Result::<DigestInfo, Error>::Ok(digest)
         });
         let stderr_digest_fut = self.metrics().upload_stderr.wrap(async {
             let cursor = Cursor::new(execution_result.stderr);
-            let (digest, mut cursor) = compute_digest(cursor).await?;
-            cursor.rewind().await.err_tip(|| "Could not rewind cursor")?;
-            upload_to_store(cas_store, digest, &mut cursor).await?;
+            let (digest, mut cursor) = compute_digest(cursor).await.err_tip(|| "Computing stderr digest")?;
+            cursor.rewind().await.err_tip(|| "Could not stderr rewind cursor")?;
+            upload_to_store(cas_store, digest, &mut cursor)
+                .await
+                .err_tip(|| "Uploading stderr")?;
             Result::<DigestInfo, Error>::Ok(digest)
         });
 
diff --git a/config/cas_server.rs b/config/cas_server.rs
index 0d3c5dc..1f60c33 100644
--- a/config/cas_server.rs
+++ b/config/cas_server.rs
@@ -189,6 +189,17 @@ pub struct ServicesConfig {
     pub prometheus: Option<PrometheusConfig>,
 }
 
+#[derive(Deserialize, Debug)]
+pub struct TlsConfig {
+    /// Path to the certificate file.
+    #[serde(deserialize_with = "convert_string_with_shellexpand")]
+    pub cert_file: String,
+
+    /// Path to the private key file.
+    #[serde(deserialize_with = "convert_string_with_shellexpand")]
+    pub key_file: String,
+}
+
 #[derive(Deserialize, Debug)]
 pub struct ServerConfig {
     /// Name of the server. This is used to help identify the service
@@ -209,6 +220,12 @@ pub struct ServerConfig {
 
     /// Services to attach to server.
     pub services: Option<ServicesConfig>,
+
+    /// Tls Configuration for this server.
+    /// If not set, the server will not use TLS.
+    ///
+    /// Default: None
+    pub tls: Option<TlsConfig>,
 }
 
 #[allow(non_camel_case_types)]
diff --git a/config/examples/basic_cas.json b/config/examples/basic_cas.json
index f06d298..dc86660 100644
--- a/config/examples/basic_cas.json
+++ b/config/examples/basic_cas.json
@@ -61,36 +61,40 @@
       }
     }
   },
-  "workers": [{
-    "local": {
-      "worker_api_endpoint": {
-        "uri": "grpc://127.0.0.1:50061",
-      },
-      "cas_fast_slow_store": "WORKER_FAST_SLOW_STORE",
-      "ac_store": "AC_MAIN_STORE",
-      "work_directory": "/tmp/turbo_cache/work",
-      "platform_properties": {
-        "cpu_count": {
-          "values": ["16"],
-        },
-        "memory_kb": {
-          "values": ["500000"],
-        },
-        "network_kbps": {
-          "values": ["100000"],
-        },
-        "cpu_arch": {
-          "values": ["x86_64"],
-        },
-        "docker_image": {
-          "query_cmd": "docker images --format {{.Repository}}:{{.Tag}}",
-        }
-      }
-    }
-  }],
+  // "workers": [{
+  //   "local": {
+  //     "worker_api_endpoint": {
+  //       "uri": "grpc://127.0.0.1:50061",
+  //     },
+  //     "cas_fast_slow_store": "WORKER_FAST_SLOW_STORE",
+  //     "ac_store": "AC_MAIN_STORE",
+  //     "work_directory": "/tmp/turbo_cache/work",
+  //     "platform_properties": {
+  //       "cpu_count": {
+  //         "values": ["16"],
+  //       },
+  //       "memory_kb": {
+  //         "values": ["500000"],
+  //       },
+  //       "network_kbps": {
+  //         "values": ["100000"],
+  //       },
+  //       "cpu_arch": {
+  //         "values": ["x86_64"],
+  //       },
+  //       "docker_image": {
+  //         "query_cmd": "true",
+  //       }
+  //     }
+  //   }
+  // }],
   "servers": [{
     "name": "public",
     "listen_address": "0.0.0.0:50051",
+    "tls": {
+      "cert_file": "/tmp/cert.pem",
+      "key_file": "/tmp/key.pem"
+    },
     "services": {
       "cas": {
         "main": {
@@ -123,22 +127,24 @@
         "max_bytes_per_stream": 64000, // 64kb.
       }
     }
-  }, {
-    "name": "private_workers_servers",
-    "listen_address": "0.0.0.0:50061",
-    "services": {
-      "prometheus": {
-        "path": "/metrics"
-      },
-      // Note: This should be served on a different port, because it has
-      // a different permission set than the other services.
-      // In other words, this service is a backend api. The ones above
-      // are a frontend api.
-      "worker_api": {
-        "scheduler": "MAIN_SCHEDULER",
-      }
-    }
-  }],
+  },
+  // {
+  //   "name": "private_workers_servers",
+  //   "listen_address": "0.0.0.0:50061",
+  //   "services": {
+  //     "prometheus": {
+  //       "path": "/metrics"
+  //     },
+  //     // Note: This should be served on a different port, because it has
+  //     // a different permission set than the other services.
+  //     // In other words, this service is a backend api. The ones above
+  //     // are a frontend api.
+  //     "worker_api": {
+  //       "scheduler": "MAIN_SCHEDULER",
+  //     }
+  //   }
+  // }
+],
   "global": {
     "max_open_files": 512
   }
diff --git a/deployment-examples/terraform/README.md b/deployment-examples/terraform_aws/README.md
similarity index 100%
rename from deployment-examples/terraform/README.md
rename to deployment-examples/terraform_aws/README.md
diff --git a/deployment-examples/terraform/ami.tf b/deployment-examples/terraform_aws/ami.tf
similarity index 100%
rename from deployment-examples/terraform/ami.tf
rename to deployment-examples/terraform_aws/ami.tf
diff --git a/deployment-examples/terraform/auto_scaling_groups.tf b/deployment-examples/terraform_aws/auto_scaling_groups.tf
similarity index 100%
rename from deployment-examples/terraform/auto_scaling_groups.tf
rename to deployment-examples/terraform_aws/auto_scaling_groups.tf
diff --git a/deployment-examples/terraform/certificates.tf b/deployment-examples/terraform_aws/certificates.tf
similarity index 100%
rename from deployment-examples/terraform/certificates.tf
rename to deployment-examples/terraform_aws/certificates.tf
diff --git a/deployment-examples/terraform/common.tf b/deployment-examples/terraform_aws/common.tf
similarity index 100%
rename from deployment-examples/terraform/common.tf
rename to deployment-examples/terraform_aws/common.tf
diff --git a/deployment-examples/terraform/dns.tf b/deployment-examples/terraform_aws/dns.tf
similarity index 100%
rename from deployment-examples/terraform/dns.tf
rename to deployment-examples/terraform_aws/dns.tf
diff --git a/deployment-examples/terraform/iam.tf b/deployment-examples/terraform_aws/iam.tf
similarity index 100%
rename from deployment-examples/terraform/iam.tf
rename to deployment-examples/terraform_aws/iam.tf
diff --git a/deployment-examples/terraform/lambdas.tf b/deployment-examples/terraform_aws/lambdas.tf
similarity index 100%
rename from deployment-examples/terraform/lambdas.tf
rename to deployment-examples/terraform_aws/lambdas.tf
diff --git a/deployment-examples/terraform/load_balancers.tf b/deployment-examples/terraform_aws/load_balancers.tf
similarity index 100%
rename from deployment-examples/terraform/load_balancers.tf
rename to deployment-examples/terraform_aws/load_balancers.tf
diff --git a/deployment-examples/terraform/main.tf b/deployment-examples/terraform_aws/main.tf
similarity index 100%
rename from deployment-examples/terraform/main.tf
rename to deployment-examples/terraform_aws/main.tf
diff --git a/deployment-examples/terraform/s3.tf b/deployment-examples/terraform_aws/s3.tf
similarity index 100%
rename from deployment-examples/terraform/s3.tf
rename to deployment-examples/terraform_aws/s3.tf
diff --git a/deployment-examples/terraform/scripts/cas.json b/deployment-examples/terraform_aws/scripts/cas.json
similarity index 100%
rename from deployment-examples/terraform/scripts/cas.json
rename to deployment-examples/terraform_aws/scripts/cas.json
diff --git a/deployment-examples/terraform/scripts/create_filesystem.sh b/deployment-examples/terraform_aws/scripts/create_filesystem.sh
similarity index 100%
rename from deployment-examples/terraform/scripts/create_filesystem.sh
rename to deployment-examples/terraform_aws/scripts/create_filesystem.sh
diff --git a/deployment-examples/terraform/scripts/lambdas/update_scheduler_ips.py b/deployment-examples/terraform_aws/scripts/lambdas/update_scheduler_ips.py
similarity index 100%
rename from deployment-examples/terraform/scripts/lambdas/update_scheduler_ips.py
rename to deployment-examples/terraform_aws/scripts/lambdas/update_scheduler_ips.py
diff --git a/deployment-examples/terraform/scripts/scheduler.json b/deployment-examples/terraform_aws/scripts/scheduler.json
similarity index 100%
rename from deployment-examples/terraform/scripts/scheduler.json
rename to deployment-examples/terraform_aws/scripts/scheduler.json
diff --git a/deployment-examples/terraform/scripts/start_turbo_cache.sh b/deployment-examples/terraform_aws/scripts/start_turbo_cache.sh
similarity index 100%
rename from deployment-examples/terraform/scripts/start_turbo_cache.sh
rename to deployment-examples/terraform_aws/scripts/start_turbo_cache.sh
diff --git a/deployment-examples/terraform/scripts/turbo-cache.service b/deployment-examples/terraform_aws/scripts/turbo-cache.service
similarity index 100%
rename from deployment-examples/terraform/scripts/turbo-cache.service
rename to deployment-examples/terraform_aws/scripts/turbo-cache.service
diff --git a/deployment-examples/terraform/scripts/worker.json b/deployment-examples/terraform_aws/scripts/worker.json
similarity index 100%
rename from deployment-examples/terraform/scripts/worker.json
rename to deployment-examples/terraform_aws/scripts/worker.json
diff --git a/deployment-examples/terraform/security_groups.tf b/deployment-examples/terraform_aws/security_groups.tf
similarity index 100%
rename from deployment-examples/terraform/security_groups.tf
rename to deployment-examples/terraform_aws/security_groups.tf
diff --git a/deployment-examples/terraform/ssh_keys.tf b/deployment-examples/terraform_aws/ssh_keys.tf
similarity index 100%
rename from deployment-examples/terraform/ssh_keys.tf
rename to deployment-examples/terraform_aws/ssh_keys.tf
diff --git a/deployment-examples/terraform/variables.tf b/deployment-examples/terraform_aws/variables.tf
similarity index 100%
rename from deployment-examples/terraform/variables.tf
rename to deployment-examples/terraform_aws/variables.tf
diff --git a/deployment-examples/terraform/vpc.tf b/deployment-examples/terraform_aws/vpc.tf
similarity index 100%
rename from deployment-examples/terraform/vpc.tf
rename to deployment-examples/terraform_aws/vpc.tf
diff --git a/deployment-examples/terraform_gcp/cloud_functions.tf b/deployment-examples/terraform_gcp/cloud_functions.tf
new file mode 100644
index 0000000..2e27b0f
--- /dev/null
+++ b/deployment-examples/terraform_gcp/cloud_functions.tf
@@ -0,0 +1,86 @@
+resource "google_service_account" "cf_service_account" {
+  account_id   = "turbo-cache-cf-sa"
+  display_name = "Cloud Functions Service Account"
+}
+
+resource "google_cloudfunctions2_function" "update_ips_cf" {
+  name        = "turbo-cache-update-ips-cf"
+  location    = var.gcp_region
+
+  build_config {
+    runtime     = "nodejs18"
+    entry_point = "updateIPs"
+    source {
+      storage_source {
+        bucket = google_storage_bucket.cf_bucket.name
+        object = google_storage_bucket_object.cf_zip_file.name
+      }
+    }
+  }
+
+  service_config {
+    min_instance_count    = 1
+    available_memory      = "256Mi"
+    timeout_seconds       = 60
+    service_account_email = google_service_account.cf_service_account.email
+    environment_variables = {
+      GCP_PROJECT = var.gcp_project_id,
+      DNS_ZONE = data.google_dns_managed_zone.dns_zone.name,
+      SCHEDULER_INSTANCE_PREFIX = google_compute_instance_group_manager.scheduler_instance_group.base_instance_name,
+      CAS_INSTANCE_PREFIX = google_compute_instance_group_manager.cas_instance_group.base_instance_name,
+    }
+  }
+}
+
+resource "google_cloudfunctions2_function_iam_member" "invoker" {
+  project        = google_cloudfunctions2_function.update_ips_cf.project
+  location       = google_cloudfunctions2_function.update_ips_cf.location
+  cloud_function = google_cloudfunctions2_function.update_ips_cf.name
+  role           = "roles/cloudfunctions.invoker"
+  member         = "serviceAccount:${google_service_account.cf_service_account.email}"
+}
+
+resource "google_cloud_run_service_iam_member" "cloud_run_invoker" {
+  project  = google_cloudfunctions2_function.update_ips_cf.project
+  location = google_cloudfunctions2_function.update_ips_cf.location
+  service  = google_cloudfunctions2_function.update_ips_cf.name
+  role     = "roles/run.invoker"
+  member   = "serviceAccount:${google_service_account.cf_service_account.email}"
+}
+
+resource "google_cloud_scheduler_job" "invoke_cloud_function" {
+  name        = "turbo-cache-update-ips-invoke-cf"
+  description = "Updates the internal IP addresses of some resources in case instances go down."
+  schedule    = "*/5 * * * *" # Every 5 mins.
+  project     = google_cloudfunctions2_function.update_ips_cf.project
+  region      = google_cloudfunctions2_function.update_ips_cf.location
+
+  http_target {
+    uri         = google_cloudfunctions2_function.update_ips_cf.service_config[0].uri
+    http_method = "POST"
+    oidc_token {
+      audience              = "${google_cloudfunctions2_function.update_ips_cf.service_config[0].uri}/"
+      service_account_email = google_service_account.cf_service_account.email
+    }
+  }
+}
+
+resource "google_project_iam_custom_role" "update_ips_cf_role" {
+  role_id     = "turboCacheUpdateIpsCfRole"
+  title       = "Update IPs CF Role"
+  description = "Update IPs Cloud Function Role"
+  permissions = [
+    "compute.instances.list",
+    "dns.changes.create",
+    "dns.managedZones.get",
+    "dns.resourceRecordSets.get",
+    "dns.resourceRecordSets.list",
+    "dns.resourceRecordSets.update"
+  ]
+}
+
+resource "google_project_iam_member" "update_ips_cf_iam_member" {
+  member  = "serviceAccount:${google_service_account.cf_service_account.email}"
+  project = var.gcp_project_id
+  role    = google_project_iam_custom_role.update_ips_cf_role.name
+}
diff --git a/deployment-examples/terraform_gcp/compute_machine_image.tf b/deployment-examples/terraform_gcp/compute_machine_image.tf
new file mode 100644
index 0000000..013d32b
--- /dev/null
+++ b/deployment-examples/terraform_gcp/compute_machine_image.tf
@@ -0,0 +1,252 @@
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+resource "google_compute_instance" "build_instance" {
+  # project      = 
+  name         = "turbo-cache-build-instance"
+  machine_type = "e2-highcpu-16"
+  zone         = var.gcp_zone
+
+  boot_disk {
+    initialize_params {
+      image = "ubuntu-os-cloud/ubuntu-2004-lts"
+      size = "50"
+    }
+  }
+
+  network_interface {
+    # network     = google_compute_network.vpc_network.self_link
+    network = "default"
+
+    access_config {
+      # Ephemeral
+    }
+  }
+
+  # vpc_security_group_ids = [
+  #   aws_security_group.allow_ssh_sg.id,
+  #   aws_security_group.ami_builder_instance_sg.id,
+  #   aws_security_group.allow_aws_ec2_and_s3_endpoints.id,
+  # ]
+
+  # root_block_device {
+  #   volume_size = 8
+  #   volume_type = "gp3"
+  # }
+
+  # tags = {
+  #   "turbo_cache:instance_type" = "ami_builder",
+  # }
+
+  metadata = {
+    ssh-keys = "ubuntu:${data.tls_public_key.turbo_cache_pem.public_key_openssh}"
+  }
+
+  connection {
+    host        = coalesce(self.network_interface.0.access_config.0.nat_ip, self.network_interface.0.network_ip)
+    agent       = true
+    type        = "ssh"
+    user        = "ubuntu"
+    private_key = data.tls_public_key.turbo_cache_pem.private_key_openssh
+  }
+
+  provisioner "local-exec" {
+    command = <<EOT
+      set -ex
+      SELF_DIR=$(pwd)
+      cd ../../
+      rm -rf $SELF_DIR/.terraform-turbo-cache-builder
+      mkdir -p $SELF_DIR/.terraform-turbo-cache-builder
+      find . ! -ipath '*/target*' -and ! \( -ipath '*/.*' -and ! -name '.rustfmt.toml' -and ! -name '.bazelrc' \) -and ! -ipath './bazel-*' -type f -print0 | tar cvf $SELF_DIR/.terraform-turbo-cache-builder/file.tar.gz --null -T -
+    EOT
+  }
+
+  provisioner "file" {
+    source      = "./scripts/create_filesystem.sh"
+    destination = "create_filesystem.sh"
+  }
+
+  # provisioner "remote-exec" {
+  #   # Install and setup zfs.
+  #   inline = [
+  #     <<EOT
+  #       set -eux &&
+  #       `# When the instance first starts up AWS may have not finished add the certs to the` &&
+  #       `# apt servers, so we sleep for a few seconds` &&
+  #       sleep 5 &&
+  #       sudo DEBIAN_FRONTEND=noninteractive apt-get update &&
+  #       sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential autoconf automake libtool gawk alien fakeroot dkms libblkid-dev uuid-dev libudev-dev libssl-dev zlib1g-dev libaio-dev libattr1-dev libelf-dev linux-headers-generic python3 python3-dev python3-setuptools python3-cffi libffi-dev python3-packaging git libcurl4-openssl-dev debhelper-compat dh-python po-debconf python3-all-dev python3-sphinx &&
+  #       cd /tmp &&
+  #       wget https://github.com/openzfs/zfs/archive/refs/tags/zfs-2.1.13.tar.gz &&
+  #       test $(sha256sum zfs-2.1.13.tar.gz | head -c64) == "d065719e4aefbc0513a6e652e4d15ba15b0bbfa4916442d5c99f36dd96ba0407" &&
+  #       tar xzf zfs-2.1.13.tar.gz &&
+  #       rm -rf zfs-2.1.13.tar.gz &&
+  #       cd zfs-zfs-2.1.13/ &&
+  #       sh autogen.sh &&
+  #       ./configure &&
+  #       make -s deb -j$(nproc) &&
+  #       dpkg -i libzfs5_2.1.13-1_amd64.deb &&
+  #       dpkg -i libzpool5_2.1.13-1_amd64.deb &&
+  #       dpkg -i libnvpair3_2.1.13-1_amd64.deb &&
+  #       dpkg -i libuutil3_2.1.13-1_amd64.deb &&
+  #       dpkg -i kmod-zfs-$(uname -r)_2.1.13-1_amd64.deb &&
+  #       dpkg -i zfs_2.1.13-1_amd64.deb &&
+  #       modprobe zfs &&
+  #       cd / &&
+  #       sudo DEBIAN_FRONTEND=noninteractive apt remove -y build-essential autoconf automake libtool gawk alien fakeroot dkms libblkid-dev uuid-dev libudev-dev libssl-dev zlib1g-dev libaio-dev libattr1-dev libelf-dev linux-headers-generic python3 python3-dev python3-setuptools python3-cffi libffi-dev python3-packaging git libcurl4-openssl-dev debhelper-compat dh-python po-debconf python3-all-dev python3-sphinx &&
+  #       rm -rf /tmp/zfs-zfs-2.1.13
+  #     EOT
+  #   ]
+  # }
+
+  provisioner "remote-exec" {
+    # By moving common temp folder locations to the nvme drives (if available)
+    # will greatly reduce the amount of data on the EBS volume. This also will
+    # make the AMI/EBS snapshot much faster to create, since the blocks on the
+    # EBS drives was not changed.
+    # When the instance starts we need to give a tiny bit of time for amazon
+    # to install the keys for all the apt packages.
+    inline = [
+      <<EOT
+        set -eux &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get update &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl jq build-essential lld pkg-config libssl-dev &&
+        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
+        sudo mv ~/create_filesystem.sh /root/create_filesystem.sh &&
+        sudo chmod +x /root/create_filesystem.sh &&
+        sudo /root/create_filesystem.sh /mnt/data &&
+        sudo rm -rf /home/ubuntu/*
+      EOT
+    ]
+  }
+
+  provisioner "file" {
+    source      = "./.terraform-turbo-cache-builder/file.tar.gz"
+    destination = "/tmp/file.tar.gz"
+  }
+
+  # provisioner "remote-exec" {
+  #   inline = [
+  #     <<EOT
+  #       set -eux &&
+  #       echo "AWS_SECRET_ACCESS_KEY=${google_storage_hmac_key.key.secret}" | sudo tee /root/.gcp_secrets &&
+  #       echo "AWS_ACCESS_KEY_ID=${google_storage_hmac_key.key.access_id}" | sudo tee -a /root/.gcp_secrets &&
+  #       sudo chmod 0400 /root/.gcp_secrets
+  #     EOT
+  #   ]
+  # }
+
+  provisioner "remote-exec" {
+    inline = [
+      <<EOT
+        set -eux &&
+        mkdir -p /home/ubuntu/turbo-cache &&
+        cd /home/ubuntu/turbo-cache &&
+        tar xvf /tmp/file.tar.gz &&
+        . ~/.cargo/env &&
+        cargo build --release --bin cas &&
+        sudo ln -s /home/ubuntu/turbo-cache/target/release/cas /usr/local/bin/turbo-cache &&
+        `` &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/scheduler.json /root/scheduler.json &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/cas.json /root/cas.json &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/worker.json /root/worker.json &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/start_turbo_cache.sh /root/start_turbo_cache.sh &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/entrypoint.sh /root/entrypoint.sh &&
+        sudo chmod +x /root/start_turbo_cache.sh &&
+        sudo mv /home/ubuntu/turbo-cache/deployment-examples/terraform_gcp/scripts/turbo-cache.service /etc/systemd/system/turbo-cache.service &&
+        sudo systemctl enable turbo-cache &&
+        sync
+      EOT
+    ]
+  }
+
+  provisioner "remote-exec" {
+    inline = [
+      <<EOT
+        set -eux &&
+        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list &&
+        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get update &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get install google-cloud-cli
+      EOT
+    ]
+  }
+
+# sudo apt-get purge -y nvidia-docker2
+# curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \
+#     sudo apt-key add -
+# distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
+# curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
+#     sudo tee /etc/apt/sources.list.d/nvidia-docker.list
+# sudo apt-get update
+# # Install nvidia-docker2 and reload the Docker daemon configuration
+# sudo apt-get install -y nvidia-docker2
+
+  provisioner "remote-exec" {
+    inline = [
+      <<EOT
+        set -eux &&
+        curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - &&
+        curl -s -L https://nvidia.github.io/nvidia-docker/$(. /etc/os-release;echo $ID$VERSION_ID)/nvidia-docker.list |
+            sudo tee /etc/apt/sources.list.d/nvidia-docker.list &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get update &&
+        `# Install nvidia-docker2 and reload the Docker daemon configuration` &&
+        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-docker2
+      EOT
+    ]
+  }
+
+  # provisioner "remote-exec" {
+  #   inline = [
+  #     <<EOT
+  #       set -eux &&
+  #       mkdir -p /tmp/turbo-cache &&
+  #       cd /tmp/turbo-cache &&
+  #       tar xvf /tmp/file.tar.gz &&
+  #       sudo DEBIAN_FRONTEND=noninteractive apt-get install -y docker.io &&
+  #       cd /tmp/turbo-cache &&
+  #       . /etc/lsb-release &&
+  #       sudo docker build --build-arg OS_VERSION=$DISTRIB_RELEASE -t turbo-cache-runner -f ./deployment-examples/docker-compose/Dockerfile . &&
+  #       container_id=$(sudo docker create turbo-cache-runner) &&
+  #       `# Copy the compiled binary out of the container` &&
+  #       sudo docker cp $container_id:/usr/local/bin/turbo-cache /usr/local/bin/turbo-cache &&
+  #       `# Stop and remove all containers, as they are not needed` &&
+  #       sudo docker rm $(sudo docker ps -a -q) &&
+  #       sudo docker rmi $(sudo docker images -q) &&
+  #       `` &&
+  #       sudo mv /tmp/turbo-cache/deployment-examples/terraform_gcp/scripts/scheduler.json /root/scheduler.json &&
+  #       sudo mv /tmp/turbo-cache/deployment-examples/terraform_gcp/scripts/cas.json /root/cas.json &&
+  #       sudo mv /tmp/turbo-cache/deployment-examples/terraform_gcp/scripts/worker.json /root/worker.json &&
+  #       sudo mv /tmp/turbo-cache/deployment-examples/terraform_gcp/scripts/start_turbo_cache.sh /root/start_turbo_cache.sh &&
+  #       sudo chmod +x /root/start_turbo_cache.sh &&
+  #       sudo mv /tmp/turbo-cache/deployment-examples/terraform_gcp/scripts/turbo-cache.service /etc/systemd/system/turbo-cache.service &&
+  #       sudo systemctl enable turbo-cache &&
+  #       sync
+  #     EOT
+  #   ]
+  # }
+}
+
+resource "google_compute_snapshot" "base_snapshot" {
+  name              = "turbo-cache-base-snapshot"
+  source_disk       = google_compute_instance.build_instance.boot_disk.0.source
+  zone              = var.gcp_zone
+  storage_locations = [var.gcp_region]
+}
+
+resource "google_compute_image" "base_image" {
+  name              = "turbo-cache-base-image"
+  source_snapshot   = google_compute_snapshot.base_snapshot.self_link
+  storage_locations = [var.gcp_region]
+}
diff --git a/deployment-examples/terraform_gcp/dns.tf b/deployment-examples/terraform_gcp/dns.tf
new file mode 100644
index 0000000..ad0e961
--- /dev/null
+++ b/deployment-examples/terraform_gcp/dns.tf
@@ -0,0 +1,3 @@
+data "google_dns_managed_zone" "dns_zone" {
+  name = "turbo-cache-dns-zone"
+}
diff --git a/deployment-examples/terraform_gcp/instance_cas.tf b/deployment-examples/terraform_gcp/instance_cas.tf
new file mode 100644
index 0000000..dc6407e
--- /dev/null
+++ b/deployment-examples/terraform_gcp/instance_cas.tf
@@ -0,0 +1,211 @@
+resource "google_compute_autoscaler" "cas_autoscaler" {
+  name = "turbo-cache-cas-autoscaler"
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    # cpu_utilization {
+    #   predictive_method = "NONE"
+    #   target            = "0.6"
+    # }
+
+    max_replicas = "30"
+    min_replicas = "1"
+    mode         = "OFF"
+  }
+
+  target = google_compute_instance_group_manager.cas_instance_group.self_link
+}
+
+resource "google_compute_instance_group_manager" "cas_instance_group" {
+  base_instance_name = "turbo-cache-cas-group"
+  name               = "turbo-cache-cas-instance-group"
+  # TODO(allada) revisit this.
+  # zone               = "us-central1-c"
+
+  named_port {
+    name = "cas"
+    port = "50051"
+  }
+
+  # named_port {
+  #   name = "internal-cas"
+  #   port = "50061"
+  # }
+
+  target_size = "1"
+
+  version {
+    instance_template = google_compute_instance_template.cas_instance_template.self_link
+  }
+
+  auto_healing_policies {
+    health_check      = google_compute_health_check.cas_health_checker.self_link
+    initial_delay_sec = 300
+  }
+
+  wait_for_instances_status = "STABLE"
+}
+
+resource "google_compute_instance_template" "cas_instance_template" {
+  name = "turbo-cache-cas-instance-template"
+
+  machine_type   = "n2d-standard-8"
+  can_ip_forward = false
+
+  scheduling {
+    automatic_restart   = true
+    on_host_maintenance = "MIGRATE"
+  }
+
+  disk {
+    source_image = google_compute_image.base_image.self_link
+    auto_delete  = true
+    boot         = true
+  }
+
+  disk {
+    disk_type    = "local-ssd"
+    type         = "SCRATCH"
+    disk_size_gb = "375"
+  }
+
+  network_interface {
+    network = "default"
+
+    # Give it a public IP.
+    access_config {
+      network_tier = "PREMIUM"
+    }
+  }
+
+  tags = [
+    "turbo-cache-cas"
+  ]
+
+  metadata = {
+    turbo-cache-type = "cas"
+    turbo-cache-cas-bucket = google_storage_bucket.cas_s3_bucket.name
+    turbo-cache-ac-bucket = google_storage_bucket.cas_s3_bucket.name
+  }
+}
+
+resource "google_compute_backend_service" "cas_backend_service" {
+  name             = "turbo-cache-cas-backend-service"
+  affinity_cookie_ttl_sec = "0"
+
+  backend {
+    balancing_mode               = "UTILIZATION"
+    capacity_scaler              = "1"
+    group                        = google_compute_instance_group_manager.cas_instance_group.instance_group
+    max_connections              = "0"
+    max_connections_per_endpoint = "0"
+    max_connections_per_instance = "0"
+    max_rate                     = "0"
+    max_rate_per_endpoint        = "0"
+    max_rate_per_instance        = "0"
+    max_utilization              = "0.8"
+  }
+
+  connection_draining_timeout_sec = "300"
+  enable_cdn                      = "false"
+  health_checks                   = [
+    google_compute_health_check.cas_health_checker.self_link,
+  ]
+  load_balancing_scheme           = "EXTERNAL_MANAGED"
+  locality_lb_policy              = "ROUND_ROBIN"
+
+  log_config {
+    enable      = "false"
+  }
+
+  port_name        = "cas"
+  protocol         = "HTTP2"
+  session_affinity = "NONE"
+  timeout_sec      = "30"
+}
+
+resource "google_compute_health_check" "cas_health_checker" {
+  name                = "turbo-cache-cas-health-checker"
+  check_interval_sec = "5"
+  healthy_threshold  = "2"
+
+  http2_health_check {
+    port         = "50051"
+    request_path = "/status"
+    response     = "Ok"
+  }
+
+  log_config {
+    enable = "false"
+  }
+
+  timeout_sec         = "5"
+  unhealthy_threshold = "2"
+}
+
+resource "google_compute_url_map" "cas_url_map" {
+  name            = "turbo-cache-cas-url-map"
+  default_service = google_compute_backend_service.cas_backend_service.id
+}
+
+resource "google_compute_target_https_proxy" "cas_http_proxy" {
+  name     = "turbo-cache-cas-http-proxy"
+  url_map  = google_compute_url_map.cas_url_map.id
+  ssl_certificates = [google_compute_managed_ssl_certificate.ssl_certificate.id]
+
+  proxy_bind       = "false"
+  quic_override    = "NONE"
+
+  ssl_policy       = google_compute_ssl_policy.lb_ssl_policy.self_link
+}
+
+resource "google_compute_global_forwarding_rule" "cas_forwarding_rule" {
+  name                  = "turbo-cache-cas-forwarding-rule"
+  ip_protocol           = "TCP"
+  ip_version            = "IPV4"
+  load_balancing_scheme = "EXTERNAL_MANAGED"
+  port_range            = "443-443"
+  target                = google_compute_target_https_proxy.cas_http_proxy.self_link
+}
+
+resource "google_dns_record_set" "cas_dns_record_set" {
+  name = "cas.${data.google_dns_managed_zone.dns_zone.dns_name}"
+  type = "A"
+  ttl  = 300
+
+  managed_zone = data.google_dns_managed_zone.dns_zone.name
+
+  rrdatas = [
+    google_compute_global_forwarding_rule.cas_forwarding_rule.ip_address
+  ]
+}
+
+resource "google_dns_record_set" "cas_internal_dns_record_set" {
+  name = "internal.cas.${data.google_dns_managed_zone.dns_zone.dns_name}"
+  type = "A"
+  ttl  = 300
+
+  managed_zone = data.google_dns_managed_zone.dns_zone.name
+
+  rrdatas = [
+    google_compute_global_forwarding_rule.cas_forwarding_rule.ip_address
+  ]
+}
+
+resource "google_compute_firewall" "cas_firewall" {
+  name        = "turbo-cache-cas-firewall"
+  network     = "default"
+
+  allow {
+    protocol  = "tcp"
+    ports     = ["50051"]
+  }
+
+  # All traffic from the internet.
+  source_ranges = ["0.0.0.0/0"]
+
+  # Only allow to the CAS instances.
+  target_tags = ["turbo-cache-cas"]
+}
+
+# RUST_LOG=debug AWS_ACCESS_KEY_ID=GOOGQTQ4JGUAXC7Y6LLFUXIB AWS_SECRET_ACCESS_KEY=GRfe62iaMAKGK9DqhyXX+4D1MGhBm9uxwz0hG+37 AWS_ENDPOINT_URL=https://storage.googleapis.com /root/start_turbo_cache.sh
\ No newline at end of file
diff --git a/deployment-examples/terraform_gcp/instance_scheduler.tf b/deployment-examples/terraform_gcp/instance_scheduler.tf
new file mode 100644
index 0000000..cc1764c
--- /dev/null
+++ b/deployment-examples/terraform_gcp/instance_scheduler.tf
@@ -0,0 +1,218 @@
+resource "google_compute_autoscaler" "scheduler_autoscaler" {
+  name = "turbo-cache-scheduler-autoscaler"
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    # cpu_utilization {
+    #   predictive_method = "NONE"
+    #   target            = "0.6"
+    # }
+
+    max_replicas = "30"
+    min_replicas = "0"
+    mode         = "OFF"
+  }
+
+  target = google_compute_instance_group_manager.scheduler_instance_group.self_link
+}
+
+resource "google_compute_instance_group_manager" "scheduler_instance_group" {
+  base_instance_name = "turbo-cache-scheduler-group"
+  name               = "turbo-cache-scheduler-instance-group"
+
+  named_port {
+    name = "scheduler"
+    port = "50051"
+  }
+
+  named_port {
+    name = "internal-scheduler"
+    port = "50061"
+  }
+
+  target_size = "1"
+
+  version {
+    instance_template = google_compute_instance_template.scheduler_instance_template.self_link
+  }
+
+  auto_healing_policies {
+    health_check      = google_compute_health_check.scheduler_health_checker.self_link
+    initial_delay_sec = 300
+  }
+
+  wait_for_instances_status = "STABLE"
+}
+
+resource "google_compute_instance_template" "scheduler_instance_template" {
+  name = "turbo-cache-scheduler-instance-template"
+
+  machine_type   = "e2-standard-8"
+  can_ip_forward = false
+
+  scheduling {
+    automatic_restart   = true
+    on_host_maintenance = "MIGRATE"
+  }
+
+  disk {
+    source_image = google_compute_image.base_image.self_link
+    auto_delete  = true
+    boot         = true
+  }
+
+  network_interface {
+    network = "default"
+
+    # Give it a public IP.
+    access_config {
+      network_tier = "PREMIUM"
+    }
+  }
+
+  tags = [
+    "turbo-cache-scheduler"
+  ]
+
+  metadata = {
+    turbo-cache-type = "scheduler"
+    turbo-cache-cas-bucket = google_storage_bucket.cas_s3_bucket.name
+    turbo-cache-ac-bucket = google_storage_bucket.cas_s3_bucket.name
+    turbo-cache-internal-cas-endpoint = "internal.cas.${trim(data.google_dns_managed_zone.dns_zone.dns_name, ".")}"
+  }
+}
+
+resource "google_compute_backend_service" "scheduler_backend_service" {
+  name             = "turbo-cache-scheduler-backend-service"
+  affinity_cookie_ttl_sec = "0"
+
+  backend {
+    balancing_mode               = "UTILIZATION"
+    capacity_scaler              = "1"
+    group                        = google_compute_instance_group_manager.scheduler_instance_group.instance_group
+    max_connections              = "0"
+    max_connections_per_endpoint = "0"
+    max_connections_per_instance = "0"
+    max_rate                     = "0"
+    max_rate_per_endpoint        = "0"
+    max_rate_per_instance        = "0"
+    max_utilization              = "0.8"
+  }
+
+  connection_draining_timeout_sec = "300"
+  enable_cdn                      = "false"
+  health_checks                   = [
+    google_compute_health_check.scheduler_health_checker.self_link,
+  ]
+  load_balancing_scheme           = "EXTERNAL_MANAGED"
+  locality_lb_policy              = "ROUND_ROBIN"
+
+  log_config {
+    enable      = "false"
+  }
+
+  port_name        = "scheduler"
+  protocol         = "HTTP2"
+  session_affinity = "NONE"
+  timeout_sec      = "30"
+}
+
+resource "google_compute_health_check" "scheduler_health_checker" {
+  name                = "turbo-cache-scheduler-health-checker"
+  check_interval_sec = "5"
+  healthy_threshold  = "2"
+
+  http2_health_check {
+    port         = "50051"
+    request_path = "/status"
+    response     = "Ok"
+  }
+
+  log_config {
+    enable = "false"
+  }
+
+  timeout_sec         = "5"
+  unhealthy_threshold = "2"
+}
+
+resource "google_compute_url_map" "scheduler_url_map" {
+  name            = "turbo-cache-scheduler-url-map"
+  default_service = google_compute_backend_service.scheduler_backend_service.id
+}
+
+resource "google_compute_target_https_proxy" "scheduler_http_proxy" {
+  name     = "turbo-cache-scheduler-http-proxy"
+  url_map  = google_compute_url_map.scheduler_url_map.id
+  ssl_certificates = [google_compute_managed_ssl_certificate.ssl_certificate.id]
+
+  proxy_bind       = "false"
+  quic_override    = "NONE"
+
+  ssl_policy       = google_compute_ssl_policy.lb_ssl_policy.self_link
+}
+
+resource "google_compute_global_forwarding_rule" "scheduler_forwarding_rule" {
+  name                  = "turbo-cache-scheduler-forwarding-rule"
+  ip_protocol           = "TCP"
+  ip_version            = "IPV4"
+  load_balancing_scheme = "EXTERNAL_MANAGED"
+  port_range            = "443-443"
+  target                = google_compute_target_https_proxy.scheduler_http_proxy.self_link
+}
+
+resource "google_dns_record_set" "scheduler_dns_record_set" {
+  name = "scheduler.${data.google_dns_managed_zone.dns_zone.dns_name}"
+  type = "A"
+  ttl  = 300
+
+  managed_zone = data.google_dns_managed_zone.dns_zone.name
+
+  rrdatas = [
+    google_compute_global_forwarding_rule.scheduler_forwarding_rule.ip_address
+  ]
+}
+
+resource "google_compute_firewall" "scheduler_firewall" {
+  name        = "turbo-cache-scheduler-firewall"
+  network     = "default"
+
+  allow {
+    protocol  = "tcp"
+    ports     = ["50051"]
+  }
+
+  # All traffic from the internet.
+  source_ranges = ["0.0.0.0/0"]
+
+  # Only allow to the Scheduler instances.
+  target_tags = ["turbo-cache-scheduler"]
+}
+
+resource "google_dns_record_set" "scheduler_internal_dns_record_set" {
+  name = "internal.scheduler.${data.google_dns_managed_zone.dns_zone.dns_name}"
+  type = "A"
+  ttl  = 300
+
+  managed_zone = data.google_dns_managed_zone.dns_zone.name
+
+  rrdatas = [
+    google_compute_global_forwarding_rule.scheduler_forwarding_rule.ip_address
+  ]
+}
+
+resource "google_compute_firewall" "scheduler_internal_firewall" {
+  name        = "turbo-cache-scheduler-internal-firewall"
+  network     = "default"
+
+  allow {
+    protocol  = "tcp"
+    ports     = ["50061"]
+  }
+
+  # All traffic from the internet.
+  source_tags = ["turbo-cache-worker"]
+
+  # Only allow to the Scheduler instances.
+  target_tags = ["turbo-cache-scheduler"]
+}
diff --git a/deployment-examples/terraform_gcp/instance_x86_cpu_worker.tf b/deployment-examples/terraform_gcp/instance_x86_cpu_worker.tf
new file mode 100644
index 0000000..66c5391
--- /dev/null
+++ b/deployment-examples/terraform_gcp/instance_x86_cpu_worker.tf
@@ -0,0 +1,165 @@
+resource "google_compute_region_autoscaler" "x86_cpu_worker_autoscaler" {
+  name = "turbo-cache-x86-cpu-worker-autoscaler"
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    # cpu_utilization {
+    #   predictive_method = "NONE"
+    #   target            = "0.6"
+    # }
+
+    max_replicas = "30"
+    min_replicas = "1"
+    mode         = "OFF"
+  }
+
+  target = google_compute_region_instance_group_manager.x86_cpu_worker_instance_group.id
+}
+
+resource "google_compute_region_instance_group_manager" "x86_cpu_worker_instance_group" {
+  base_instance_name = "turbo-cache-x86-cpu-worker-group"
+  name               = "turbo-cache-x86-cpu-worker-instance-group"
+  target_size        = "1"
+
+  version {
+    instance_template = google_compute_region_instance_template.x86_cpu_worker_instance_template.id
+  }
+
+  auto_healing_policies {
+    health_check      = google_compute_health_check.x86_cpu_worker_health_checker.self_link
+    initial_delay_sec = 300
+  }
+
+  wait_for_instances_status = "STABLE"
+  depends_on = [
+    google_compute_region_instance_template.x86_cpu_worker_instance_template
+  ]
+}
+
+resource "google_compute_health_check" "x86_cpu_worker_health_checker" {
+  name                = "turbo-cache-x86-cpu-worker-health-checker"
+  check_interval_sec = "5"
+  healthy_threshold  = "2"
+
+  http_health_check {
+    port         = "50061"
+    request_path = "/status"
+    response     = "Ok"
+  }
+
+  log_config {
+    enable = "false"
+  }
+
+  timeout_sec         = "5"
+  unhealthy_threshold = "2"
+}
+
+resource "google_compute_region_instance_template" "x86_cpu_worker_instance_template" {
+  name = "turbo-cache-x86-cpu-worker-instance-template"
+
+  # machine_type   = "e2-standard-8"
+  machine_type   = "n2d-standard-8"
+  can_ip_forward = false
+
+  scheduling {
+    automatic_restart   = false
+    provisioning_model = "SPOT"
+    preemptible = true
+  }
+
+  service_account {
+    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
+    email  = data.google_service_account.x86_cpu_worker_service_account.email
+    scopes = ["cloud-platform"]
+  }
+
+  disk {
+    source_image = google_compute_image.base_image.id
+    auto_delete  = true
+    boot         = true
+  }
+
+  disk {
+    disk_type    = "local-ssd"
+    type         = "SCRATCH"
+    disk_size_gb = "375"
+  }
+
+  network_interface {
+    network = "default"
+
+    # Give it a public IP.
+    access_config {
+      network_tier = "PREMIUM"
+    }
+  }
+
+  # network_interface {
+  #   network = google_compute_network.internal_network.id
+  #   subnetwork = google_compute_subnetwork.internal_subnet.id
+  # }
+
+  tags = [
+    "turbo-cache-worker"
+  ]
+
+  metadata = {
+    turbo-cache-type = "worker"
+    turbo-cache-cas-bucket = google_storage_bucket.cas_s3_bucket.name
+    turbo-cache-ac-bucket = google_storage_bucket.cas_s3_bucket.name
+    turbo-cache-internal-scheduler-endpoint = "internal.scheduler.${trim(data.google_dns_managed_zone.dns_zone.dns_name, ".")}"
+    turbo-cache-internal-cas-endpoint = "internal.cas.${trim(data.google_dns_managed_zone.dns_zone.dns_name, ".")}"
+  }
+}
+
+data "google_service_account" "x86_cpu_worker_service_account" {
+  account_id   = "turbo-cache-x86-worker-sa"
+}
+
+# resource "google_service_account" "x86_cpu_worker_service_account" {
+#   account_id   = "turbo-cache-x86-worker-sa"
+#   lifecycle {
+#     prevent_destroy = true
+#   }
+# }
+
+resource "google_project_iam_member" "x86_cpu_worker_artifactory_iam_member" {
+  member  = "serviceAccount:${data.google_service_account.x86_cpu_worker_service_account.email}"
+  project = var.gcp_project_id
+  role    = "roles/artifactregistry.reader"
+}
+
+
+# resource "google_project_iam_custom_role" "worker_role" {
+#   role_id     = "turboCacheWorkerRole"
+#   title       = "Role for Turbo Cache Worker"
+#   description = "General permissions given to the worker instances"
+#   permissions = [
+#     "compute.snapshots.list",
+#   ]
+# }
+
+# resource "google_project_iam_member" "worker_iam_member" {
+#   member  = "serviceAccount:${data.google_service_account.x86_cpu_worker_service_account.email}"
+#   project = var.gcp_project_id
+#   role    = google_project_iam_custom_role.worker_role.name
+# }
+
+
+# resource "google_storage_bucket_iam_member" "docker_cache" {
+#   bucket = google_storage_bucket.docker_cache_bucket.name
+#   role = "roles/storage.objectUser"
+#   member  = "serviceAccount:${data.google_service_account.x86_cpu_worker_service_account.email}"
+# }
+
+
+# sudo apt-get install docker.io -y
+# gcloud auth configure-docker --quiet
+# gcloud auth print-access-token | sudo docker login -u oauth2accesstoken --password-stdin https://gcr.io
+# sudo docker pull gcr.io/voltaic-day-213421/devel:f8f17c2f686c9c8280c3d5323de2b496056fe26395ae80f8e3544b7854e8e910
+
+# curl -s "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" -H "Metadata-Flavor: Google"
+
+# gcloud auth print-access-token | sudo docker login -u oauth2accesstoken --password-stdin https://gcr.io
+# sudo docker pull gcr.io/voltaic-day-213421/devel:f8f17c2f686c9c8280c3d5323de2b496056fe26395ae80f8e3544b7854e8e910
\ No newline at end of file
diff --git a/deployment-examples/terraform_gcp/main.tf b/deployment-examples/terraform_gcp/main.tf
new file mode 100644
index 0000000..783da85
--- /dev/null
+++ b/deployment-examples/terraform_gcp/main.tf
@@ -0,0 +1,76 @@
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+terraform {
+  required_providers {
+    google = {
+      source  = "hashicorp/google"
+      version = "4.84.0"
+    }
+  }
+  required_version = ">= 0.14.9"
+}
+
+provider "google" {
+  project = var.gcp_project_id
+  region  = var.gcp_region
+  zone    = var.gcp_zone
+}
+
+data "google_compute_default_service_account" "default" {
+}
+
+# # Enable Cloud Run API
+# resource "google_project_service" "run" {
+#   service            = "run.googleapis.com"
+#   disable_on_destroy = false
+# }
+
+# # Enable Eventarc API
+# resource "google_project_service" "eventarc" {
+#   service            = "eventarc.googleapis.com"
+#   disable_on_destroy = false
+# }
+
+# # Enable Pub/Sub API
+# resource "google_project_service" "pubsub" {
+#   service            = "pubsub.googleapis.com"
+#   disable_on_destroy = false
+# }
+
+# resource "google_project_service" "cloud_serviceusage" {
+#   project                    = var.gcp_project_id
+#   service                    = "compute.googleapis.com"
+#   disable_dependent_services = true
+#   disable_on_destroy = false
+# }
+
+# resource "google_project_service" "cloud_serviceusage" {
+#   project                    = var.gcp_project_id
+#   service                    = "dns.googleapis.com"
+#   disable_dependent_services = true
+#   disable_on_destroy = false
+# }
+
+# gcloud auth application-default login
+# https://console.cloud.google.com/marketplace/product/google/compute.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/dns.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/certificatemanager.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/secretmanager.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/cloudfunctions.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/run.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/cloudbuild.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/cloudscheduler.googleapis.com
+# https://console.cloud.google.com/marketplace/product/google/iam.googleapis.com
+# bazel build //...  --remote_cache=grpcs://cas.thirdwave.allada.com --remote_executor=grpcs://scheduler.thirdwave.allada.com  --remote_instance_name=main --remote_default_exec_properties=cpu_count=1 -j 4 --remote_timeout=600
\ No newline at end of file
diff --git a/deployment-examples/terraform_gcp/s3.tf b/deployment-examples/terraform_gcp/s3.tf
new file mode 100644
index 0000000..17602e9
--- /dev/null
+++ b/deployment-examples/terraform_gcp/s3.tf
@@ -0,0 +1,46 @@
+resource "google_storage_bucket" "cas_s3_bucket" {
+  name        = "turbo-cache-cas-bucket-${var.gcp_project_id}"
+  location      = var.gcp_region
+  # TODO(allada) Remove this.
+  force_destroy = true
+
+  uniform_bucket_level_access = true
+
+  public_access_prevention = "enforced"
+  storage_class = "STANDARD"
+
+  versioning {
+    enabled = false
+  }
+}
+
+resource "google_storage_hmac_key" "key" {
+  service_account_email = data.google_compute_default_service_account.default.email
+}
+
+resource "google_storage_bucket" "cf_bucket" {
+  name                        = "turbo-cache-cf-bucket-${var.gcp_project_id}"
+  location                    = "US"
+  force_destroy = true
+
+  uniform_bucket_level_access = true
+
+  public_access_prevention = "enforced"
+  storage_class = "STANDARD"
+
+  versioning {
+    enabled = false
+  }
+}
+
+data "archive_file" "cf_zip_file" {
+  type        = "zip"
+  output_path = "${path.module}/.terraform-turbo-cache-builder/cf_files.zip"
+  source_dir = "${path.module}/scripts/cloud_functions"
+}
+
+resource "google_storage_bucket_object" "cf_zip_file" {
+  name   = "cf_files.zip"
+  bucket = google_storage_bucket.cf_bucket.name
+  source = data.archive_file.cf_zip_file.output_path
+}
diff --git a/deployment-examples/terraform_gcp/scripts/cas.json b/deployment-examples/terraform_gcp/scripts/cas.json
new file mode 100644
index 0000000..2cd7e0e
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/cas.json
@@ -0,0 +1,126 @@
+{
+  "stores": {
+    "AC_STORE": {
+      "fast_slow": {
+        "fast": {
+          "memory": {
+            "eviction_policy": {
+              "max_bytes": "${TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT:-100000000}"
+            }
+          }
+        },
+        "slow": {
+          "filesystem": {
+            "content_path": "/mnt/data/ac/content",
+            "temp_path": "/mnt/data/ac/temp",
+            "eviction_policy": {
+              "max_bytes": "${TURBO_CACHE_AC_FS_CONTENT_LIMIT:-100000000}"
+            }
+          }
+        }
+      }
+    },
+    "CAS_FS_STORE": {
+      "filesystem": {
+        "content_path": "/mnt/data/cas/content",
+        "temp_path": "/mnt/data/cas/temp",
+        "eviction_policy": {
+          "max_bytes": "${TURBO_CACHE_CAS_FS_CONTENT_LIMIT:-100000000}"
+        }
+      }
+    },
+    "CAS_STORE": {
+      "fast_slow": {
+        "fast": {
+          "size_partitioning": {
+            "size": "2097152", // 2mb.
+            "lower_store": {
+              "memory": {
+                "eviction_policy": {
+                  "max_bytes": "${TURBO_CACHE_CAS_MEMORY_CONTENT_LIMIT:-100000000}"
+                }
+              }
+            },
+            "upper_store": {
+              "ref_store": {
+                "name": "CAS_FS_STORE"
+              }
+            }
+          }
+        },
+        "slow": {
+          "ref_store": {
+            "name": "CAS_FS_STORE"
+          }
+        }
+      }
+    }
+  },
+  "schedulers": {
+    "MAIN_SCHEDULER": {
+      "simple": {
+        "supported_platform_properties": {
+          "cpu_count": "Minimum"
+        }
+      }
+    }
+  },
+  "servers": [{
+    "listen_address": "0.0.0.0:50051",
+    "tls": {
+      "cert_file": "${TURBO_CACHE_CERT_FILE:-}",
+      "key_file": "${TURBO_CACHE_KEY_FILE:-}"
+    },
+    "services": {
+      "cas": {
+        "main": {
+          "cas_store": "CAS_STORE"
+        }
+      },
+      "ac": {
+        "main": {
+          "ac_store": "AC_STORE"
+        }
+      },
+      "capabilities": {
+        "main": {}
+      },
+      "bytestream": {
+        "cas_stores": {
+          "main": "CAS_STORE"
+        },
+        // According to https://github.com/grpc/grpc.github.io/issues/371 16KiB - 64KiB is optimal.
+        "max_bytes_per_stream": 64000 // 64kb.
+      }
+    }
+  }, {
+    // Non-public apis. We re-export the CAS services so we don't need to go through
+    // an external load balancer.
+    "listen_address": "0.0.0.0:50061",
+    "services": {
+      "prometheus": {
+        "path": "/metrics"
+      },
+      "cas": {
+        "main": {
+          "cas_store": "CAS_STORE"
+        }
+      },
+      "ac": {
+        "main": {
+          "ac_store": "AC_STORE"
+        }
+      },
+      "capabilities": {
+        "main": {}
+      },
+      "bytestream": {
+        "cas_stores": {
+          "main": "CAS_STORE"
+        },
+        // According to https://github.com/grpc/grpc.github.io/issues/371 16KiB - 64KiB is optimal.
+        "max_bytes_per_stream": 64000 // 64kb.
+      }
+    }
+  }]
+}
diff --git a/deployment-examples/terraform_gcp/scripts/cloud_functions/index.js b/deployment-examples/terraform_gcp/scripts/cloud_functions/index.js
new file mode 100644
index 0000000..f1435f4
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/cloud_functions/index.js
@@ -0,0 +1,119 @@
+// Copyright 2023 The Turbo Cache Authors. All rights reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+// This script is designed to be run as a Google Cloud Function. It will
+// update the DNS records for the private ip of the scheduler and CAS
+// instances. This is used because the scheduler and CAS instances might
+// be replaced under rare circumstances, and we want to make sure that
+// the DNS records are updated to point to the new instances.
+
+const functions = require('@google-cloud/functions-framework');
+const compute = require('@google-cloud/compute');
+const { DNS } = require('@google-cloud/dns');
+
+const projectId = process.env.GCP_PROJECT || process.env.GCLOUD_PROJECT;
+const dnsZone = process.env.DNS_ZONE;
+const schedulerInstancePrefix = process.env.SCHEDULER_INSTANCE_PREFIX;
+const casInstancePrefix = process.env.CAS_INSTANCE_PREFIX;
+
+async function getRecordIfExists(zone, name) {
+  const records = await zone.getRecords({
+    name,
+    type: 'A'
+  });
+  if (!records.length || !records[0].length) {
+    return null;
+  }
+  return records[0][0];
+}
+
+async function findCasAndSchedulerInstance() {
+  const instancesClient = new compute.InstancesClient({ projectId });
+
+  const aggListRequest = instancesClient.aggregatedListAsync({
+    project: projectId,
+    maxResults: 5,
+    filter: `status=RUNNING AND (name=${schedulerInstancePrefix}* OR name=${casInstancePrefix}*)`,
+  });
+
+  let schedulerInstance = null;
+  let casInstance = null;
+
+  for await (const [_zone, instancesObject] of aggListRequest) {
+    if (!instancesObject.instances || !instancesObject.instances.length) {
+      continue;
+    }
+    for (const instance of instancesObject.instances) {
+      if (instance.name.startsWith(schedulerInstancePrefix)) {
+        schedulerInstance = instance;
+      } else if (instance.name.startsWith(casInstancePrefix)) {
+        casInstance = instance;
+      }
+    }
+  }
+  return { schedulerInstance, casInstance };
+}
+
+async function updateIPs(_cloudEvent) {
+  const { schedulerInstance, casInstance } = await findCasAndSchedulerInstance();
+
+  const dns = new DNS({ projectId });
+  const zone = dns.zone(dnsZone);
+  const dnsName = (await zone.get())[1].dnsName;
+  const addRecords = [];
+  const deleteRecords = [];
+
+  if (schedulerInstance) {
+    const internalSchedulerIp = schedulerInstance.networkInterfaces[0].networkIP;
+    const existingInternalSchedulerRecord = await getRecordIfExists(zone, `internal.scheduler.${dnsName}`);
+    if (!existingInternalSchedulerRecord || existingInternalSchedulerRecord.data[0] !== internalSchedulerIp) {
+      if (existingInternalSchedulerRecord) {
+        deleteRecords.push(existingInternalSchedulerRecord);
+      }
+      addRecords.push(zone.record("A", {
+        name: `internal.scheduler.${dnsName}`,
+        ttl: 300,
+        data: internalSchedulerIp,
+      }));
+    }
+  }
+
+  if (casInstance) {
+    const internalCasIp = casInstance.networkInterfaces[0].networkIP;
+    const existingInternalCasRecord = await getRecordIfExists(zone, `internal.cas.${dnsName}`);
+    if (!existingInternalCasRecord || existingInternalCasRecord.data[0] !== internalCasIp) {
+      if (existingInternalCasRecord) {
+        deleteRecords.push(existingInternalCasRecord);
+      }
+      addRecords.push(zone.record("A", {
+        name: `internal.cas.${dnsName}`,
+        ttl: 300,
+        data: internalCasIp,
+      }));
+    }
+  }
+
+  if (!addRecords.length) {
+    // Nothing to change.
+    console.log('nothing to do');
+    return;
+  }
+
+  const result = await zone.createChange({ add: addRecords, delete: deleteRecords });
+
+  const change = result[0];
+  console.log("Changes", { add: addRecords, delete: deleteRecords });
+}
+
+functions.cloudEvent('updateIPs', updateIPs);
diff --git a/deployment-examples/terraform_gcp/scripts/cloud_functions/package.json b/deployment-examples/terraform_gcp/scripts/cloud_functions/package.json
new file mode 100644
index 0000000..3c9f7d0
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/cloud_functions/package.json
@@ -0,0 +1,8 @@
+{
+  "main": "index.js",
+  "dependencies": {
+    "@google-cloud/compute": "^4.0.1",
+    "@google-cloud/dns": "^4.0.0",
+    "@google-cloud/functions-framework": "^3.0.0"
+  }
+}
diff --git a/deployment-examples/terraform_gcp/scripts/cloud_functions/yarn.lock b/deployment-examples/terraform_gcp/scripts/cloud_functions/yarn.lock
new file mode 100644
index 0000000..589c56d
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/cloud_functions/yarn.lock
@@ -0,0 +1,1551 @@
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
+
+"@babel/code-frame@^7.0.0":
+  version "7.22.13"
+  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.22.13.tgz#e3c1c099402598483b7a8c46a721d1038803755e"
+  integrity sha512-XktuhWlJ5g+3TJXc5upd9Ks1HutSArik6jf2eAjYFyIOf4ej3RN+184cZbzDvbPnuTJIUhPKKJE3cIsYTiAT3w==
+  dependencies:
+    "@babel/highlight" "^7.22.13"
+    chalk "^2.4.2"
+
+"@babel/helper-validator-identifier@^7.22.20":
+  version "7.22.20"
+  resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.20.tgz#c4ae002c61d2879e724581d96665583dbc1dc0e0"
+  integrity sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==
+
+"@babel/highlight@^7.22.13":
+  version "7.22.20"
+  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.22.20.tgz#4ca92b71d80554b01427815e06f2df965b9c1f54"
+  integrity sha512-dkdMCN3py0+ksCgYmGG8jKeGA/8Tk+gJwSYYlFGxG5lmhfKNoAy004YpLxpS1W2J8m/EK2Ew+yOs9pVRwO89mg==
+  dependencies:
+    "@babel/helper-validator-identifier" "^7.22.20"
+    chalk "^2.4.2"
+    js-tokens "^4.0.0"
+
+"@google-cloud/common@^5.0.0":
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/common/-/common-5.0.0.tgz#578246e0af02d68aa94aefb03d737bca37554dd0"
+  integrity sha512-IsbTVr7Ag+04GMT87X738vDs85QU1rMvaesm2wEQrtTbZAR92tGmUQ8/D/kdnYgAi98Q4zmfhF+T8Xs/Lw4zAA==
+  dependencies:
+    "@google-cloud/projectify" "^4.0.0"
+    "@google-cloud/promisify" "^4.0.0"
+    arrify "^2.0.1"
+    duplexify "^4.1.1"
+    ent "^2.2.0"
+    extend "^3.0.2"
+    google-auth-library "^9.0.0"
+    retry-request "^6.0.0"
+    teeny-request "^9.0.0"
+
+"@google-cloud/compute@^4.0.1":
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/@google-cloud/compute/-/compute-4.0.1.tgz#d2e3ae3955feb87002a61c9053dd827e69623faf"
+  integrity sha512-9/kzXFNTmEh8UqNdt8G5NdtfIyAfVYG+7yagk/rh2mh/XFynDGW4DXIYvrWIcMns8HSZxrUgNyNDPva+BUp14w==
+  dependencies:
+    google-gax "^4.0.3"
+
+"@google-cloud/dns@^4.0.0":
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/dns/-/dns-4.0.0.tgz#df3dcf613bfc98c444c3a893f5485fe1cb1859bc"
+  integrity sha512-cqwq8rNalRl7gxEVV2w2WITCq7tx4Sk4j+4qfS+ZIPn1yu0Xe4ZxyuthP1KB2IrZDSKZtzRtoYpAA8PrDVmRNw==
+  dependencies:
+    "@google-cloud/common" "^5.0.0"
+    "@google-cloud/paginator" "^5.0.0"
+    "@google-cloud/promisify" "^4.0.0"
+    arrify "^2.0.0"
+    dns-zonefile "0.2.10"
+    lodash.groupby "^4.6.0"
+    string-format-obj "^1.1.1"
+
+"@google-cloud/functions-framework@^3.0.0":
+  version "3.3.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/functions-framework/-/functions-framework-3.3.0.tgz#9e4563e36ad8644aee1bb5dceaa715bd1ca6759d"
+  integrity sha512-+4O1dX5VNRK1W1NyAia7zy5jLf88ytuz39/1kVUUaNiOf76YbMZKV0YjZwfk7uEwRrC6l2wynK1G+q8Gb5DeVw==
+  dependencies:
+    "@types/express" "4.17.17"
+    body-parser "^1.18.3"
+    cloudevents "^7.0.0"
+    express "^4.16.4"
+    minimist "^1.2.7"
+    on-finished "^2.3.0"
+    read-pkg-up "^7.0.1"
+    semver "^7.3.5"
+
+"@google-cloud/paginator@^5.0.0":
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/paginator/-/paginator-5.0.0.tgz#b8cc62f151685095d11467402cbf417c41bf14e6"
+  integrity sha512-87aeg6QQcEPxGCOthnpUjvw4xAZ57G7pL8FS0C4e/81fr3FjkpUpibf1s2v5XGyGhUVGF4Jfg7yEcxqn2iUw1w==
+  dependencies:
+    arrify "^2.0.0"
+    extend "^3.0.2"
+
+"@google-cloud/projectify@^4.0.0":
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/projectify/-/projectify-4.0.0.tgz#d600e0433daf51b88c1fa95ac7f02e38e80a07be"
+  integrity sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==
+
+"@google-cloud/promisify@^4.0.0":
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/promisify/-/promisify-4.0.0.tgz#a906e533ebdd0f754dca2509933334ce58b8c8b1"
+  integrity sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==
+
+"@grpc/grpc-js@~1.9.0":
+  version "1.9.5"
+  resolved "https://registry.yarnpkg.com/@grpc/grpc-js/-/grpc-js-1.9.5.tgz#22e283754b7b10d1ad26c3fb21849028dcaabc53"
+  integrity sha512-iouYNlPxRAwZ2XboDT+OfRKHuaKHiqjB5VFYZ0NFrHkbEF+AV3muIUY9olQsp8uxU4VvRCMiRk9ftzFDGb61aw==
+  dependencies:
+    "@grpc/proto-loader" "^0.7.8"
+    "@types/node" ">=12.12.47"
+
+"@grpc/proto-loader@^0.7.0", "@grpc/proto-loader@^0.7.8":
+  version "0.7.10"
+  resolved "https://registry.yarnpkg.com/@grpc/proto-loader/-/proto-loader-0.7.10.tgz#6bf26742b1b54d0a473067743da5d3189d06d720"
+  integrity sha512-CAqDfoaQ8ykFd9zqBDn4k6iWT9loLAlc2ETmDFS9JCD70gDcnA4L3AFEo2iV7KyAtAAHFW9ftq1Fz+Vsgq80RQ==
+  dependencies:
+    lodash.camelcase "^4.3.0"
+    long "^5.0.0"
+    protobufjs "^7.2.4"
+    yargs "^17.7.2"
+
+"@protobufjs/aspromise@^1.1.1", "@protobufjs/aspromise@^1.1.2":
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/@protobufjs/aspromise/-/aspromise-1.1.2.tgz#9b8b0cc663d669a7d8f6f5d0893a14d348f30fbf"
+  integrity sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==
+
+"@protobufjs/base64@^1.1.2":
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/@protobufjs/base64/-/base64-1.1.2.tgz#4c85730e59b9a1f1f349047dbf24296034bb2735"
+  integrity sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==
+
+"@protobufjs/codegen@^2.0.4":
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/@protobufjs/codegen/-/codegen-2.0.4.tgz#7ef37f0d010fb028ad1ad59722e506d9262815cb"
+  integrity sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==
+
+"@protobufjs/eventemitter@^1.1.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz#355cbc98bafad5978f9ed095f397621f1d066b70"
+  integrity sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==
+
+"@protobufjs/fetch@^1.1.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@protobufjs/fetch/-/fetch-1.1.0.tgz#ba99fb598614af65700c1619ff06d454b0d84c45"
+  integrity sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==
+  dependencies:
+    "@protobufjs/aspromise" "^1.1.1"
+    "@protobufjs/inquire" "^1.1.0"
+
+"@protobufjs/float@^1.0.2":
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/@protobufjs/float/-/float-1.0.2.tgz#5e9e1abdcb73fc0a7cb8b291df78c8cbd97b87d1"
+  integrity sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==
+
+"@protobufjs/inquire@^1.1.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@protobufjs/inquire/-/inquire-1.1.0.tgz#ff200e3e7cf2429e2dcafc1140828e8cc638f089"
+  integrity sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==
+
+"@protobufjs/path@^1.1.2":
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/@protobufjs/path/-/path-1.1.2.tgz#6cc2b20c5c9ad6ad0dccfd21ca7673d8d7fbf68d"
+  integrity sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==
+
+"@protobufjs/pool@^1.1.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@protobufjs/pool/-/pool-1.1.0.tgz#09fd15f2d6d3abfa9b65bc366506d6ad7846ff54"
+  integrity sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==
+
+"@protobufjs/utf8@^1.1.0":
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/@protobufjs/utf8/-/utf8-1.1.0.tgz#a777360b5b39a1a2e5106f8e858f2fd2d060c570"
+  integrity sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==
+
+"@tootallnate/once@2":
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/@tootallnate/once/-/once-2.0.0.tgz#f544a148d3ab35801c1f633a7441fd87c2e484bf"
+  integrity sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==
+
+"@types/body-parser@*":
+  version "1.19.3"
+  resolved "https://registry.yarnpkg.com/@types/body-parser/-/body-parser-1.19.3.tgz#fb558014374f7d9e56c8f34bab2042a3a07d25cd"
+  integrity sha512-oyl4jvAfTGX9Bt6Or4H9ni1Z447/tQuxnZsytsCaExKlmJiU8sFgnIBRzJUpKwB5eWn9HuBYlUlVA74q/yN0eQ==
+  dependencies:
+    "@types/connect" "*"
+    "@types/node" "*"
+
+"@types/connect@*":
+  version "3.4.36"
+  resolved "https://registry.yarnpkg.com/@types/connect/-/connect-3.4.36.tgz#e511558c15a39cb29bd5357eebb57bd1459cd1ab"
+  integrity sha512-P63Zd/JUGq+PdrM1lv0Wv5SBYeA2+CORvbrXbngriYY0jzLUWfQMQQxOhjONEz/wlHOAxOdY7CY65rgQdTjq2w==
+  dependencies:
+    "@types/node" "*"
+
+"@types/express-serve-static-core@^4.17.33":
+  version "4.17.37"
+  resolved "https://registry.yarnpkg.com/@types/express-serve-static-core/-/express-serve-static-core-4.17.37.tgz#7e4b7b59da9142138a2aaa7621f5abedce8c7320"
+  integrity sha512-ZohaCYTgGFcOP7u6aJOhY9uIZQgZ2vxC2yWoArY+FeDXlqeH66ZVBjgvg+RLVAS/DWNq4Ap9ZXu1+SUQiiWYMg==
+  dependencies:
+    "@types/node" "*"
+    "@types/qs" "*"
+    "@types/range-parser" "*"
+    "@types/send" "*"
+
+"@types/express@4.17.17":
+  version "4.17.17"
+  resolved "https://registry.yarnpkg.com/@types/express/-/express-4.17.17.tgz#01d5437f6ef9cfa8668e616e13c2f2ac9a491ae4"
+  integrity sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==
+  dependencies:
+    "@types/body-parser" "*"
+    "@types/express-serve-static-core" "^4.17.33"
+    "@types/qs" "*"
+    "@types/serve-static" "*"
+
+"@types/http-errors@*":
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/@types/http-errors/-/http-errors-2.0.2.tgz#a86e00bbde8950364f8e7846687259ffcd96e8c2"
+  integrity sha512-lPG6KlZs88gef6aD85z3HNkztpj7w2R7HmR3gygjfXCQmsLloWNARFkMuzKiiY8FGdh1XDpgBdrSf4aKDiA7Kg==
+
+"@types/long@^4.0.0":
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/@types/long/-/long-4.0.2.tgz#b74129719fc8d11c01868010082d483b7545591a"
+  integrity sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==
+
+"@types/mime@*":
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/@types/mime/-/mime-3.0.2.tgz#c1ae807f13d308ee7511a5b81c74f327028e66e8"
+  integrity sha512-Wj+fqpTLtTbG7c0tH47dkahefpLKEbB+xAZuLq7b4/IDHPl/n6VoXcyUQ2bypFlbSwvCr0y+bD4euTTqTJsPxQ==
+
+"@types/mime@^1":
+  version "1.3.3"
+  resolved "https://registry.yarnpkg.com/@types/mime/-/mime-1.3.3.tgz#bbe64987e0eb05de150c305005055c7ad784a9ce"
+  integrity sha512-Ys+/St+2VF4+xuY6+kDIXGxbNRO0mesVg0bbxEfB97Od1Vjpjx9KD1qxs64Gcb3CWPirk9Xe+PT4YiiHQ9T+eg==
+
+"@types/node@*", "@types/node@>=12.12.47", "@types/node@>=13.7.0":
+  version "20.8.2"
+  resolved "https://registry.yarnpkg.com/@types/node/-/node-20.8.2.tgz#d76fb80d87d0d8abfe334fc6d292e83e5524efc4"
+  integrity sha512-Vvycsc9FQdwhxE3y3DzeIxuEJbWGDsnrxvMADzTDF/lcdR9/K+AQIeAghTQsHtotg/q0j3WEOYS/jQgSdWue3w==
+
+"@types/normalize-package-data@^2.4.0":
+  version "2.4.2"
+  resolved "https://registry.yarnpkg.com/@types/normalize-package-data/-/normalize-package-data-2.4.2.tgz#9b0e3e8533fe5024ad32d6637eb9589988b6fdca"
+  integrity sha512-lqa4UEhhv/2sjjIQgjX8B+RBjj47eo0mzGasklVJ78UKGQY1r0VpB9XHDaZZO9qzEFDdy4MrXLuEaSmPrPSe/A==
+
+"@types/qs@*":
+  version "6.9.8"
+  resolved "https://registry.yarnpkg.com/@types/qs/-/qs-6.9.8.tgz#f2a7de3c107b89b441e071d5472e6b726b4adf45"
+  integrity sha512-u95svzDlTysU5xecFNTgfFG5RUWu1A9P0VzgpcIiGZA9iraHOdSzcxMxQ55DyeRaGCSxQi7LxXDI4rzq/MYfdg==
+
+"@types/range-parser@*":
+  version "1.2.5"
+  resolved "https://registry.yarnpkg.com/@types/range-parser/-/range-parser-1.2.5.tgz#38bd1733ae299620771bd414837ade2e57757498"
+  integrity sha512-xrO9OoVPqFuYyR/loIHjnbvvyRZREYKLjxV4+dY6v3FQR3stQ9ZxIGkaclF7YhI9hfjpuTbu14hZEy94qKLtOA==
+
+"@types/send@*":
+  version "0.17.2"
+  resolved "https://registry.yarnpkg.com/@types/send/-/send-0.17.2.tgz#af78a4495e3c2b79bfbdac3955fdd50e03cc98f2"
+  integrity sha512-aAG6yRf6r0wQ29bkS+x97BIs64ZLxeE/ARwyS6wrldMm3C1MdKwCcnnEwMC1slI8wuxJOpiUH9MioC0A0i+GJw==
+  dependencies:
+    "@types/mime" "^1"
+    "@types/node" "*"
+
+"@types/serve-static@*":
+  version "1.15.3"
+  resolved "https://registry.yarnpkg.com/@types/serve-static/-/serve-static-1.15.3.tgz#2cfacfd1fd4520bbc3e292cca432d5e8e2e3ee61"
+  integrity sha512-yVRvFsEMrv7s0lGhzrggJjNOSmZCdgCjw9xWrPr/kNNLp6FaDfMC1KaYl3TSJ0c58bECwNBMoQrZJ8hA8E1eFg==
+  dependencies:
+    "@types/http-errors" "*"
+    "@types/mime" "*"
+    "@types/node" "*"
+
+abort-controller@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/abort-controller/-/abort-controller-3.0.0.tgz#eaf54d53b62bae4138e809ca225c8439a6efb392"
+  integrity sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==
+  dependencies:
+    event-target-shim "^5.0.0"
+
+accepts@~1.3.8:
+  version "1.3.8"
+  resolved "https://registry.yarnpkg.com/accepts/-/accepts-1.3.8.tgz#0bf0be125b67014adcb0b0921e62db7bffe16b2e"
+  integrity sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==
+  dependencies:
+    mime-types "~2.1.34"
+    negotiator "0.6.3"
+
+agent-base@6:
+  version "6.0.2"
+  resolved "https://registry.yarnpkg.com/agent-base/-/agent-base-6.0.2.tgz#49fff58577cfee3f37176feab4c22e00f86d7f77"
+  integrity sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==
+  dependencies:
+    debug "4"
+
+agent-base@^7.0.2:
+  version "7.1.0"
+  resolved "https://registry.yarnpkg.com/agent-base/-/agent-base-7.1.0.tgz#536802b76bc0b34aa50195eb2442276d613e3434"
+  integrity sha512-o/zjMZRhJxny7OyEF+Op8X+efiELC7k7yOjMzgfzVqOzXqkBkWI79YoTdOtsuWd5BWhAGAuOY/Xa6xpiaWXiNg==
+  dependencies:
+    debug "^4.3.4"
+
+ajv-formats@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/ajv-formats/-/ajv-formats-2.1.1.tgz#6e669400659eb74973bbf2e33327180a0996b520"
+  integrity sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==
+  dependencies:
+    ajv "^8.0.0"
+
+ajv@^8.0.0, ajv@^8.11.0:
+  version "8.12.0"
+  resolved "https://registry.yarnpkg.com/ajv/-/ajv-8.12.0.tgz#d1a0527323e22f53562c567c00991577dfbe19d1"
+  integrity sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==
+  dependencies:
+    fast-deep-equal "^3.1.1"
+    json-schema-traverse "^1.0.0"
+    require-from-string "^2.0.2"
+    uri-js "^4.2.2"
+
+ansi-regex@^5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
+  integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
+
+ansi-styles@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
+  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
+  dependencies:
+    color-convert "^1.9.0"
+
+ansi-styles@^4.0.0:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
+  integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
+  dependencies:
+    color-convert "^2.0.1"
+
+array-flatten@1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/array-flatten/-/array-flatten-1.1.1.tgz#9a5f699051b1e7073328f2a008968b64ea2955d2"
+  integrity sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==
+
+arrify@^2.0.0, arrify@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/arrify/-/arrify-2.0.1.tgz#c9655e9331e0abcd588d2a7cad7e9956f66701fa"
+  integrity sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==
+
+available-typed-arrays@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz#92f95616501069d07d10edb2fc37d3e1c65123b7"
+  integrity sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==
+
+base64-js@^1.3.0:
+  version "1.5.1"
+  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a"
+  integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
+
+bignumber.js@^9.0.0:
+  version "9.1.2"
+  resolved "https://registry.yarnpkg.com/bignumber.js/-/bignumber.js-9.1.2.tgz#b7c4242259c008903b13707983b5f4bbd31eda0c"
+  integrity sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==
+
+body-parser@1.20.1:
+  version "1.20.1"
+  resolved "https://registry.yarnpkg.com/body-parser/-/body-parser-1.20.1.tgz#b1812a8912c195cd371a3ee5e66faa2338a5c668"
+  integrity sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==
+  dependencies:
+    bytes "3.1.2"
+    content-type "~1.0.4"
+    debug "2.6.9"
+    depd "2.0.0"
+    destroy "1.2.0"
+    http-errors "2.0.0"
+    iconv-lite "0.4.24"
+    on-finished "2.4.1"
+    qs "6.11.0"
+    raw-body "2.5.1"
+    type-is "~1.6.18"
+    unpipe "1.0.0"
+
+body-parser@^1.18.3:
+  version "1.20.2"
+  resolved "https://registry.yarnpkg.com/body-parser/-/body-parser-1.20.2.tgz#6feb0e21c4724d06de7ff38da36dad4f57a747fd"
+  integrity sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==
+  dependencies:
+    bytes "3.1.2"
+    content-type "~1.0.5"
+    debug "2.6.9"
+    depd "2.0.0"
+    destroy "1.2.0"
+    http-errors "2.0.0"
+    iconv-lite "0.4.24"
+    on-finished "2.4.1"
+    qs "6.11.0"
+    raw-body "2.5.2"
+    type-is "~1.6.18"
+    unpipe "1.0.0"
+
+buffer-equal-constant-time@1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz#f8e71132f7ffe6e01a5c9697a4c6f3e48d5cc819"
+  integrity sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==
+
+bytes@3.1.2:
+  version "3.1.2"
+  resolved "https://registry.yarnpkg.com/bytes/-/bytes-3.1.2.tgz#8b0beeb98605adf1b128fa4386403c009e0221a5"
+  integrity sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==
+
+call-bind@^1.0.0, call-bind@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/call-bind/-/call-bind-1.0.2.tgz#b1d4e89e688119c3c9a903ad30abb2f6a919be3c"
+  integrity sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==
+  dependencies:
+    function-bind "^1.1.1"
+    get-intrinsic "^1.0.2"
+
+chalk@^2.4.2:
+  version "2.4.2"
+  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
+  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
+  dependencies:
+    ansi-styles "^3.2.1"
+    escape-string-regexp "^1.0.5"
+    supports-color "^5.3.0"
+
+cliui@^8.0.1:
+  version "8.0.1"
+  resolved "https://registry.yarnpkg.com/cliui/-/cliui-8.0.1.tgz#0c04b075db02cbfe60dc8e6cf2f5486b1a3608aa"
+  integrity sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==
+  dependencies:
+    string-width "^4.2.0"
+    strip-ansi "^6.0.1"
+    wrap-ansi "^7.0.0"
+
+cloudevents@^7.0.0:
+  version "7.0.2"
+  resolved "https://registry.yarnpkg.com/cloudevents/-/cloudevents-7.0.2.tgz#367b22bb6399ab15a6b18347e6ce5ccecdc87849"
+  integrity sha512-WiOqWsNkMZmMMZ6xa3kzx/MA+8+V+c5eGkStZIcik+Px2xCobmzcacw1EOGyfhODaQKkIv8TxXOOLzV69oXFqA==
+  dependencies:
+    ajv "^8.11.0"
+    ajv-formats "^2.1.1"
+    json-bigint "^1.0.0"
+    process "^0.11.10"
+    util "^0.12.4"
+    uuid "^8.3.2"
+
+color-convert@^1.9.0:
+  version "1.9.3"
+  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
+  integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
+  dependencies:
+    color-name "1.1.3"
+
+color-convert@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
+  integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
+  dependencies:
+    color-name "~1.1.4"
+
+color-name@1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
+  integrity sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==
+
+color-name@~1.1.4:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
+  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
+
+content-disposition@0.5.4:
+  version "0.5.4"
+  resolved "https://registry.yarnpkg.com/content-disposition/-/content-disposition-0.5.4.tgz#8b82b4efac82512a02bb0b1dcec9d2c5e8eb5bfe"
+  integrity sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==
+  dependencies:
+    safe-buffer "5.2.1"
+
+content-type@~1.0.4, content-type@~1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/content-type/-/content-type-1.0.5.tgz#8b773162656d1d1086784c8f23a54ce6d73d7918"
+  integrity sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==
+
+cookie-signature@1.0.6:
+  version "1.0.6"
+  resolved "https://registry.yarnpkg.com/cookie-signature/-/cookie-signature-1.0.6.tgz#e303a882b342cc3ee8ca513a79999734dab3ae2c"
+  integrity sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==
+
+cookie@0.5.0:
+  version "0.5.0"
+  resolved "https://registry.yarnpkg.com/cookie/-/cookie-0.5.0.tgz#d1f5d71adec6558c58f389987c366aa47e994f8b"
+  integrity sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==
+
+debug@2.6.9:
+  version "2.6.9"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f"
+  integrity sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==
+  dependencies:
+    ms "2.0.0"
+
+debug@4, debug@^4.1.1, debug@^4.3.4:
+  version "4.3.4"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.4.tgz#1319f6579357f2338d3337d2cdd4914bb5dcc865"
+  integrity sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==
+  dependencies:
+    ms "2.1.2"
+
+depd@2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/depd/-/depd-2.0.0.tgz#b696163cc757560d09cf22cc8fad1571b79e76df"
+  integrity sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==
+
+destroy@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/destroy/-/destroy-1.2.0.tgz#4803735509ad8be552934c67df614f94e66fa015"
+  integrity sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==
+
+dns-zonefile@0.2.10:
+  version "0.2.10"
+  resolved "https://registry.yarnpkg.com/dns-zonefile/-/dns-zonefile-0.2.10.tgz#c9c1c4e74ff9a1c99636ae77e1440f0642d4dddd"
+  integrity sha512-YXs0T8EjhwI3YFpL4l7n9Uy+g/ufmd3WyDSQsI4mrMNlrrdgK6aN0AbNjOkKoHyF59l/x4Y3/z64F3aJWCKWpg==
+
+duplexify@^4.0.0, duplexify@^4.1.1:
+  version "4.1.2"
+  resolved "https://registry.yarnpkg.com/duplexify/-/duplexify-4.1.2.tgz#18b4f8d28289132fa0b9573c898d9f903f81c7b0"
+  integrity sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==
+  dependencies:
+    end-of-stream "^1.4.1"
+    inherits "^2.0.3"
+    readable-stream "^3.1.1"
+    stream-shift "^1.0.0"
+
+ecdsa-sig-formatter@1.0.11, ecdsa-sig-formatter@^1.0.11:
+  version "1.0.11"
+  resolved "https://registry.yarnpkg.com/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz#ae0f0fa2d85045ef14a817daa3ce9acd0489e5bf"
+  integrity sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==
+  dependencies:
+    safe-buffer "^5.0.1"
+
+ee-first@1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/ee-first/-/ee-first-1.1.1.tgz#590c61156b0ae2f4f0255732a158b266bc56b21d"
+  integrity sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==
+
+emoji-regex@^8.0.0:
+  version "8.0.0"
+  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
+  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
+
+encodeurl@~1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/encodeurl/-/encodeurl-1.0.2.tgz#ad3ff4c86ec2d029322f5a02c3a9a606c95b3f59"
+  integrity sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==
+
+end-of-stream@^1.4.1:
+  version "1.4.4"
+  resolved "https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0"
+  integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==
+  dependencies:
+    once "^1.4.0"
+
+ent@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/ent/-/ent-2.2.0.tgz#e964219325a21d05f44466a2f686ed6ce5f5dd1d"
+  integrity sha512-GHrMyVZQWvTIdDtpiEXdHZnFQKzeO09apj8Cbl4pKWy4i0Oprcq17usfDt5aO63swf0JOeMWjWQE/LzgSRuWpA==
+
+error-ex@^1.3.1:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
+  integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
+  dependencies:
+    is-arrayish "^0.2.1"
+
+escalade@^3.1.1:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40"
+  integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==
+
+escape-html@~1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988"
+  integrity sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==
+
+escape-string-regexp@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
+  integrity sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==
+
+etag@~1.8.1:
+  version "1.8.1"
+  resolved "https://registry.yarnpkg.com/etag/-/etag-1.8.1.tgz#41ae2eeb65efa62268aebfea83ac7d79299b0887"
+  integrity sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==
+
+event-target-shim@^5.0.0:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/event-target-shim/-/event-target-shim-5.0.1.tgz#5d4d3ebdf9583d63a5333ce2deb7480ab2b05789"
+  integrity sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==
+
+express@^4.16.4:
+  version "4.18.2"
+  resolved "https://registry.yarnpkg.com/express/-/express-4.18.2.tgz#3fabe08296e930c796c19e3c516979386ba9fd59"
+  integrity sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==
+  dependencies:
+    accepts "~1.3.8"
+    array-flatten "1.1.1"
+    body-parser "1.20.1"
+    content-disposition "0.5.4"
+    content-type "~1.0.4"
+    cookie "0.5.0"
+    cookie-signature "1.0.6"
+    debug "2.6.9"
+    depd "2.0.0"
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    etag "~1.8.1"
+    finalhandler "1.2.0"
+    fresh "0.5.2"
+    http-errors "2.0.0"
+    merge-descriptors "1.0.1"
+    methods "~1.1.2"
+    on-finished "2.4.1"
+    parseurl "~1.3.3"
+    path-to-regexp "0.1.7"
+    proxy-addr "~2.0.7"
+    qs "6.11.0"
+    range-parser "~1.2.1"
+    safe-buffer "5.2.1"
+    send "0.18.0"
+    serve-static "1.15.0"
+    setprototypeof "1.2.0"
+    statuses "2.0.1"
+    type-is "~1.6.18"
+    utils-merge "1.0.1"
+    vary "~1.1.2"
+
+extend@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa"
+  integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==
+
+fast-deep-equal@^3.1.1:
+  version "3.1.3"
+  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
+  integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
+
+finalhandler@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/finalhandler/-/finalhandler-1.2.0.tgz#7d23fe5731b207b4640e4fcd00aec1f9207a7b32"
+  integrity sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==
+  dependencies:
+    debug "2.6.9"
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    on-finished "2.4.1"
+    parseurl "~1.3.3"
+    statuses "2.0.1"
+    unpipe "~1.0.0"
+
+find-up@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19"
+  integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==
+  dependencies:
+    locate-path "^5.0.0"
+    path-exists "^4.0.0"
+
+for-each@^0.3.3:
+  version "0.3.3"
+  resolved "https://registry.yarnpkg.com/for-each/-/for-each-0.3.3.tgz#69b447e88a0a5d32c3e7084f3f1710034b21376e"
+  integrity sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==
+  dependencies:
+    is-callable "^1.1.3"
+
+forwarded@0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/forwarded/-/forwarded-0.2.0.tgz#2269936428aad4c15c7ebe9779a84bf0b2a81811"
+  integrity sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==
+
+fresh@0.5.2:
+  version "0.5.2"
+  resolved "https://registry.yarnpkg.com/fresh/-/fresh-0.5.2.tgz#3d8cadd90d976569fa835ab1f8e4b23a105605a7"
+  integrity sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==
+
+function-bind@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d"
+  integrity sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==
+
+gaxios@^6.0.0:
+  version "6.1.1"
+  resolved "https://registry.yarnpkg.com/gaxios/-/gaxios-6.1.1.tgz#549629f86a13e756b900f9ff7c94624670102938"
+  integrity sha512-bw8smrX+XlAoo9o1JAksBwX+hi/RG15J+NTSxmNPIclKC3ZVK6C2afwY8OSdRvOK0+ZLecUJYtj2MmjOt3Dm0w==
+  dependencies:
+    extend "^3.0.2"
+    https-proxy-agent "^7.0.1"
+    is-stream "^2.0.0"
+    node-fetch "^2.6.9"
+
+gcp-metadata@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/gcp-metadata/-/gcp-metadata-6.0.0.tgz#2ae12008bef8caa8726cba31fd0a641ebad5fb56"
+  integrity sha512-Ozxyi23/1Ar51wjUT2RDklK+3HxqDr8TLBNK8rBBFQ7T85iIGnXnVusauj06QyqCXRFZig8LZC+TUddWbndlpQ==
+  dependencies:
+    gaxios "^6.0.0"
+    json-bigint "^1.0.0"
+
+get-caller-file@^2.0.5:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
+  integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
+
+get-intrinsic@^1.0.2, get-intrinsic@^1.1.3:
+  version "1.2.1"
+  resolved "https://registry.yarnpkg.com/get-intrinsic/-/get-intrinsic-1.2.1.tgz#d295644fed4505fc9cde952c37ee12b477a83d82"
+  integrity sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==
+  dependencies:
+    function-bind "^1.1.1"
+    has "^1.0.3"
+    has-proto "^1.0.1"
+    has-symbols "^1.0.3"
+
+google-auth-library@^9.0.0:
+  version "9.1.0"
+  resolved "https://registry.yarnpkg.com/google-auth-library/-/google-auth-library-9.1.0.tgz#5c8444ca5c298030bbd7535f13b84748a86a8091"
+  integrity sha512-1M9HdOcQNPV5BwSXqwwT238MTKodJFBxZ/V2JP397ieOLv4FjQdfYb9SooR7Mb+oUT2IJ92mLJQf804dyx0MJA==
+  dependencies:
+    base64-js "^1.3.0"
+    ecdsa-sig-formatter "^1.0.11"
+    gaxios "^6.0.0"
+    gcp-metadata "^6.0.0"
+    gtoken "^7.0.0"
+    jws "^4.0.0"
+    lru-cache "^6.0.0"
+
+google-gax@^4.0.3:
+  version "4.0.4"
+  resolved "https://registry.yarnpkg.com/google-gax/-/google-gax-4.0.4.tgz#b309560b4ac775df71f86e6607ebcf6fa98a04a2"
+  integrity sha512-Yoey/ABON2HaTUIRUt5tTQAvwQ6E/2etSyFXwHNVcYtIiYDpKix7G4oorZdkp17gFiYovzRCRhRZYrfdCgRK9Q==
+  dependencies:
+    "@grpc/grpc-js" "~1.9.0"
+    "@grpc/proto-loader" "^0.7.0"
+    "@types/long" "^4.0.0"
+    abort-controller "^3.0.0"
+    duplexify "^4.0.0"
+    google-auth-library "^9.0.0"
+    node-fetch "^2.6.1"
+    object-hash "^3.0.0"
+    proto3-json-serializer "^2.0.0"
+    protobufjs "7.2.5"
+    retry-request "^6.0.0"
+
+gopd@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/gopd/-/gopd-1.0.1.tgz#29ff76de69dac7489b7c0918a5788e56477c332c"
+  integrity sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==
+  dependencies:
+    get-intrinsic "^1.1.3"
+
+gtoken@^7.0.0:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/gtoken/-/gtoken-7.0.1.tgz#b64bd01d88268ea3a3572c9076a85d1c48f1a455"
+  integrity sha512-KcFVtoP1CVFtQu0aSk3AyAt2og66PFhZAlkUOuWKwzMLoulHXG5W5wE5xAnHb+yl3/wEFoqGW7/cDGMU8igDZQ==
+  dependencies:
+    gaxios "^6.0.0"
+    jws "^4.0.0"
+
+has-flag@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
+  integrity sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==
+
+has-proto@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/has-proto/-/has-proto-1.0.1.tgz#1885c1305538958aff469fef37937c22795408e0"
+  integrity sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==
+
+has-symbols@^1.0.2, has-symbols@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.0.3.tgz#bb7b2c4349251dce87b125f7bdf874aa7c8b39f8"
+  integrity sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==
+
+has-tostringtag@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-tostringtag/-/has-tostringtag-1.0.0.tgz#7e133818a7d394734f941e73c3d3f9291e658b25"
+  integrity sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==
+  dependencies:
+    has-symbols "^1.0.2"
+
+has@^1.0.3:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/has/-/has-1.0.4.tgz#2eb2860e000011dae4f1406a86fe80e530fb2ec6"
+  integrity sha512-qdSAmqLF6209RFj4VVItywPMbm3vWylknmB3nvNiUIs72xAimcM8nVYxYr7ncvZq5qzk9MKIZR8ijqD/1QuYjQ==
+
+hosted-git-info@^2.1.4:
+  version "2.8.9"
+  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.8.9.tgz#dffc0bf9a21c02209090f2aa69429e1414daf3f9"
+  integrity sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==
+
+http-errors@2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/http-errors/-/http-errors-2.0.0.tgz#b7774a1486ef73cf7667ac9ae0858c012c57b9d3"
+  integrity sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==
+  dependencies:
+    depd "2.0.0"
+    inherits "2.0.4"
+    setprototypeof "1.2.0"
+    statuses "2.0.1"
+    toidentifier "1.0.1"
+
+http-proxy-agent@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz#5129800203520d434f142bc78ff3c170800f2b43"
+  integrity sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==
+  dependencies:
+    "@tootallnate/once" "2"
+    agent-base "6"
+    debug "4"
+
+https-proxy-agent@^5.0.0:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz#c59ef224a04fe8b754f3db0063a25ea30d0005d6"
+  integrity sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==
+  dependencies:
+    agent-base "6"
+    debug "4"
+
+https-proxy-agent@^7.0.1:
+  version "7.0.2"
+  resolved "https://registry.yarnpkg.com/https-proxy-agent/-/https-proxy-agent-7.0.2.tgz#e2645b846b90e96c6e6f347fb5b2e41f1590b09b"
+  integrity sha512-NmLNjm6ucYwtcUmL7JQC1ZQ57LmHP4lT15FQ8D61nak1rO6DH+fz5qNK2Ap5UN4ZapYICE3/0KodcLYSPsPbaA==
+  dependencies:
+    agent-base "^7.0.2"
+    debug "4"
+
+iconv-lite@0.4.24:
+  version "0.4.24"
+  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
+  integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==
+  dependencies:
+    safer-buffer ">= 2.1.2 < 3"
+
+inherits@2.0.4, inherits@^2.0.3:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
+  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
+
+ipaddr.js@1.9.1:
+  version "1.9.1"
+  resolved "https://registry.yarnpkg.com/ipaddr.js/-/ipaddr.js-1.9.1.tgz#bff38543eeb8984825079ff3a2a8e6cbd46781b3"
+  integrity sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==
+
+is-arguments@^1.0.4:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/is-arguments/-/is-arguments-1.1.1.tgz#15b3f88fda01f2a97fec84ca761a560f123efa9b"
+  integrity sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==
+  dependencies:
+    call-bind "^1.0.2"
+    has-tostringtag "^1.0.0"
+
+is-arrayish@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
+  integrity sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==
+
+is-callable@^1.1.3:
+  version "1.2.7"
+  resolved "https://registry.yarnpkg.com/is-callable/-/is-callable-1.2.7.tgz#3bc2a85ea742d9e36205dcacdd72ca1fdc51b055"
+  integrity sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==
+
+is-core-module@^2.13.0:
+  version "2.13.0"
+  resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.13.0.tgz#bb52aa6e2cbd49a30c2ba68c42bf3435ba6072db"
+  integrity sha512-Z7dk6Qo8pOCp3l4tsX2C5ZVas4V+UxwQodwZhLopL91TX8UyyHEXafPcyoeeWuLrwzHcr3igO78wNLwHJHsMCQ==
+  dependencies:
+    has "^1.0.3"
+
+is-fullwidth-code-point@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
+  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
+
+is-generator-function@^1.0.7:
+  version "1.0.10"
+  resolved "https://registry.yarnpkg.com/is-generator-function/-/is-generator-function-1.0.10.tgz#f1558baf1ac17e0deea7c0415c438351ff2b3c72"
+  integrity sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==
+  dependencies:
+    has-tostringtag "^1.0.0"
+
+is-stream@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.1.tgz#fac1e3d53b97ad5a9d0ae9cef2389f5810a5c077"
+  integrity sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==
+
+is-typed-array@^1.1.3:
+  version "1.1.12"
+  resolved "https://registry.yarnpkg.com/is-typed-array/-/is-typed-array-1.1.12.tgz#d0bab5686ef4a76f7a73097b95470ab199c57d4a"
+  integrity sha512-Z14TF2JNG8Lss5/HMqt0//T9JeHXttXy5pH/DBU4vi98ozO2btxzq9MwYDZYnKwU8nRsz/+GVFVRDq3DkVuSPg==
+  dependencies:
+    which-typed-array "^1.1.11"
+
+js-tokens@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
+  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
+
+json-bigint@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/json-bigint/-/json-bigint-1.0.0.tgz#ae547823ac0cad8398667f8cd9ef4730f5b01ff1"
+  integrity sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==
+  dependencies:
+    bignumber.js "^9.0.0"
+
+json-parse-even-better-errors@^2.3.0:
+  version "2.3.1"
+  resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz#7c47805a94319928e05777405dc12e1f7a4ee02d"
+  integrity sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==
+
+json-schema-traverse@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz#ae7bcb3656ab77a73ba5c49bf654f38e6b6860e2"
+  integrity sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==
+
+jwa@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/jwa/-/jwa-2.0.0.tgz#a7e9c3f29dae94027ebcaf49975c9345593410fc"
+  integrity sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==
+  dependencies:
+    buffer-equal-constant-time "1.0.1"
+    ecdsa-sig-formatter "1.0.11"
+    safe-buffer "^5.0.1"
+
+jws@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/jws/-/jws-4.0.0.tgz#2d4e8cf6a318ffaa12615e9dec7e86e6c97310f4"
+  integrity sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==
+  dependencies:
+    jwa "^2.0.0"
+    safe-buffer "^5.0.1"
+
+lines-and-columns@^1.1.6:
+  version "1.2.4"
+  resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632"
+  integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
+
+locate-path@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0"
+  integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==
+  dependencies:
+    p-locate "^4.1.0"
+
+lodash.camelcase@^4.3.0:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz#b28aa6288a2b9fc651035c7711f65ab6190331a6"
+  integrity sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==
+
+lodash.groupby@^4.6.0:
+  version "4.6.0"
+  resolved "https://registry.yarnpkg.com/lodash.groupby/-/lodash.groupby-4.6.0.tgz#0b08a1dcf68397c397855c3239783832df7403d1"
+  integrity sha512-5dcWxm23+VAoz+awKmBaiBvzox8+RqMgFhi7UvX9DHZr2HdxHXM/Wrf8cfKpsW37RNrvtPn6hSwNqurSILbmJw==
+
+long@^5.0.0:
+  version "5.2.3"
+  resolved "https://registry.yarnpkg.com/long/-/long-5.2.3.tgz#a3ba97f3877cf1d778eccbcb048525ebb77499e1"
+  integrity sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==
+
+lru-cache@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-6.0.0.tgz#6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94"
+  integrity sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==
+  dependencies:
+    yallist "^4.0.0"
+
+media-typer@0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/media-typer/-/media-typer-0.3.0.tgz#8710d7af0aa626f8fffa1ce00168545263255748"
+  integrity sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==
+
+merge-descriptors@1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/merge-descriptors/-/merge-descriptors-1.0.1.tgz#b00aaa556dd8b44568150ec9d1b953f3f90cbb61"
+  integrity sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==
+
+methods@~1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/methods/-/methods-1.1.2.tgz#5529a4d67654134edcc5266656835b0f851afcee"
+  integrity sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==
+
+mime-db@1.52.0:
+  version "1.52.0"
+  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.52.0.tgz#bbabcdc02859f4987301c856e3387ce5ec43bf70"
+  integrity sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==
+
+mime-types@~2.1.24, mime-types@~2.1.34:
+  version "2.1.35"
+  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.35.tgz#381a871b62a734450660ae3deee44813f70d959a"
+  integrity sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==
+  dependencies:
+    mime-db "1.52.0"
+
+mime@1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1"
+  integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==
+
+minimist@^1.2.7:
+  version "1.2.8"
+  resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.8.tgz#c1a464e7693302e082a075cee0c057741ac4772c"
+  integrity sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==
+
+ms@2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8"
+  integrity sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==
+
+ms@2.1.2:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
+  integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
+
+ms@2.1.3:
+  version "2.1.3"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.3.tgz#574c8138ce1d2b5861f0b44579dbadd60c6615b2"
+  integrity sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==
+
+negotiator@0.6.3:
+  version "0.6.3"
+  resolved "https://registry.yarnpkg.com/negotiator/-/negotiator-0.6.3.tgz#58e323a72fedc0d6f9cd4d31fe49f51479590ccd"
+  integrity sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==
+
+node-fetch@^2.6.1, node-fetch@^2.6.9:
+  version "2.7.0"
+  resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.7.0.tgz#d0f0fa6e3e2dc1d27efcd8ad99d550bda94d187d"
+  integrity sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==
+  dependencies:
+    whatwg-url "^5.0.0"
+
+normalize-package-data@^2.5.0:
+  version "2.5.0"
+  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.5.0.tgz#e66db1838b200c1dfc233225d12cb36520e234a8"
+  integrity sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==
+  dependencies:
+    hosted-git-info "^2.1.4"
+    resolve "^1.10.0"
+    semver "2 || 3 || 4 || 5"
+    validate-npm-package-license "^3.0.1"
+
+object-hash@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/object-hash/-/object-hash-3.0.0.tgz#73f97f753e7baffc0e2cc9d6e079079744ac82e9"
+  integrity sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==
+
+object-inspect@^1.9.0:
+  version "1.12.3"
+  resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.12.3.tgz#ba62dffd67ee256c8c086dfae69e016cd1f198b9"
+  integrity sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==
+
+on-finished@2.4.1, on-finished@^2.3.0:
+  version "2.4.1"
+  resolved "https://registry.yarnpkg.com/on-finished/-/on-finished-2.4.1.tgz#58c8c44116e54845ad57f14ab10b03533184ac3f"
+  integrity sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==
+  dependencies:
+    ee-first "1.1.1"
+
+once@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
+  integrity sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==
+  dependencies:
+    wrappy "1"
+
+p-limit@^2.2.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1"
+  integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
+  dependencies:
+    p-try "^2.0.0"
+
+p-locate@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07"
+  integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==
+  dependencies:
+    p-limit "^2.2.0"
+
+p-try@^2.0.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
+  integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
+
+parse-json@^5.0.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd"
+  integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    error-ex "^1.3.1"
+    json-parse-even-better-errors "^2.3.0"
+    lines-and-columns "^1.1.6"
+
+parseurl@~1.3.3:
+  version "1.3.3"
+  resolved "https://registry.yarnpkg.com/parseurl/-/parseurl-1.3.3.tgz#9da19e7bee8d12dff0513ed5b76957793bc2e8d4"
+  integrity sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==
+
+path-exists@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
+  integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
+
+path-parse@^1.0.7:
+  version "1.0.7"
+  resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
+  integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==
+
+path-to-regexp@0.1.7:
+  version "0.1.7"
+  resolved "https://registry.yarnpkg.com/path-to-regexp/-/path-to-regexp-0.1.7.tgz#df604178005f522f15eb4490e7247a1bfaa67f8c"
+  integrity sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==
+
+process@^0.11.10:
+  version "0.11.10"
+  resolved "https://registry.yarnpkg.com/process/-/process-0.11.10.tgz#7332300e840161bda3e69a1d1d91a7d4bc16f182"
+  integrity sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==
+
+proto3-json-serializer@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/proto3-json-serializer/-/proto3-json-serializer-2.0.0.tgz#1d5354e28a0ee985a771f8502d2b4db962d19d1e"
+  integrity sha512-FB/YaNrpiPkyQNSNPilpn8qn0KdEfkgmJ9JP93PQyF/U4bAiXY5BiUdDhiDO4S48uSQ6AesklgVlrKiqZPzegw==
+  dependencies:
+    protobufjs "^7.0.0"
+
+protobufjs@7.2.5, protobufjs@^7.0.0, protobufjs@^7.2.4:
+  version "7.2.5"
+  resolved "https://registry.yarnpkg.com/protobufjs/-/protobufjs-7.2.5.tgz#45d5c57387a6d29a17aab6846dcc283f9b8e7f2d"
+  integrity sha512-gGXRSXvxQ7UiPgfw8gevrfRWcTlSbOFg+p/N+JVJEK5VhueL2miT6qTymqAmjr1Q5WbOCyJbyrk6JfWKwlFn6A==
+  dependencies:
+    "@protobufjs/aspromise" "^1.1.2"
+    "@protobufjs/base64" "^1.1.2"
+    "@protobufjs/codegen" "^2.0.4"
+    "@protobufjs/eventemitter" "^1.1.0"
+    "@protobufjs/fetch" "^1.1.0"
+    "@protobufjs/float" "^1.0.2"
+    "@protobufjs/inquire" "^1.1.0"
+    "@protobufjs/path" "^1.1.2"
+    "@protobufjs/pool" "^1.1.0"
+    "@protobufjs/utf8" "^1.1.0"
+    "@types/node" ">=13.7.0"
+    long "^5.0.0"
+
+proxy-addr@~2.0.7:
+  version "2.0.7"
+  resolved "https://registry.yarnpkg.com/proxy-addr/-/proxy-addr-2.0.7.tgz#f19fe69ceab311eeb94b42e70e8c2070f9ba1025"
+  integrity sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==
+  dependencies:
+    forwarded "0.2.0"
+    ipaddr.js "1.9.1"
+
+punycode@^2.1.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.3.0.tgz#f67fa67c94da8f4d0cfff981aee4118064199b8f"
+  integrity sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==
+
+qs@6.11.0:
+  version "6.11.0"
+  resolved "https://registry.yarnpkg.com/qs/-/qs-6.11.0.tgz#fd0d963446f7a65e1367e01abd85429453f0c37a"
+  integrity sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==
+  dependencies:
+    side-channel "^1.0.4"
+
+range-parser@~1.2.1:
+  version "1.2.1"
+  resolved "https://registry.yarnpkg.com/range-parser/-/range-parser-1.2.1.tgz#3cf37023d199e1c24d1a55b84800c2f3e6468031"
+  integrity sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==
+
+raw-body@2.5.1:
+  version "2.5.1"
+  resolved "https://registry.yarnpkg.com/raw-body/-/raw-body-2.5.1.tgz#fe1b1628b181b700215e5fd42389f98b71392857"
+  integrity sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==
+  dependencies:
+    bytes "3.1.2"
+    http-errors "2.0.0"
+    iconv-lite "0.4.24"
+    unpipe "1.0.0"
+
+raw-body@2.5.2:
+  version "2.5.2"
+  resolved "https://registry.yarnpkg.com/raw-body/-/raw-body-2.5.2.tgz#99febd83b90e08975087e8f1f9419a149366b68a"
+  integrity sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==
+  dependencies:
+    bytes "3.1.2"
+    http-errors "2.0.0"
+    iconv-lite "0.4.24"
+    unpipe "1.0.0"
+
+read-pkg-up@^7.0.1:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-7.0.1.tgz#f3a6135758459733ae2b95638056e1854e7ef507"
+  integrity sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==
+  dependencies:
+    find-up "^4.1.0"
+    read-pkg "^5.2.0"
+    type-fest "^0.8.1"
+
+read-pkg@^5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-5.2.0.tgz#7bf295438ca5a33e56cd30e053b34ee7250c93cc"
+  integrity sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==
+  dependencies:
+    "@types/normalize-package-data" "^2.4.0"
+    normalize-package-data "^2.5.0"
+    parse-json "^5.0.0"
+    type-fest "^0.6.0"
+
+readable-stream@^3.1.1:
+  version "3.6.2"
+  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.6.2.tgz#56a9b36ea965c00c5a93ef31eb111a0f11056967"
+  integrity sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==
+  dependencies:
+    inherits "^2.0.3"
+    string_decoder "^1.1.1"
+    util-deprecate "^1.0.1"
+
+require-directory@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
+  integrity sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==
+
+require-from-string@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/require-from-string/-/require-from-string-2.0.2.tgz#89a7fdd938261267318eafe14f9c32e598c36909"
+  integrity sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==
+
+resolve@^1.10.0:
+  version "1.22.6"
+  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.22.6.tgz#dd209739eca3aef739c626fea1b4f3c506195362"
+  integrity sha512-njhxM7mV12JfufShqGy3Rz8j11RPdLy4xi15UurGJeoHLfJpVXKdh3ueuOqbYUcDZnffr6X739JBo5LzyahEsw==
+  dependencies:
+    is-core-module "^2.13.0"
+    path-parse "^1.0.7"
+    supports-preserve-symlinks-flag "^1.0.0"
+
+retry-request@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/retry-request/-/retry-request-6.0.0.tgz#a74dbbab421b51daefa20228f6036e6e2a0f1169"
+  integrity sha512-24kaFMd3wCnT3n4uPnsQh90ZSV8OISpfTFXJ00Wi+/oD2OPrp63EQ8hznk6rhxdlpwx2QBhQSDz2Fg46ki852g==
+  dependencies:
+    debug "^4.1.1"
+    extend "^3.0.2"
+
+safe-buffer@5.2.1, safe-buffer@^5.0.1, safe-buffer@~5.2.0:
+  version "5.2.1"
+  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6"
+  integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==
+
+"safer-buffer@>= 2.1.2 < 3":
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
+  integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
+
+"semver@2 || 3 || 4 || 5":
+  version "5.7.2"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.2.tgz#48d55db737c3287cd4835e17fa13feace1c41ef8"
+  integrity sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==
+
+semver@^7.3.5:
+  version "7.5.4"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-7.5.4.tgz#483986ec4ed38e1c6c48c34894a9182dbff68a6e"
+  integrity sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==
+  dependencies:
+    lru-cache "^6.0.0"
+
+send@0.18.0:
+  version "0.18.0"
+  resolved "https://registry.yarnpkg.com/send/-/send-0.18.0.tgz#670167cc654b05f5aa4a767f9113bb371bc706be"
+  integrity sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==
+  dependencies:
+    debug "2.6.9"
+    depd "2.0.0"
+    destroy "1.2.0"
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    etag "~1.8.1"
+    fresh "0.5.2"
+    http-errors "2.0.0"
+    mime "1.6.0"
+    ms "2.1.3"
+    on-finished "2.4.1"
+    range-parser "~1.2.1"
+    statuses "2.0.1"
+
+serve-static@1.15.0:
+  version "1.15.0"
+  resolved "https://registry.yarnpkg.com/serve-static/-/serve-static-1.15.0.tgz#faaef08cffe0a1a62f60cad0c4e513cff0ac9540"
+  integrity sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==
+  dependencies:
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    parseurl "~1.3.3"
+    send "0.18.0"
+
+setprototypeof@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/setprototypeof/-/setprototypeof-1.2.0.tgz#66c9a24a73f9fc28cbe66b09fed3d33dcaf1b424"
+  integrity sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==
+
+side-channel@^1.0.4:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.4.tgz#efce5c8fdc104ee751b25c58d4290011fa5ea2cf"
+  integrity sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==
+  dependencies:
+    call-bind "^1.0.0"
+    get-intrinsic "^1.0.2"
+    object-inspect "^1.9.0"
+
+spdx-correct@^3.0.0:
+  version "3.2.0"
+  resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.2.0.tgz#4f5ab0668f0059e34f9c00dce331784a12de4e9c"
+  integrity sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==
+  dependencies:
+    spdx-expression-parse "^3.0.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-exceptions@^2.1.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz#3f28ce1a77a00372683eade4a433183527a2163d"
+  integrity sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==
+
+spdx-expression-parse@^3.0.0:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz#cf70f50482eefdc98e3ce0a6833e4a53ceeba679"
+  integrity sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==
+  dependencies:
+    spdx-exceptions "^2.1.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-license-ids@^3.0.0:
+  version "3.0.15"
+  resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.15.tgz#142460aabaca062bc7cd4cc87b7d50725ed6a4ba"
+  integrity sha512-lpT8hSQp9jAKp9mhtBU4Xjon8LPGBvLIuBiSVhMEtmLecTh2mO0tlqrAMp47tBXzMr13NJMQ2lf7RpQGLJ3HsQ==
+
+statuses@2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/statuses/-/statuses-2.0.1.tgz#55cb000ccf1d48728bd23c685a063998cf1a1b63"
+  integrity sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==
+
+stream-events@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/stream-events/-/stream-events-1.0.5.tgz#bbc898ec4df33a4902d892333d47da9bf1c406d5"
+  integrity sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==
+  dependencies:
+    stubs "^3.0.0"
+
+stream-shift@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/stream-shift/-/stream-shift-1.0.1.tgz#d7088281559ab2778424279b0877da3c392d5a3d"
+  integrity sha512-AiisoFqQ0vbGcZgQPY1cdP2I76glaVA/RauYR4G4thNFgkTqr90yXTo4LYX60Jl+sIlPNHHdGSwo01AvbKUSVQ==
+
+string-format-obj@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/string-format-obj/-/string-format-obj-1.1.1.tgz#c7612ca4e2ad923812a81db192dc291850aa1f65"
+  integrity sha512-Mm+sROy+pHJmx0P/0Bs1uxIX6UhGJGj6xDGQZ5zh9v/SZRmLGevp+p0VJxV7lirrkAmQ2mvva/gHKpnF/pTb+Q==
+
+string-width@^4.1.0, string-width@^4.2.0, string-width@^4.2.3:
+  version "4.2.3"
+  resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
+  integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
+  dependencies:
+    emoji-regex "^8.0.0"
+    is-fullwidth-code-point "^3.0.0"
+    strip-ansi "^6.0.1"
+
+string_decoder@^1.1.1:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.3.0.tgz#42f114594a46cf1a8e30b0a84f56c78c3edac21e"
+  integrity sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==
+  dependencies:
+    safe-buffer "~5.2.0"
+
+strip-ansi@^6.0.0, strip-ansi@^6.0.1:
+  version "6.0.1"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
+  integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
+  dependencies:
+    ansi-regex "^5.0.1"
+
+stubs@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/stubs/-/stubs-3.0.0.tgz#e8d2ba1fa9c90570303c030b6900f7d5f89abe5b"
+  integrity sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==
+
+supports-color@^5.3.0:
+  version "5.5.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
+  integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
+  dependencies:
+    has-flag "^3.0.0"
+
+supports-preserve-symlinks-flag@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09"
+  integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==
+
+teeny-request@^9.0.0:
+  version "9.0.0"
+  resolved "https://registry.yarnpkg.com/teeny-request/-/teeny-request-9.0.0.tgz#18140de2eb6595771b1b02203312dfad79a4716d"
+  integrity sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==
+  dependencies:
+    http-proxy-agent "^5.0.0"
+    https-proxy-agent "^5.0.0"
+    node-fetch "^2.6.9"
+    stream-events "^1.0.5"
+    uuid "^9.0.0"
+
+toidentifier@1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/toidentifier/-/toidentifier-1.0.1.tgz#3be34321a88a820ed1bd80dfaa33e479fbb8dd35"
+  integrity sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==
+
+tr46@~0.0.3:
+  version "0.0.3"
+  resolved "https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a"
+  integrity sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==
+
+type-fest@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.6.0.tgz#8d2a2370d3df886eb5c90ada1c5bf6188acf838b"
+  integrity sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==
+
+type-fest@^0.8.1:
+  version "0.8.1"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.8.1.tgz#09e249ebde851d3b1e48d27c105444667f17b83d"
+  integrity sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==
+
+type-is@~1.6.18:
+  version "1.6.18"
+  resolved "https://registry.yarnpkg.com/type-is/-/type-is-1.6.18.tgz#4e552cd05df09467dcbc4ef739de89f2cf37c131"
+  integrity sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==
+  dependencies:
+    media-typer "0.3.0"
+    mime-types "~2.1.24"
+
+unpipe@1.0.0, unpipe@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/unpipe/-/unpipe-1.0.0.tgz#b2bf4ee8514aae6165b4817829d21b2ef49904ec"
+  integrity sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==
+
+uri-js@^4.2.2:
+  version "4.4.1"
+  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
+  integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
+  dependencies:
+    punycode "^2.1.0"
+
+util-deprecate@^1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
+  integrity sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==
+
+util@^0.12.4:
+  version "0.12.5"
+  resolved "https://registry.yarnpkg.com/util/-/util-0.12.5.tgz#5f17a6059b73db61a875668781a1c2b136bd6fbc"
+  integrity sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==
+  dependencies:
+    inherits "^2.0.3"
+    is-arguments "^1.0.4"
+    is-generator-function "^1.0.7"
+    is-typed-array "^1.1.3"
+    which-typed-array "^1.1.2"
+
+utils-merge@1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/utils-merge/-/utils-merge-1.0.1.tgz#9f95710f50a267947b2ccc124741c1028427e713"
+  integrity sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==
+
+uuid@^8.3.2:
+  version "8.3.2"
+  resolved "https://registry.yarnpkg.com/uuid/-/uuid-8.3.2.tgz#80d5b5ced271bb9af6c445f21a1a04c606cefbe2"
+  integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==
+
+uuid@^9.0.0:
+  version "9.0.1"
+  resolved "https://registry.yarnpkg.com/uuid/-/uuid-9.0.1.tgz#e188d4c8853cc722220392c424cd637f32293f30"
+  integrity sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==
+
+validate-npm-package-license@^3.0.1:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a"
+  integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==
+  dependencies:
+    spdx-correct "^3.0.0"
+    spdx-expression-parse "^3.0.0"
+
+vary@~1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/vary/-/vary-1.1.2.tgz#2299f02c6ded30d4a5961b0b9f74524a18f634fc"
+  integrity sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==
+
+webidl-conversions@^3.0.0:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-3.0.1.tgz#24534275e2a7bc6be7bc86611cc16ae0a5654871"
+  integrity sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==
+
+whatwg-url@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-5.0.0.tgz#966454e8765462e37644d3626f6742ce8b70965d"
+  integrity sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==
+  dependencies:
+    tr46 "~0.0.3"
+    webidl-conversions "^3.0.0"
+
+which-typed-array@^1.1.11, which-typed-array@^1.1.2:
+  version "1.1.11"
+  resolved "https://registry.yarnpkg.com/which-typed-array/-/which-typed-array-1.1.11.tgz#99d691f23c72aab6768680805a271b69761ed61a"
+  integrity sha512-qe9UWWpkeG5yzZ0tNYxDmd7vo58HDBc39mZ0xWWpolAGADdFOzkfamWLDxkOWcvHQKVmdTyQdLD4NOfjLWTKew==
+  dependencies:
+    available-typed-arrays "^1.0.5"
+    call-bind "^1.0.2"
+    for-each "^0.3.3"
+    gopd "^1.0.1"
+    has-tostringtag "^1.0.0"
+
+wrap-ansi@^7.0.0:
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
+  integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
+  dependencies:
+    ansi-styles "^4.0.0"
+    string-width "^4.1.0"
+    strip-ansi "^6.0.0"
+
+wrappy@1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
+  integrity sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==
+
+y18n@^5.0.5:
+  version "5.0.8"
+  resolved "https://registry.yarnpkg.com/y18n/-/y18n-5.0.8.tgz#7f4934d0f7ca8c56f95314939ddcd2dd91ce1d55"
+  integrity sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==
+
+yallist@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
+  integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
+
+yargs-parser@^21.1.1:
+  version "21.1.1"
+  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-21.1.1.tgz#9096bceebf990d21bb31fa9516e0ede294a77d35"
+  integrity sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==
+
+yargs@^17.7.2:
+  version "17.7.2"
+  resolved "https://registry.yarnpkg.com/yargs/-/yargs-17.7.2.tgz#991df39aca675a192b816e1e0363f9d75d2aa269"
+  integrity sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==
+  dependencies:
+    cliui "^8.0.1"
+    escalade "^3.1.1"
+    get-caller-file "^2.0.5"
+    require-directory "^2.1.1"
+    string-width "^4.2.3"
+    y18n "^5.0.5"
+    yargs-parser "^21.1.1"
diff --git a/deployment-examples/terraform_gcp/scripts/create_filesystem.sh b/deployment-examples/terraform_gcp/scripts/create_filesystem.sh
new file mode 100644
index 0000000..134bfd4
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/create_filesystem.sh
@@ -0,0 +1,50 @@
+#!/bin/bash
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Creates a raid from all available drives if multiple drives.
+# Then creates an ext4 filesystem on raid (or single drive if no raid).
+
+# TODO(allada) hardlink this to the s3 version.
+set -euxo pipefail
+
+if [[ $EUID -ne 0 ]]; then
+   echo "This script must be run as root" 
+   exit 1
+fi
+
+MOUNT_LOCATION="$1"
+shift
+
+DEVICES=( $(lsblk --fs --json | jq -r '.blockdevices[] | select(.children == null and .fstype == null and (.mountpoint == null and .mountpoints[0] == null)) | .name') )
+DEVICES_FULLNAME=()
+for DEVICE in "${DEVICES[@]}"; do
+  DEVICES_FULLNAME+=("/dev/$DEVICE")
+done
+
+if [ "${#DEVICES_FULLNAME[@]}" -eq "0" ]; then
+    echo "No unused drives, using root volume"
+    exit 0
+elif [ "${#DEVICES_FULLNAME[@]}" -eq "1" ]; then
+    echo "Only one volume letting ext4 manage it directly instead of raid"
+    DEVICE="${DEVICES_FULLNAME[@]}"
+else
+    mdadm --create --verbose /dev/md0 --level=0 --raid-devices=${#DEVICES_FULLNAME[@]} "${DEVICES_FULLNAME[@]}"
+    DEVICE="/dev/md0"
+fi
+rm -rf "$MOUNT_LOCATION"
+mkdir -p "$MOUNT_LOCATION"
+
+mkfs.ext4 "$DEVICE"
+mount "$DEVICE" "$MOUNT_LOCATION"
diff --git a/deployment-examples/terraform_gcp/scripts/docker_devel_requirements.txt b/deployment-examples/terraform_gcp/scripts/docker_devel_requirements.txt
new file mode 100644
index 0000000..cf9fdd2
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/docker_devel_requirements.txt
@@ -0,0 +1,707 @@
+# SHA1:8522bea55c82754bfede640a3637a14fa7d2e8bf
+#
+# This file is autogenerated by pip-compile-multi
+# To update, run:
+#
+#    pip-compile-multi
+#
+--find-links https://download.pytorch.org/whl/torch_stable.html
+torch==1.10.0+cu111
+tqdm==4.57.0
+absl-py==0.10.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+addict==2.4.0
+    # via
+    #   mmcv
+    #   mmengine
+alabaster==0.7.12
+    # via sphinx
+apipkg==1.5
+    # via execnet
+appdirs==1.4.4
+    # via
+    #   black
+    #   pyvista
+argon2-cffi==20.1.0
+    # via notebook
+attrs==23.1.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   jsonschema
+    #   pytest
+    #   referencing
+autoflake==1.4
+    # via -r requirements/docker_devel_requirements.in
+babel==2.8.0
+    # via sphinx
+backcall==0.2.0
+    # via ipython
+bayesian-optimization==1.2.0
+    # via nevergrad
+black==21.4b2
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   black-nbconvert
+black-nbconvert==0.2.0
+    # via -r requirements/docker_devel_requirements.in
+bleach==3.3.0
+    # via nbconvert
+cachetools==4.1.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-auth
+certifi==2020.6.20
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   requests
+cffi==1.14.2
+    # via
+    #   argon2-cffi
+    #   cryptography
+    #   google-crc32c
+charset-normalizer==3.2.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   requests
+click==7.1.2
+    # via
+    #   black
+    #   model-index
+    #   openmim
+    #   pip-compile-multi
+    #   pip-tools
+cma==3.0.3
+    # via nevergrad
+colorama==0.4.6
+    # via openmim
+colorcet==2.0.6
+    # via itkwidgets
+concurrencytest==0.1.2
+    # via -r requirements/docker_devel_requirements.in
+coverage @ https://storage.googleapis.com/twa-build-support/coveragepy_dist/2021_04_23/coverage-5.0.4a0-cp38-cp38-linux_x86_64.whl
+    # via -r requirements/docker_devel_requirements.in
+cpplint==1.6.0
+    # via -r requirements/docker_devel_requirements.in
+crcmod==1.7
+    # via -r requirements/docker_devel_requirements.in
+cryptography==41.0.2
+    # via -r requirements/docker_devel_requirements.in
+cycler==0.10.0
+    # via matplotlib
+cython==0.29.21
+    # via -r requirements/docker_devel_requirements.in
+debugpy==1.2.0
+    # via -r requirements/docker_devel_requirements.in
+decorator==4.4.2
+    # via
+    #   ipyparallel
+    #   ipython
+defusedxml==0.6.0
+    # via nbconvert
+docutils==0.16
+    # via sphinx
+entrypoints==0.3
+    # via nbconvert
+execnet==1.7.1
+    # via pytest-xdist
+extras==1.0.0
+    # via
+    #   python-subunit
+    #   testtools
+fixtures==3.0.0
+    # via testtools
+gitdb==4.0.10
+    # via gitpython
+gitpython==3.1.24
+    # via -r requirements/docker_devel_requirements.in
+google-api-core==1.31.5
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   google-api-python-client
+    #   google-cloud-core
+google-api-python-client==2.94.0
+    # via -r requirements/docker_devel_requirements.in
+google-auth==1.27.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-api-core
+    #   google-api-python-client
+    #   google-auth-httplib2
+    #   google-auth-oauthlib
+    #   google-cloud-core
+    #   google-cloud-storage
+    #   tensorboard
+google-auth-httplib2==0.1.0
+    # via google-api-python-client
+google-auth-oauthlib==0.4.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+google-cloud-core==1.6.0
+    # via google-cloud-storage
+google-cloud-storage==1.36.2
+    # via -r requirements/docker_devel_requirements.in
+google-crc32c==1.1.2
+    # via google-resumable-media
+google-resumable-media==1.2.0
+    # via google-cloud-storage
+googleapis-common-protos==1.56.0
+    # via google-api-core
+grpcio==1.38.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+httplib2==0.22.0
+    # via
+    #   google-api-python-client
+    #   google-auth-httplib2
+    #   oauth2client
+idna==2.10
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   requests
+imageio==2.9.0
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   pyvista
+imageio-ffmpeg==0.4.2
+    # via -r requirements/docker_devel_requirements.in
+imagesize==1.2.0
+    # via sphinx
+importlib-metadata==6.8.0
+    # via yapf
+importlib-resources==5.12.0
+    # via
+    #   jsonschema
+    #   jsonschema-specifications
+iniconfig==1.0.1
+    # via pytest
+ipdb==0.13.3
+    # via -r requirements/docker_devel_requirements.in
+ipydatawidgets==4.2.0
+    # via
+    #   itkwidgets
+    #   pythreejs
+ipykernel==5.3.4
+    # via
+    #   ipympl
+    #   ipyparallel
+    #   ipython
+    #   ipywidgets
+    #   notebook
+    #   qtconsole
+ipympl==0.6.3
+    # via itkwidgets
+ipyparallel==6.3.0
+    # via ipython
+ipython[all]==7.16.1
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   ipdb
+    #   ipykernel
+    #   ipyparallel
+    #   ipywidgets
+ipython-genutils==0.2.0
+    # via
+    #   ipyparallel
+    #   notebook
+    #   qtconsole
+ipywidgets==7.6.3
+    # via
+    #   ipydatawidgets
+    #   ipympl
+    #   ipython
+    #   itkwidgets
+    #   pythreejs
+isort==5.5.1
+    # via -r requirements/docker_devel_requirements.in
+itk-core==5.1.2
+    # via
+    #   itk-meshtopolydata
+    #   itk-numerics
+    #   itkwidgets
+itk-filtering==5.1.2
+    # via itkwidgets
+itk-meshtopolydata==0.6.3
+    # via itkwidgets
+itk-numerics==5.1.2
+    # via itk-filtering
+itkwidgets==0.32.0
+    # via -r requirements/docker_devel_requirements.in
+jedi==0.17.2
+    # via ipython
+jinja2==3.0.3
+    # via
+    #   nbconvert
+    #   notebook
+    #   sphinx
+joblib==0.16.0
+    # via scikit-learn
+jsonschema==4.19.0
+    # via nbformat
+jsonschema-specifications==2023.7.1
+    # via jsonschema
+jupyter-client==6.1.7
+    # via
+    #   ipykernel
+    #   ipyparallel
+    #   notebook
+    #   qtconsole
+jupyter-core==4.6.3
+    # via
+    #   jupyter-client
+    #   nbconvert
+    #   nbformat
+    #   notebook
+    #   qtconsole
+jupyterlab-widgets==1.0.0
+    # via ipywidgets
+kiwisolver==1.2.0
+    # via matplotlib
+markdown==3.2.2
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   model-index
+    #   tensorboard
+markdown-it-py==2.2.0
+    # via rich
+markupsafe==2.1.1
+    # via jinja2
+matplotlib==3.1.2
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   ipympl
+    #   itkwidgets
+    #   mmengine
+mdurl==0.1.2
+    # via markdown-it-py
+meshio==4.3.8
+    # via pyvista
+mgzip==0.2.1
+    # via -r requirements/docker_devel_requirements.in
+mistune==0.8.4
+    # via nbconvert
+mmcv @ https://download.openmmlab.com/mmcv/dist/cu111/torch1.10.0/mmcv-2.0.0-cp38-cp38-manylinux1_x86_64.whl
+    # via -r requirements/docker_devel_requirements.in
+mmengine==0.8.2
+    # via mmcv
+model-index==0.1.11
+    # via openmim
+more-itertools==8.5.0
+    # via pytest
+mypy-extensions==0.4.3
+    # via black
+nbconvert==5.6.1
+    # via
+    #   black-nbconvert
+    #   ipython
+    #   notebook
+nbformat==5.2.0
+    # via
+    #   ipython
+    #   ipywidgets
+    #   nbconvert
+    #   notebook
+nevergrad==0.4.3
+    # via -r requirements/docker_devel_requirements.in
+ninja==1.10.0.post1
+    # via -r requirements/docker_devel_requirements.in
+nose==1.3.7
+    # via ipython
+notebook==6.2.0
+    # via
+    #   ipython
+    #   widgetsnbextension
+numpy==1.20.2
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   bayesian-optimization
+    #   cma
+    #   imageio
+    #   ipydatawidgets
+    #   ipython
+    #   itk-meshtopolydata
+    #   itkwidgets
+    #   matplotlib
+    #   meshio
+    #   mmcv
+    #   mmengine
+    #   nevergrad
+    #   opencv-python
+    #   pandas
+    #   pythreejs
+    #   pyvista
+    #   scikit-learn
+    #   scipy
+    #   tensorboard
+oauth2client==4.1.3
+    # via -r requirements/docker_devel_requirements.in
+oauthlib==3.1.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   requests-oauthlib
+opencv-python==3.4.13.47
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   mmcv
+    #   mmengine
+openmim==0.3.7
+    # via -r requirements/docker_devel_requirements.in
+ordered-set==4.1.0
+    # via model-index
+packaging==21.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   bleach
+    #   google-api-core
+    #   mmcv
+    #   pytest
+    #   sphinx
+pandas==1.2.4
+    # via openmim
+pandocfilters==1.4.2
+    # via nbconvert
+param==1.10.1
+    # via
+    #   colorcet
+    #   pyct
+parso==0.7.1
+    # via jedi
+pathspec==0.8.1
+    # via black
+pbr==5.6.0
+    # via
+    #   fixtures
+    #   testtools
+pep517==0.12.0
+    # via pip-tools
+# pexpect==4.8.0
+    # via ipython
+pickleshare==0.7.5
+    # via ipython
+pillow==8.2.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   imageio
+    #   mmcv
+    #   pyvista
+pip-compile-multi==2.4.1
+    # via -r requirements/docker_devel_requirements.in
+pip-tools==6.4.0
+    # via pip-compile-multi
+pkgutil-resolve-name==1.3.10
+    # via jsonschema
+platformdirs==3.9.1
+    # via yapf
+pluggy==0.13.1
+    # via pytest
+prometheus-client==0.8.0
+    # via notebook
+prompt-toolkit==3.0.7
+    # via ipython
+protobuf==3.15.3
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-api-core
+    #   googleapis-common-protos
+    #   tensorboard
+ptyprocess==0.6.0
+    # via
+    #   pexpect
+    #   terminado
+py==1.9.0
+    # via
+    #   pytest
+    #   pytest-forked
+py3nvml==0.2.7
+    # via -r requirements/docker_devel_requirements.in
+py4j==0.10.9
+    # via pyspark
+pyasn1==0.4.8
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   oauth2client
+    #   pyasn1-modules
+    #   rsa
+# pyasn1-modules==0.2.8
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-auth
+    #   oauth2client
+pybind11==2.5.0
+    # via -r requirements/docker_devel_requirements.in
+pycparser==2.20
+    # via cffi
+pyct==0.4.8
+    # via colorcet
+pyflakes==2.2.0
+    # via autoflake
+pygments==2.14.0
+    # via
+    #   ipython
+    #   nbconvert
+    #   qtconsole
+    #   rich
+    #   sphinx
+pyjwt==2.8.0
+    # via -r requirements/docker_devel_requirements.in
+pyparsing==2.4.7
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   httplib2
+    #   matplotlib
+    #   packaging
+pyspark==3.0.1
+    # via -r requirements/docker_devel_requirements.in
+pytest==6.0.1
+    # via
+    #   pytest-forked
+    #   pytest-xdist
+pytest-forked==1.3.0
+    # via pytest-xdist
+pytest-xdist==2.1.0
+    # via -r requirements/docker_devel_requirements.in
+python-dateutil==2.8.2
+    # via
+    #   ipyparallel
+    #   jupyter-client
+    #   matplotlib
+    #   pandas
+python-subunit==1.4.0
+    # via concurrencytest
+pythreejs==2.2.1
+    # via -r requirements/docker_devel_requirements.in
+pytz==2020.1
+    # via
+    #   babel
+    #   google-api-core
+    #   pandas
+pyvista==0.28.1
+    # via -r requirements/docker_devel_requirements.in
+# pyyaml==6.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   mmcv
+    #   mmengine
+    #   model-index
+pyzmq==19.0.2
+    # via
+    #   ipyparallel
+    #   jupyter-client
+    #   notebook
+    #   qtconsole
+qtconsole==4.7.7
+    # via ipython
+qtpy==1.9.0
+    # via qtconsole
+referencing==0.30.2
+    # via
+    #   jsonschema
+    #   jsonschema-specifications
+regex==2020.7.14
+    # via black
+requests==2.31.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-api-core
+    #   google-cloud-storage
+    #   ipython
+    #   openmim
+    #   requests-oauthlib
+    #   sphinx
+    #   tensorboard
+requests-oauthlib==1.3.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-auth-oauthlib
+rich==13.3.3
+    # via
+    #   mmengine
+    #   openmim
+rpds-py==0.10.3
+    # via
+    #   jsonschema
+    #   referencing
+rsa==4.6
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   google-auth
+    #   oauth2client
+scikit-learn==0.23.2
+    # via bayesian-optimization
+scipy==1.5.2
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   bayesian-optimization
+    #   scikit-learn
+scooby==0.5.6
+    # via pyvista
+send2trash==1.5.0
+    # via notebook
+six==1.15.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   absl-py
+    #   argon2-cffi
+    #   bleach
+    #   cycler
+    #   fixtures
+    #   google-api-core
+    #   google-auth
+    #   google-auth-httplib2
+    #   google-cloud-core
+    #   google-resumable-media
+    #   grpcio
+    #   ipydatawidgets
+    #   itkwidgets
+    #   oauth2client
+    #   protobuf
+    #   python-dateutil
+smmap==5.0.0
+    # via gitdb
+snowballstemmer==2.0.0
+    # via sphinx
+sphinx==3.2.1
+    # via ipython
+sphinxcontrib-applehelp==1.0.2
+    # via sphinx
+sphinxcontrib-devhelp==1.0.2
+    # via sphinx
+sphinxcontrib-htmlhelp==1.0.3
+    # via sphinx
+sphinxcontrib-jsmath==1.0.1
+    # via sphinx
+sphinxcontrib-qthelp==1.0.3
+    # via sphinx
+sphinxcontrib-serializinghtml==1.1.4
+    # via sphinx
+tabulate==0.8.10
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   openmim
+tensorboard==2.6.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   -r requirements/docker_devel_requirements.in
+tensorboard-data-server==0.6.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+tensorboard-plugin-wit==1.7.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+termcolor==1.1.0
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   mmengine
+terminado==0.8.3
+    # via notebook
+testpath==0.4.4
+    # via
+    #   ipython
+    #   nbconvert
+testtools==2.5.0
+    # via
+    #   concurrencytest
+    #   fixtures
+    #   python-subunit
+threadpoolctl==2.1.0
+    # via scikit-learn
+toml==0.10.1
+    # via
+    #   black
+    #   pytest
+tomli==2.0.1
+    # via
+    #   pep517
+    #   yapf
+toposort==1.5
+    # via pip-compile-multi
+tornado==6.1
+    # via
+    #   ipykernel
+    #   ipyparallel
+    #   jupyter-client
+    #   notebook
+    #   terminado
+traitlets==5.1.1
+    # via
+    #   ipykernel
+    #   ipyparallel
+    #   ipython
+    #   ipywidgets
+    #   jupyter-client
+    #   jupyter-core
+    #   nbconvert
+    #   nbformat
+    #   notebook
+    #   qtconsole
+    #   traittypes
+traittypes==0.2.1
+    # via ipydatawidgets
+transforms3d==0.3.1
+    # via pyvista
+typing-extensions==4.3.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   gitpython
+    #   nevergrad
+    #   rich
+uritemplate==4.1.1
+    # via google-api-python-client
+urllib3==1.25.10
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   requests
+vtk==9.0.1
+    # via pyvista
+wcwidth==0.2.5
+    # via prompt-toolkit
+webencodings==0.5.1
+    # via bleach
+werkzeug==1.0.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   tensorboard
+wheel==0.37.1
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   -r requirements/docker_devel_requirements.in
+    #   pip-tools
+    #   tensorboard
+widgetsnbextension==3.5.1
+    # via ipywidgets
+xmltodict==0.12.0
+    # via
+    #   -r requirements/docker_devel_requirements.in
+    #   py3nvml
+yapf==0.40.1
+    # via
+    #   mmcv
+    #   mmengine
+zipp==3.16.2
+    # via
+    #   importlib-metadata
+    #   importlib-resources
+zstandard==0.15.1
+    # via itkwidgets
+
+# The following packages are considered to be unsafe in a requirements file:
+pip==21.3.1
+    # via
+    #   openmim
+    #   pip-tools
+setuptools==59.5.0
+    # via
+    #   -c requirements/large_docker_devel_requirements.txt
+    #   -r requirements/docker_devel_requirements.in
+    #   google-api-core
+    #   google-auth
+    #   ipdb
+    #   ipython
+    #   pip-tools
+    #   sphinx
+    #   tensorboard
diff --git a/deployment-examples/terraform_gcp/scripts/entrypoint.sh b/deployment-examples/terraform_gcp/scripts/entrypoint.sh
new file mode 100755
index 0000000..b73f342
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/entrypoint.sh
@@ -0,0 +1,77 @@
+#!/bin/bash
+
+set -eu
+
+BASE_GCR="gcr.io/"
+
+function download_container_if_needed() {
+  local docker_image="$1"
+  local local_image_tag=$(docker images "$docker_image" --format=json | jq -r ".Tag")
+  if [ "$local_image_tag" != "" ]; then
+    # Nothing to do, it's already local.
+    return
+  fi
+  gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io 2>&1 >/dev/null
+  docker pull "$docker_image" -q
+  sync
+}
+
+if [ "$TURBO_CACHE_DOCKER_IMAGE" == "" ]; then
+  echo "TURBO_CACHE_DOCKER_IMAGE env var not set."
+  exit 1
+fi
+
+if [ "$TURBO_CACHE_MEMORY_MB" == "" ]; then
+  echo "TURBO_CACHE_MEMORY_MB env var not set."
+  exit 1
+fi
+
+download_container_if_needed "${BASE_GCR}${TURBO_CACHE_DOCKER_IMAGE}" > /dev/null
+
+RAND_ID="$(uuidgen)"
+ENTRY_SCRIPT="entry_$RAND_ID.sh"
+EXIT_CODE_FILE="exit_code_$RAND_ID.sh"
+cat <<EOF > "$ENTRY_SCRIPT"
+#!/bin/bash
+set -euo pipefail
+
+rm -rf "$ENTRY_SCRIPT"
+
+$(export)
+cd /work
+
+"\$@"
+echo "\$?" > "$EXIT_CODE_FILE"
+EOF
+chmod +x "$ENTRY_SCRIPT"
+
+set +eu
+
+docker run \
+  --name "$RAND_ID" \
+  --mount "type=bind,source=$(realpath .),target=/work" \
+  --workdir "/work" \
+  --memory "${TURBO_CACHE_MEMORY_MB}m" \
+  "${BASE_GCR}${TURBO_CACHE_DOCKER_IMAGE}" \
+  "/work/$ENTRY_SCRIPT" "$@"
+DOCKER_EXIT_CODE="$?"
+
+set -eu
+
+# Remove the docker container when done.
+trap "docker rm \"$RAND_ID\" > /dev/null" EXIT
+
+if [ "$DOCKER_EXIT_CODE" != "0" ]; then
+  OOM_KILLED=$(docker container inspect "$RAND_ID" -f '{{json .State.OOMKilled}}')
+  if [ "$OOM_KILLED" == "true" ]; then
+    echo 'Job exceeded the memory allowance. Try adding: `exec_properties = { "memory_mb": "3600" }` (or higher) to the bazel rule.'
+    exit 1
+  fi
+fi
+
+if [ ! -f "$EXIT_CODE_FILE" ]; then
+  echo "Docker did not exit properly."
+  exit 1
+fi
+
+exit "$(cat $EXIT_CODE_FILE)"
diff --git a/deployment-examples/terraform_gcp/scripts/scheduler.json b/deployment-examples/terraform_gcp/scripts/scheduler.json
new file mode 100644
index 0000000..6c925dc
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/scheduler.json
@@ -0,0 +1,93 @@
+{
+  "stores": {
+    "AC_STORE": {
+      "fast_slow": {
+        "fast": {
+          "memory": {
+            "eviction_policy": {
+              "max_bytes": "${TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT:-100000000}"
+            }
+          }
+        },
+        "slow": {
+          "grpc": {
+            "instance_name": "main",
+            "endpoints": ["grpc://${TURBO_CACHE_CAS_ENDPOINT:-127.0.0.1}:50061"],
+            "store_type": "AC"
+          }
+        }
+      }
+    },
+    "CAS_STORE": {
+      "fast_slow": {
+        "fast": {
+          "memory": {
+            "eviction_policy": {
+              "max_bytes": "${TURBO_CACHE_CAS_MEMORY_CONTENT_LIMIT:-100000000}"
+            }
+          }
+        },
+        "slow": {
+          "grpc": {
+            "instance_name": "main",
+            "endpoints": ["grpc://${TURBO_CACHE_CAS_ENDPOINT:-127.0.0.1}:50061"],
+            "store_type": "CAS"
+          }
+        }
+      }
+    }
+  },
+  "schedulers": {
+    "MAIN_SCHEDULER": {
+      "simple": {
+        "supported_platform_properties": {
+          "cpu_count": "Minimum",
+          "memory_mb": "Minimum",
+          "docker_image": "Priority"
+        }
+      }
+    }
+  },
+  "servers": [{
+    "listen_address": "0.0.0.0:50051",
+    "tls": {
+      "cert_file": "${TURBO_CACHE_CERT_FILE:-}",
+      "key_file": "${TURBO_CACHE_KEY_FILE:-}"
+    },
+    "services": {
+      "ac": {
+        "main": {
+          "ac_store": "AC_STORE"
+        }
+      },
+      "execution": {
+        "main": {
+          "cas_store": "CAS_STORE",
+          "scheduler": "MAIN_SCHEDULER"
+        }
+      },
+      "capabilities": {
+        "main": {
+          "remote_execution": {
+            "scheduler": "MAIN_SCHEDULER"
+          }
+        }
+      }
+    }
+  }, {
+    // Non-public apis.
+    "listen_address": "0.0.0.0:50061",
+    "services": {
+      "prometheus": {
+        "path": "/metrics"
+      },
+      // Note: This should be served on a different port, because it has
+      // a different permission set than the other services.
+      // In other words, this service is a backend api. The ones above
+      // are a frontend api.
+      "worker_api": {
+        "scheduler": "MAIN_SCHEDULER"
+      }
+    }
+  }]
+}
diff --git a/deployment-examples/terraform_gcp/scripts/start_turbo_cache.sh b/deployment-examples/terraform_gcp/scripts/start_turbo_cache.sh
new file mode 100644
index 0000000..9bfcdd4
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/start_turbo_cache.sh
@@ -0,0 +1,122 @@
+#!/bin/bash
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Starts turbo-cache remote execution service.
+#
+# This service will try and figure out what kind of service
+# it should morph into and then configure and launch it.
+
+set -euxo pipefail
+
+function make_certs() {
+    openssl req -nodes -x509 -sha256 -newkey rsa:2048 -keyout $HOME/key.pem -out $HOME/cert.pem -days 356 -subj '/CN=localhost'
+}
+
+# function maybe_setup_docker() {
+#     if zfs list tank/docker; then
+#         return
+#     fi
+#     service docker stop
+#     rm -rf /var/lib/docker/
+#     zfs create \
+#         -V 100G \
+#         -b 8192 \
+#         tank/docker
+#     mkfs.ext4 /dev/zvol/tank/docker
+#     mount /dev/zvol/tank/docker /var/lib/docker
+#     service docker start
+#     gcloud auth configure-docker --quiet
+# }
+
+# Try to mount any volumes if needed. Ignore any errors that might occur.
+~/create_filesystem.sh /mnt/data || true
+
+TYPE=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-type -H "Metadata-Flavor: Google")
+
+TOTAL_TOTAL_MEMORY=$(( $(grep MemTotal /proc/meminfo | awk '{print $2}') * 1000 ))
+TOTAL_DISK_SIZE=$(( $(df /mnt/data | tail -n 1 | awk '{ print $2 }') * 1000 ))
+
+export TURBO_CACHE_CAS_S3_BUCKET=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-cas-bucket -H "Metadata-Flavor: Google")
+export TURBO_CACHE_AC_S3_BUCKET=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-ac-bucket -H "Metadata-Flavor: Google")
+
+# Import our GCP secret envs.
+# source /root/.gcp_secrets
+# export AWS_ENDPOINT_URL=https://storage.googleapis.com
+# export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
+# export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
+
+# maybe_setup_docker
+
+if [ "$TYPE" == "ami_builder" ]; then
+    sleep infinity
+elif [ "$TYPE" == "cas" ]; then
+    make_certs
+    export TURBO_CACHE_CERT_FILE=$HOME/cert.pem
+    export TURBO_CACHE_KEY_FILE=$HOME/key.pem
+
+    # Use ~71% of memory and disk.
+    TOTAL_AVAIL_MEMORY=$(( $TOTAL_TOTAL_MEMORY * 10 / 14 ))
+    TOTAL_AVAIL_DISK_SIZE=$(( ${TOTAL_DISK_SIZE:-0} * 10 / 14 ))
+
+    # 10% goes to AC.
+    export TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 10 ))
+    export TURBO_CACHE_AC_FS_CONTENT_LIMIT=$(( $TOTAL_AVAIL_DISK_SIZE / 10 ))
+    # Remaining goes to CAS.
+    export TURBO_CACHE_CAS_MEMORY_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY - $TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT ))
+    export TURBO_CACHE_CAS_FS_CONTENT_LIMIT=$(( $TOTAL_AVAIL_DISK_SIZE - $TURBO_CACHE_AC_FS_CONTENT_LIMIT ))
+
+    /usr/local/bin/turbo-cache /root/cas.json
+elif [ "$TYPE" == "scheduler" ]; then
+    make_certs
+    export TURBO_CACHE_CERT_FILE=$HOME/cert.pem
+    export TURBO_CACHE_KEY_FILE=$HOME/key.pem
+
+    export TURBO_CACHE_CAS_ENDPOINT=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-internal-cas-endpoint -H "Metadata-Flavor: Google")
+
+    # Use ~83% of memory.
+    TOTAL_AVAIL_MEMORY=$(( $TOTAL_TOTAL_MEMORY * 10 / 12 ))
+    TOTAL_AVAIL_DISK_SIZE=$(( ${TOTAL_DISK_SIZE:-0} * 10 / 12 ))
+
+    # 10% goes to AC.
+    export TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 10 ))
+    # Remaining goes to CAS.
+    export TURBO_CACHE_CAS_MEMORY_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY - $TURBO_CACHE_AC_MEMORY_CONTENT_LIMIT ))
+
+    /usr/local/bin/turbo-cache /root/scheduler.json
+elif [ "$TYPE" == "worker" ]; then
+    gcloud auth configure-docker --quiet
+    export TURBO_CACHE_CAS_ENDPOINT=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-internal-cas-endpoint -H "Metadata-Flavor: Google")
+    export TURBO_CACHE_SCHEDULER_ENDPOINT=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-internal-scheduler-endpoint -H "Metadata-Flavor: Google")
+
+    # We don't cache AC on workers, so ~71% goes to CAS. To leave room for jobs to use disk space too.
+    export TURBO_CACHE_CAS_FS_CONTENT_LIMIT=$(( ${TOTAL_DISK_SIZE:-0} * 10 / 15 ))
+
+    if ! mountpoint /worker ; then
+        mkdir -p /mnt/data
+        mkdir -p /worker
+        mount --bind /mnt/data /worker
+    fi
+
+    if ! mountpoint /var/lib/docker ; then
+        service docker stop
+        umount /var/lib/docker || true
+        rm -rf /var/lib/docker/
+        mkdir -p /mnt/data/docker
+        mkdir -p /var/lib/docker
+        mount --bind /mnt/data/docker /var/lib/docker
+        service docker start
+    fi
+    /usr/local/bin/turbo-cache /root/worker.json
+fi
diff --git a/deployment-examples/terraform_gcp/scripts/turbo-cache.service b/deployment-examples/terraform_gcp/scripts/turbo-cache.service
new file mode 100644
index 0000000..797aba5
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/turbo-cache.service
@@ -0,0 +1,13 @@
+[Unit]
+Description=Turbo Cache remote execution system
+After=network.target
+
+[Service]
+Type=simple
+Restart=always
+RestartSec=1
+User=root
+ExecStart=/root/start_turbo_cache.sh
+
+[Install]
+WantedBy=multi-user.target
diff --git a/deployment-examples/terraform_gcp/scripts/worker.json b/deployment-examples/terraform_gcp/scripts/worker.json
new file mode 100644
index 0000000..59cd46d
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/worker.json
@@ -0,0 +1,73 @@
+{
+  "stores": {
+    "AC_STORE": {
+      "grpc": {
+        "instance_name": "main",
+        "endpoints": ["grpc://${TURBO_CACHE_CAS_ENDPOINT:-127.0.0.1}:50061"],
+        "store_type": "AC"
+      }
+    },
+    "CAS_STORE": {
+      "fast_slow": {
+        "fast": {
+          "filesystem": {
+            "content_path": "/worker/cas/content",
+            "temp_path": "/worker/cas/temp",
+            "eviction_policy": {
+              "max_bytes": "${TURBO_CACHE_CAS_FS_CONTENT_LIMIT:-100000000}"
+            }
+          }
+        },
+        "slow": {
+          "grpc": {
+            "instance_name": "main",
+            "endpoints": ["grpc://${TURBO_CACHE_CAS_ENDPOINT:-127.0.0.1}:50061"],
+            "store_type": "CAS"
+          }
+        }
+      }
+    }
+  },
+  "workers": [{
+    "local": {
+      "worker_api_endpoint": {
+        "uri": "grpc://${TURBO_CACHE_SCHEDULER_ENDPOINT:-127.0.0.1}:50061"
+      },
+      "cas_fast_slow_store": "CAS_STORE",
+      "ac_store": "AC_STORE",
+      "work_directory": "/worker/work",
+      "entrypoint_cmd": "/root/entrypoint.sh",
+      "additional_environment": {
+        "TURBO_CACHE_CPU_COUNT": {
+          "Property": "cpu_count"
+        },
+        "TURBO_CACHE_MEMORY_MB": {
+          "Property": "memory_mb"
+        },
+        "TURBO_CACHE_DOCKER_IMAGE": {
+          "Property": "docker_image"
+        }
+      },
+      "platform_properties": {
+        "cpu_count": {
+          "query_cmd": "nproc"
+        },
+        "memory_mb": {
+          // 1.5GB less for non-turbo-cache resources.
+          "query_cmd": "sh -c \"echo $(( $(free -m | grep Mem | awk '{print $2}') - 1500 ))\""
+        },
+        "docker_image": {
+          "values": [""]
+        }
+      }
+    }
+  }],
+  "servers": [{
+    "listen_address": "0.0.0.0:50061",
+    "services": {
+      "prometheus": {
+        "path": "/metrics"
+      }
+    }
+  }]
+}
diff --git a/deployment-examples/terraform_gcp/scripts/yarn-error.log b/deployment-examples/terraform_gcp/scripts/yarn-error.log
new file mode 100644
index 0000000..04eb6fa
--- /dev/null
+++ b/deployment-examples/terraform_gcp/scripts/yarn-error.log
@@ -0,0 +1,36 @@
+Arguments: 
+  /snap/node/7823/bin/node /usr/local/bin/yarn init
+
+PATH: 
+  /home/allada/miniconda3/bin:/home/allada/miniconda3/condabin:/home/allada/.yarn/bin:/home/allada/.config/yarn/global/node_modules/.bin:/home/allada/.cargo/bin:/home/allada/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+
+Yarn version: 
+  1.22.17
+
+Node version: 
+  18.18.0
+
+Platform: 
+  linux x64
+
+Trace: 
+  Error: canceled
+      at Interface.<anonymous> (/usr/local/lib/node_modules/yarn/lib/cli.js:137143:13)
+      at Interface.emit (node:events:517:28)
+      at [_ttyWrite] [as _ttyWrite] (node:internal/readline/interface:1132:18)
+      at ReadStream.onkeypress (node:internal/readline/interface:271:20)
+      at ReadStream.emit (node:events:517:28)
+      at emitKeys (node:internal/readline/utils:357:14)
+      at emitKeys.next (<anonymous>)
+      at ReadStream.onData (node:internal/readline/emitKeypressEvents:64:36)
+      at ReadStream.emit (node:events:517:28)
+      at addChunk (node:internal/streams/readable:335:12)
+
+npm manifest: 
+  No manifest
+
+yarn manifest: 
+  No manifest
+
+Lockfile: 
+  No lockfile
diff --git a/deployment-examples/terraform_gcp/ssh_keys.tf b/deployment-examples/terraform_gcp/ssh_keys.tf
new file mode 100644
index 0000000..e65c333
--- /dev/null
+++ b/deployment-examples/terraform_gcp/ssh_keys.tf
@@ -0,0 +1,24 @@
+# Copyright 2022 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+resource "tls_private_key" "ssh_key" {
+  algorithm = "ED25519"
+}
+
+data "tls_public_key" "turbo_cache_pem" {
+  private_key_openssh = tls_private_key.ssh_key.private_key_openssh
+  # This is left here for convenience. Comment out the line above and uncomment and modify this
+  # line to use a custom SSH key.
+  # private_key_openssh = file(pathexpand("~/.ssh/id_rsa"))
+}
diff --git a/deployment-examples/terraform_gcp/ssl.tf b/deployment-examples/terraform_gcp/ssl.tf
new file mode 100644
index 0000000..1322805
--- /dev/null
+++ b/deployment-examples/terraform_gcp/ssl.tf
@@ -0,0 +1,16 @@
+resource "google_compute_managed_ssl_certificate" "ssl_certificate" {
+  name    = "turbo-cache-ssl-certificate"
+
+  managed {
+    domains = [
+      "cas.${data.google_dns_managed_zone.dns_zone.dns_name}",
+      "scheduler.${data.google_dns_managed_zone.dns_zone.dns_name}"
+    ]
+  }
+}
+
+resource "google_compute_ssl_policy" "lb_ssl_policy" {
+  name            = "turbo-cache-lb-ssl-policy"
+  min_tls_version = "TLS_1_0"
+  profile         = "COMPATIBLE"
+}
diff --git a/deployment-examples/terraform_gcp/third_wave_deploy.sh b/deployment-examples/terraform_gcp/third_wave_deploy.sh
new file mode 100644
index 0000000..e764fde
--- /dev/null
+++ b/deployment-examples/terraform_gcp/third_wave_deploy.sh
@@ -0,0 +1,113 @@
+#!/bin/bash
+
+sudo DEBIAN_FRONTEND=noninteractive apt-get update
+sudo DEBIAN_FRONTEND=noninteractive apt-get install -y gcc g++ lld libssl-dev pkg-config docker.io jq
+curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+source "$HOME/.cargo/env"
+git clone https://github.com/TraceMachina/turbo-cache.git
+cd turbo-cache
+cargo build --release --bin cas
+sudo mv ./target/release/cas /usr/local/bin/turbo-cache
+
+sudo cp ./deployment-examples/terraform/scripts/scheduler.json /root/scheduler.json
+sudo cp ./deployment-examples/terraform/scripts/cas.json /root/cas.json
+sudo cp ./deployment-examples/terraform/scripts/worker.json /root/worker.json
+sudo cp ./deployment-examples/terraform/scripts/start_turbo_cache.sh /root/start_turbo_cache.sh
+sudo cp ./deployment-examples/terraform/scripts/create_filesystem.sh /root/create_filesystem.sh
+
+cat <<'EOF' | sudo tee /root/start_turbo_cache.sh > /dev/null
+#!/bin/bash
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Starts turbo-cache remote execution service.
+#
+# This service will try and figure out what kind of service
+# it should morph into and then configure and launch it.
+
+set -euxo pipefail
+
+# Try to mount any volumes if needed. Ignore any errors that might occur.
+~/create_filesystem.sh /mnt/data || true
+
+TYPE=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-type -H "Metadata-Flavor: Google")
+
+TOTAL_AVAIL_MEMORY=$(( $(grep MemFree /proc/meminfo | awk '{print $2}') * 10000 / 12 ))
+
+# These environmental variables are used inside the json file resolution.
+# export TURBO_CACHE_AWS_REGION="$AWS_REGION"
+# export TURBO_CACHE_AWS_S3_CAS_BUCKET=$(echo "$TAGS"| jq -r '.Tags[] | select(.Key == "turbo_cache:s3_cas_bucket").Value')
+
+# TYPE=$(echo "$TAGS"| jq -r '.Tags[] | select(.Key == "turbo_cache:instance_type").Value')
+# if [ "$TYPE" == "ami_builder" ]; then
+#     # This instance type is special. It is not used in production, but due to terraform being unable
+#     # to delete/stop instances, we wait for this instance to restart after the AMI is created then
+#     # just terminate it.
+#     aws ec2 terminate-instances --region "$AWS_REGION" --instance-ids "$INSTANCE_ID"
+#     sleep 30 # This is so the service doesn't try to run this script again immediately.
+if [ "$TYPE" == "cas" ]; then
+    # 10% goes to action cache.
+    export TURBO_CACHE_AC_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 10 ))
+    # 5% goes to the index memory cache.
+    export TURBO_CACHE_CAS_INDEX_CACHE_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 20 ))
+    # 85% goes to the content memory cache.
+    export TURBO_CACHE_CAS_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY - $TURBO_CACHE_AC_CONTENT_LIMIT - $TURBO_CACHE_CAS_INDEX_CACHE_LIMIT ))
+
+    /usr/local/bin/turbo-cache /root/cas.json
+elif [ "$TYPE" == "scheduler" ]; then
+    # 10% goes to action cache.
+    export TURBO_CACHE_AC_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 10 ))
+    # 5% goes to the index memory cache.
+    export TURBO_CACHE_CAS_INDEX_CACHE_LIMIT=$(( $TOTAL_AVAIL_MEMORY / 20 ))
+    # 85% goes to the content memory cache.
+    export TURBO_CACHE_CAS_CONTENT_LIMIT=$(( $TOTAL_AVAIL_MEMORY - $TURBO_CACHE_AC_CONTENT_LIMIT - $TURBO_CACHE_CAS_INDEX_CACHE_LIMIT ))
+
+    /usr/local/bin/turbo-cache /root/scheduler.json
+elif [ "$TYPE" == "worker" ]; then
+    export SCHEDULER_ENDPOINT=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/turbo-cache-scheduler -H "Metadata-Flavor: Google")
+    DISK_SIZE=$(df /mnt/data | tail -n 1 | awk '{ print $2 }')
+
+    # This is used inside the "worker.json" file.
+    export MAX_WORKER_DISK_USAGE=$(( DISK_SIZE * 100 / 125  )) # Leave about 20% disk space for active tasks.
+
+    mkdir -p /mnt/data
+    mkdir -p /worker
+    mount --bind /mnt/data /worker
+    /usr/local/bin/turbo-cache /root/worker.json
+fi
+EOF
+
+sudo chmod +x /root/start_turbo_cache.sh
+
+cat <<'EOT' | sudo tee /etc/systemd/system/turbo-cache.service > /dev/null
+[Unit]
+Description=Turbo Cache remote execution system
+After=network.target
+
+[Service]
+Type=simple
+Restart=always
+RestartSec=1
+User=root
+ExecStart=/root/start_turbo_cache.sh
+
+[Install]
+WantedBy=multi-user.target
+EOT
+
+# sudo systemctl enable turbo-cache
+
+sync
+
+# Now create image "tubo-cache-image" as disk
diff --git a/deployment-examples/terraform_gcp/variables.tf b/deployment-examples/terraform_gcp/variables.tf
new file mode 100644
index 0000000..ebc4ec1
--- /dev/null
+++ b/deployment-examples/terraform_gcp/variables.tf
@@ -0,0 +1,46 @@
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# variable "base_domain" {
+#   description = "Base domain name of existing Route53 hosted zone. Subdomains will be added to this zone."
+#   default     = "turbo-cache.demo.allada.com"
+# }
+
+# variable "cas_domain_prefix" {
+#   description = "This will be the DNS name of the cas suffixed with `var.domain`. You may use dot notation to add more sub-domains. Example: `cas.{var.base_domain}`."
+#   default     = "cas"
+# }
+
+# variable "scheduler_domain_prefix" {
+#   description = "This will be the DNS name of the scheduler suffixed with `var.domain`. You may use dot notation to add more sub-domains. Example: `cas.{var.base_domain}`."
+#   default     = "scheduler"
+# }
+
+variable "gcp_project_id" {
+  description = "Google Cloud project ID."
+  # default     = "turbo-cache-gcp-test7"
+  default = "twa-rbe"
+}
+
+variable "gcp_region" {
+  description = "Google Cloud region."
+  # default     = "us-central1"
+  default = "us-west1"
+}
+
+variable "gcp_zone" {
+  description = "Google Cloud zone."
+  # default     = "us-central1-c"
+  default = "us-west1-b"
+}
diff --git a/deployment-examples/terraform_gcp/vpc.tf b/deployment-examples/terraform_gcp/vpc.tf
new file mode 100644
index 0000000..c77135e
--- /dev/null
+++ b/deployment-examples/terraform_gcp/vpc.tf
@@ -0,0 +1,39 @@
+# Copyright 2023 The Turbo Cache Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# resource "google_compute_network" "internal_network" {
+#   name = "turbo-cache-internal-network"
+#   auto_create_subnetworks = false
+# }
+# # resource "google_compute_subnetwork" "proxy_only_subnet" {
+# #   name = "turbo-cache-proxy-only-subnet"
+# #   region = var.gcp_region
+# # }
+
+# resource "google_compute_subnetwork" "proxy_subnet" {
+#   name          = "turbo-cache-proxy-subnet"
+#   ip_cidr_range = "172.16.0.0/16"
+#   region        = var.gcp_region
+#   purpose       = "REGIONAL_MANAGED_PROXY"
+#   role          = "ACTIVE"
+#   network       = google_compute_network.internal_network.id
+# }
+
+# # backend subnet
+# resource "google_compute_subnetwork" "internal_subnet" {
+#   name          = "turbo-cache-default-subnet"
+#   ip_cidr_range = "172.17.0.0/16"
+#   region        = var.gcp_region
+#   network       = google_compute_network.internal_network.id
+# }
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/compute_autoscaler.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/compute_autoscaler.tf
new file mode 100755
index 0000000..bcac3c2
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/compute_autoscaler.tf
@@ -0,0 +1,59 @@
+resource "google_compute_autoscaler" "tfer--us-central1-c-002F-turbo-cache-cas-instance-group" {
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    cpu_utilization {
+      predictive_method = "NONE"
+      target            = "0.6"
+    }
+
+    max_replicas = "10"
+    min_replicas = "1"
+    mode         = "OFF"
+  }
+
+  name    = "turbo-cache-cas-instance-group"
+  project = "turbo-cache-gcp-test"
+  target  = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c/instanceGroupManagers/turbo-cache-cas-instance-group"
+  zone    = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c"
+}
+
+resource "google_compute_autoscaler" "tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group" {
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    cpu_utilization {
+      predictive_method = "NONE"
+      target            = "0.6"
+    }
+
+    max_replicas = "10"
+    min_replicas = "0"
+    mode         = "OFF"
+  }
+
+  name    = "turbo-cache-scheduler-instance-group"
+  project = "turbo-cache-gcp-test"
+  target  = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c/instanceGroupManagers/turbo-cache-scheduler-instance-group"
+  zone    = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c"
+}
+
+resource "google_compute_autoscaler" "tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group" {
+  autoscaling_policy {
+    cooldown_period = "60"
+
+    cpu_utilization {
+      predictive_method = "NONE"
+      target            = "0.6"
+    }
+
+    max_replicas = "10"
+    min_replicas = "1"
+    mode         = "OFF"
+  }
+
+  name    = "turbo-cache-x86-cpu-worker-instance-group"
+  project = "turbo-cache-gcp-test"
+  target  = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c/instanceGroupManagers/turbo-cache-x86-cpu-worker-instance-group"
+  zone    = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/outputs.tf
new file mode 100755
index 0000000..46b165c
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/outputs.tf
@@ -0,0 +1,11 @@
+output "google_compute_autoscaler_tfer--us-central1-c-002F-turbo-cache-cas-instance-group_self_link" {
+  value = "${google_compute_autoscaler.tfer--us-central1-c-002F-turbo-cache-cas-instance-group.self_link}"
+}
+
+output "google_compute_autoscaler_tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group_self_link" {
+  value = "${google_compute_autoscaler.tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group.self_link}"
+}
+
+output "google_compute_autoscaler_tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group_self_link" {
+  value = "${google_compute_autoscaler.tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/autoscalers/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/compute_backend_service.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/compute_backend_service.tf
new file mode 100755
index 0000000..ec55324
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/compute_backend_service.tf
@@ -0,0 +1,85 @@
+resource "google_compute_backend_service" "tfer--turbo-cache-cas-backend-service" {
+  affinity_cookie_ttl_sec = "0"
+
+  backend {
+    balancing_mode               = "UTILIZATION"
+    capacity_scaler              = "1"
+    group                        = "${data.terraform_remote_state.instanceGroupManagers.outputs.google_compute_instance_group_manager_tfer--turbo-cache-cas-instance-group_instance_group}"
+    max_connections              = "0"
+    max_connections_per_endpoint = "0"
+    max_connections_per_instance = "0"
+    max_rate                     = "0"
+    max_rate_per_endpoint        = "0"
+    max_rate_per_instance        = "0"
+    max_utilization              = "0.8"
+  }
+
+  connection_draining_timeout_sec = "300"
+  enable_cdn                      = "false"
+  health_checks                   = ["${data.terraform_remote_state.healthChecks.outputs.google_compute_health_check_tfer--turbo-cache-cas-health-checker_self_link}"]
+  load_balancing_scheme           = "EXTERNAL_MANAGED"
+  locality_lb_policy              = "ROUND_ROBIN"
+
+  log_config {
+    enable      = "false"
+    sample_rate = "0"
+  }
+
+  name             = "turbo-cache-cas-backend-service"
+  port_name        = "cas"
+  project          = "turbo-cache-gcp-test"
+  protocol         = "HTTP"
+  session_affinity = "NONE"
+  timeout_sec      = "30"
+}
+
+resource "google_compute_backend_service" "tfer--turbo-cache-scheduler-backend-service" {
+  affinity_cookie_ttl_sec = "0"
+
+  backend {
+    balancing_mode               = "RATE"
+    capacity_scaler              = "1"
+    group                        = "${data.terraform_remote_state.instanceGroupManagers.outputs.google_compute_instance_group_manager_tfer--turbo-cache-scheduler-instance-group_instance_group}"
+    max_connections              = "0"
+    max_connections_per_endpoint = "0"
+    max_connections_per_instance = "0"
+    max_rate                     = "0"
+    max_rate_per_endpoint        = "0"
+    max_rate_per_instance        = "100000"
+    max_utilization              = "0"
+  }
+
+  cdn_policy {
+    cache_key_policy {
+      include_host         = "true"
+      include_protocol     = "true"
+      include_query_string = "true"
+    }
+
+    cache_mode                   = "CACHE_ALL_STATIC"
+    client_ttl                   = "3600"
+    default_ttl                  = "3600"
+    max_ttl                      = "86400"
+    negative_caching             = "false"
+    serve_while_stale            = "0"
+    signed_url_cache_max_age_sec = "0"
+  }
+
+  connection_draining_timeout_sec = "300"
+  enable_cdn                      = "false"
+  health_checks                   = ["${data.terraform_remote_state.healthChecks.outputs.google_compute_health_check_tfer--turbo-cache-scheduler-health-checker_self_link}"]
+  load_balancing_scheme           = "EXTERNAL_MANAGED"
+  locality_lb_policy              = "ROUND_ROBIN"
+
+  log_config {
+    enable      = "false"
+    sample_rate = "0"
+  }
+
+  name             = "turbo-cache-scheduler-backend-service"
+  port_name        = "scheduler"
+  project          = "turbo-cache-gcp-test"
+  protocol         = "HTTP"
+  session_affinity = "NONE"
+  timeout_sec      = "30"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/outputs.tf
new file mode 100755
index 0000000..2e0111e
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_backend_service_tfer--turbo-cache-cas-backend-service_self_link" {
+  value = "${google_compute_backend_service.tfer--turbo-cache-cas-backend-service.self_link}"
+}
+
+output "google_compute_backend_service_tfer--turbo-cache-scheduler-backend-service_self_link" {
+  value = "${google_compute_backend_service.tfer--turbo-cache-scheduler-backend-service.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/variables.tf
new file mode 100755
index 0000000..cff277c
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/backendServices/us-central1/variables.tf
@@ -0,0 +1,23 @@
+data "terraform_remote_state" "healthChecks" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/healthChecks/us-central1/terraform.tfstate"
+  }
+}
+
+data "terraform_remote_state" "instanceGroupManagers" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/terraform.tfstate"
+  }
+}
+
+data "terraform_remote_state" "regionInstanceGroupManagers" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/regionInstanceGroupManagers/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/compute_disk.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/compute_disk.tf
new file mode 100755
index 0000000..12cade3
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/compute_disk.tf
@@ -0,0 +1,9 @@
+resource "google_compute_disk" "tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group-5520-1" {
+  name                      = "turbo-cache-x86-cpu-worker-instance-group-5520-1"
+  physical_block_size_bytes = "4096"
+  project                   = "turbo-cache-gcp-test"
+  provisioned_iops          = "0"
+  size                      = "100"
+  type                      = "pd-standard"
+  zone                      = "us-central1-c"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/outputs.tf
new file mode 100755
index 0000000..faf2bc2
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/outputs.tf
@@ -0,0 +1,3 @@
+output "google_compute_disk_tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group-5520-1_self_link" {
+  value = "${google_compute_disk.tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group-5520-1.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/disks/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_managed_zone.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_managed_zone.tf
new file mode 100755
index 0000000..a6ce1d9
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_managed_zone.tf
@@ -0,0 +1,7 @@
+resource "google_dns_managed_zone" "tfer--turbo-cache-dns-zone" {
+  dns_name      = "thirdwave.allada.com."
+  force_destroy = "false"
+  name          = "turbo-cache-dns-zone"
+  project       = "turbo-cache-gcp-test"
+  visibility    = "public"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_record_set.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_record_set.tf
new file mode 100755
index 0000000..e8d37ef
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/dns_record_set.tf
@@ -0,0 +1,44 @@
+resource "google_dns_record_set" "tfer--turbo-cache-dns-zone_cas-002E-thirdwave-002E-allada-002E-com-002E--A" {
+  managed_zone = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.name"
+  name         = "cas.google_dns_managed_zone.tfer--turbo-cache-dns-zone.dns_name"
+  project      = "turbo-cache-gcp-test"
+  rrdatas      = ["34.149.105.12"]
+  ttl          = "300"
+  type         = "A"
+}
+
+resource "google_dns_record_set" "tfer--turbo-cache-dns-zone_internal-002E-scheduler-002E-thirdwave-002E-allada-002E-com-002E--A" {
+  managed_zone = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.name"
+  name         = "internal.scheduler.google_dns_managed_zone.tfer--turbo-cache-dns-zone.dns_name"
+  project      = "turbo-cache-gcp-test"
+  rrdatas      = ["10.128.0.14"]
+  ttl          = "300"
+  type         = "A"
+}
+
+resource "google_dns_record_set" "tfer--turbo-cache-dns-zone_scheduler-002E-thirdwave-002E-allada-002E-com-002E--A" {
+  managed_zone = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.name"
+  name         = "scheduler.google_dns_managed_zone.tfer--turbo-cache-dns-zone.dns_name"
+  project      = "turbo-cache-gcp-test"
+  rrdatas      = ["34.120.162.95"]
+  ttl          = "300"
+  type         = "A"
+}
+
+resource "google_dns_record_set" "tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--NS" {
+  managed_zone = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.name"
+  name         = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.dns_name"
+  project      = "turbo-cache-gcp-test"
+  rrdatas      = ["ns-cloud-b1.googledomains.com.", "ns-cloud-b2.googledomains.com.", "ns-cloud-b3.googledomains.com.", "ns-cloud-b4.googledomains.com."]
+  ttl          = "21600"
+  type         = "NS"
+}
+
+resource "google_dns_record_set" "tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--SOA" {
+  managed_zone = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.name"
+  name         = "google_dns_managed_zone.tfer--turbo-cache-dns-zone.dns_name"
+  project      = "turbo-cache-gcp-test"
+  rrdatas      = ["ns-cloud-b1.googledomains.com. cloud-dns-hostmaster.google.com. 1 21600 3600 259200 300"]
+  ttl          = "21600"
+  type         = "SOA"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/outputs.tf
new file mode 100755
index 0000000..bd9f1b2
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/outputs.tf
@@ -0,0 +1,23 @@
+output "google_dns_managed_zone_tfer--turbo-cache-dns-zone_id" {
+  value = "${google_dns_managed_zone.tfer--turbo-cache-dns-zone.id}"
+}
+
+output "google_dns_record_set_tfer--turbo-cache-dns-zone_cas-002E-thirdwave-002E-allada-002E-com-002E--A_id" {
+  value = "${google_dns_record_set.tfer--turbo-cache-dns-zone_cas-002E-thirdwave-002E-allada-002E-com-002E--A.id}"
+}
+
+output "google_dns_record_set_tfer--turbo-cache-dns-zone_internal-002E-scheduler-002E-thirdwave-002E-allada-002E-com-002E--A_id" {
+  value = "${google_dns_record_set.tfer--turbo-cache-dns-zone_internal-002E-scheduler-002E-thirdwave-002E-allada-002E-com-002E--A.id}"
+}
+
+output "google_dns_record_set_tfer--turbo-cache-dns-zone_scheduler-002E-thirdwave-002E-allada-002E-com-002E--A_id" {
+  value = "${google_dns_record_set.tfer--turbo-cache-dns-zone_scheduler-002E-thirdwave-002E-allada-002E-com-002E--A.id}"
+}
+
+output "google_dns_record_set_tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--NS_id" {
+  value = "${google_dns_record_set.tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--NS.id}"
+}
+
+output "google_dns_record_set_tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--SOA_id" {
+  value = "${google_dns_record_set.tfer--turbo-cache-dns-zone_thirdwave-002E-allada-002E-com-002E--SOA.id}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/dns/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/compute_firewall.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/compute_firewall.tf
new file mode 100755
index 0000000..26a99d4
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/compute_firewall.tf
@@ -0,0 +1,131 @@
+resource "google_compute_firewall" "tfer--default-allow-health-check" {
+  allow {
+    protocol = "tcp"
+  }
+
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-health-check"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "1000"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["130.211.0.0/22", "209.85.152.0/22", "209.85.204.0/22", "35.191.0.0/16"]
+  target_tags   = ["lb-health-check"]
+}
+
+resource "google_compute_firewall" "tfer--default-allow-health-check-ipv6" {
+  allow {
+    protocol = "tcp"
+  }
+
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-health-check-ipv6"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "1000"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["2600:1901:8001::/48", "2600:2d00:1:b029::/64"]
+  target_tags   = ["lb-health-check"]
+}
+
+resource "google_compute_firewall" "tfer--default-allow-icmp" {
+  allow {
+    protocol = "icmp"
+  }
+
+  description   = "Allow ICMP from anywhere"
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-icmp"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "65534"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["0.0.0.0/0"]
+}
+
+resource "google_compute_firewall" "tfer--default-allow-internal" {
+  allow {
+    ports    = ["0-65535"]
+    protocol = "tcp"
+  }
+
+  allow {
+    ports    = ["0-65535"]
+    protocol = "udp"
+  }
+
+  allow {
+    protocol = "icmp"
+  }
+
+  description   = "Allow internal traffic on the default network"
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-internal"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "65534"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["10.128.0.0/9"]
+}
+
+resource "google_compute_firewall" "tfer--default-allow-rdp" {
+  allow {
+    ports    = ["3389"]
+    protocol = "tcp"
+  }
+
+  description   = "Allow RDP from anywhere"
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-rdp"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "65534"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["0.0.0.0/0"]
+}
+
+resource "google_compute_firewall" "tfer--default-allow-ssh" {
+  allow {
+    ports    = ["22"]
+    protocol = "tcp"
+  }
+
+  description   = "Allow SSH from anywhere"
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "default-allow-ssh"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "65534"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["0.0.0.0/0"]
+}
+
+resource "google_compute_firewall" "tfer--turbo-cache-cas-firewall-rule" {
+  allow {
+    ports    = ["50051-50052"]
+    protocol = "tcp"
+  }
+
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "turbo-cache-cas-firewall-rule"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "1000"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["10.0.0.0/8"]
+}
+
+resource "google_compute_firewall" "tfer--turbo-cache-internal-worker-api-firewall-rule" {
+  allow {
+    ports    = ["50061"]
+    protocol = "tcp"
+  }
+
+  direction     = "INGRESS"
+  disabled      = "false"
+  name          = "turbo-cache-internal-worker-api-firewall-rule"
+  network       = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority      = "1000"
+  project       = "turbo-cache-gcp-test"
+  source_ranges = ["0.0.0.0"]
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/outputs.tf
new file mode 100755
index 0000000..3183297
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/outputs.tf
@@ -0,0 +1,31 @@
+output "google_compute_firewall_tfer--default-allow-health-check-ipv6_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-health-check-ipv6.self_link}"
+}
+
+output "google_compute_firewall_tfer--default-allow-health-check_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-health-check.self_link}"
+}
+
+output "google_compute_firewall_tfer--default-allow-icmp_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-icmp.self_link}"
+}
+
+output "google_compute_firewall_tfer--default-allow-internal_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-internal.self_link}"
+}
+
+output "google_compute_firewall_tfer--default-allow-rdp_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-rdp.self_link}"
+}
+
+output "google_compute_firewall_tfer--default-allow-ssh_self_link" {
+  value = "${google_compute_firewall.tfer--default-allow-ssh.self_link}"
+}
+
+output "google_compute_firewall_tfer--turbo-cache-cas-firewall-rule_self_link" {
+  value = "${google_compute_firewall.tfer--turbo-cache-cas-firewall-rule.self_link}"
+}
+
+output "google_compute_firewall_tfer--turbo-cache-internal-worker-api-firewall-rule_self_link" {
+  value = "${google_compute_firewall.tfer--turbo-cache-internal-worker-api-firewall-rule.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/variables.tf
new file mode 100755
index 0000000..79a424a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/firewall/us-central1/variables.tf
@@ -0,0 +1,7 @@
+data "terraform_remote_state" "networks" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/networks/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/compute_global_forwarding_rule.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/compute_global_forwarding_rule.tf
new file mode 100755
index 0000000..e9741aa
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/compute_global_forwarding_rule.tf
@@ -0,0 +1,21 @@
+resource "google_compute_global_forwarding_rule" "tfer--turbo-cache-cas-load-balancer" {
+  ip_address            = "34.149.105.12"
+  ip_protocol           = "TCP"
+  ip_version            = "IPV4"
+  load_balancing_scheme = "EXTERNAL_MANAGED"
+  name                  = "turbo-cache-cas-load-balancer"
+  port_range            = "443-443"
+  project               = "turbo-cache-gcp-test"
+  target                = "${data.terraform_remote_state.targetHttpsProxies.outputs.google_compute_target_https_proxy_tfer--turbo-cache-cas-load-balancer-target-proxy_self_link}"
+}
+
+resource "google_compute_global_forwarding_rule" "tfer--turbo-cache-scheduler-frontned-ip-port" {
+  ip_address            = "34.120.162.95"
+  ip_protocol           = "TCP"
+  ip_version            = "IPV4"
+  load_balancing_scheme = "EXTERNAL_MANAGED"
+  name                  = "turbo-cache-scheduler-frontned-ip-port"
+  port_range            = "443-443"
+  project               = "turbo-cache-gcp-test"
+  target                = "${data.terraform_remote_state.targetHttpsProxies.outputs.google_compute_target_https_proxy_tfer--turbo-cache-scheduler-load-bal-target-proxy_self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/outputs.tf
new file mode 100755
index 0000000..1c4c6ce
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_global_forwarding_rule_tfer--turbo-cache-cas-load-balancer_self_link" {
+  value = "${google_compute_global_forwarding_rule.tfer--turbo-cache-cas-load-balancer.self_link}"
+}
+
+output "google_compute_global_forwarding_rule_tfer--turbo-cache-scheduler-frontned-ip-port_self_link" {
+  value = "${google_compute_global_forwarding_rule.tfer--turbo-cache-scheduler-frontned-ip-port.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/variables.tf
new file mode 100755
index 0000000..5f398d3
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/globalForwardingRules/us-central1/variables.tf
@@ -0,0 +1,23 @@
+data "terraform_remote_state" "targetHttpProxies" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/targetHttpProxies/us-central1/terraform.tfstate"
+  }
+}
+
+data "terraform_remote_state" "targetHttpsProxies" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/terraform.tfstate"
+  }
+}
+
+data "terraform_remote_state" "targetSslProxies" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/targetSslProxies/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/compute_health_check.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/compute_health_check.tf
new file mode 100755
index 0000000..d60c747
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/compute_health_check.tf
@@ -0,0 +1,41 @@
+resource "google_compute_health_check" "tfer--turbo-cache-cas-health-checker" {
+  check_interval_sec = "5"
+  healthy_threshold  = "2"
+
+  http_health_check {
+    port         = "50051"
+    proxy_header = "NONE"
+    request_path = "/status"
+    response     = "Ok"
+  }
+
+  log_config {
+    enable = "false"
+  }
+
+  name                = "turbo-cache-cas-health-checker"
+  project             = "turbo-cache-gcp-test"
+  timeout_sec         = "5"
+  unhealthy_threshold = "2"
+}
+
+resource "google_compute_health_check" "tfer--turbo-cache-scheduler-health-checker" {
+  check_interval_sec = "5"
+  healthy_threshold  = "2"
+
+  http_health_check {
+    port         = "50052"
+    proxy_header = "NONE"
+    request_path = "/status"
+    response     = "Ok"
+  }
+
+  log_config {
+    enable = "false"
+  }
+
+  name                = "turbo-cache-scheduler-health-checker"
+  project             = "turbo-cache-gcp-test"
+  timeout_sec         = "5"
+  unhealthy_threshold = "2"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/outputs.tf
new file mode 100755
index 0000000..87e3bac
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_health_check_tfer--turbo-cache-cas-health-checker_self_link" {
+  value = "${google_compute_health_check.tfer--turbo-cache-cas-health-checker.self_link}"
+}
+
+output "google_compute_health_check_tfer--turbo-cache-scheduler-health-checker_self_link" {
+  value = "${google_compute_health_check.tfer--turbo-cache-scheduler-health-checker.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/healthChecks/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/compute_image.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/compute_image.tf
new file mode 100755
index 0000000..994ca13
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/compute_image.tf
@@ -0,0 +1,32 @@
+resource "google_compute_image" "tfer--base-image-2" {
+  disk_size_gb = "10"
+
+  guest_os_features {
+    type = "GVNIC"
+  }
+
+  guest_os_features {
+    type = "SEV_CAPABLE"
+  }
+
+  guest_os_features {
+    type = "SEV_LIVE_MIGRATABLE"
+  }
+
+  guest_os_features {
+    type = "SEV_SNP_CAPABLE"
+  }
+
+  guest_os_features {
+    type = "UEFI_COMPATIBLE"
+  }
+
+  guest_os_features {
+    type = "VIRTIO_SCSI_MULTIQUEUE"
+  }
+
+  licenses    = ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-2204-lts"]
+  name        = "base-image-2"
+  project     = "turbo-cache-gcp-test"
+  source_disk = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/zones/us-central1-c/disks/instance-1"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/outputs.tf
new file mode 100755
index 0000000..dc5d713
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/outputs.tf
@@ -0,0 +1,3 @@
+output "google_compute_image_tfer--base-image-2_self_link" {
+  value = "${google_compute_image.tfer--base-image-2.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/images/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/compute_instance_group_manager.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/compute_instance_group_manager.tf
new file mode 100755
index 0000000..0f45220
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/compute_instance_group_manager.tf
@@ -0,0 +1,88 @@
+resource "google_compute_instance_group_manager" "tfer--turbo-cache-cas-instance-group" {
+  base_instance_name = "turbo-cache-cas-instance-group"
+  name               = "turbo-cache-cas-instance-group"
+
+  named_port {
+    name = "cas"
+    port = "50051"
+  }
+
+  project     = "turbo-cache-gcp-test"
+  target_size = "0"
+
+  update_policy {
+    max_surge_fixed         = "1"
+    max_surge_percent       = "0"
+    max_unavailable_fixed   = "1"
+    max_unavailable_percent = "0"
+    minimal_action          = "REPLACE"
+    replacement_method      = "SUBSTITUTE"
+    type                    = "OPPORTUNISTIC"
+  }
+
+  version {
+    instance_template = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/regions/us-central1/instanceTemplates/turbo-cache-cas-instance-template-3"
+  }
+
+  wait_for_instances_status = "STABLE"
+  zone                      = "us-central1-c"
+}
+
+resource "google_compute_instance_group_manager" "tfer--turbo-cache-scheduler-instance-group" {
+  auto_healing_policies {
+    health_check      = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/healthChecks/turbo-cache-scheduler-health-checker"
+    initial_delay_sec = "300"
+  }
+
+  base_instance_name = "turbo-cache-scheduler-instance-group"
+  name               = "turbo-cache-scheduler-instance-group"
+
+  named_port {
+    name = "scheduler"
+    port = "50052"
+  }
+
+  project     = "turbo-cache-gcp-test"
+  target_size = "0"
+
+  update_policy {
+    max_surge_fixed         = "1"
+    max_surge_percent       = "0"
+    max_unavailable_fixed   = "1"
+    max_unavailable_percent = "0"
+    minimal_action          = "REPLACE"
+    replacement_method      = "SUBSTITUTE"
+    type                    = "OPPORTUNISTIC"
+  }
+
+  version {
+    instance_template = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/regions/us-central1/instanceTemplates/turbo-cache-scheduler-instance-template-1"
+  }
+
+  wait_for_instances_status = "STABLE"
+  zone                      = "us-central1-c"
+}
+
+resource "google_compute_instance_group_manager" "tfer--turbo-cache-x86-cpu-worker-instance-group" {
+  base_instance_name = "turbo-cache-x86-cpu-worker-instance-group"
+  name               = "turbo-cache-x86-cpu-worker-instance-group"
+  project            = "turbo-cache-gcp-test"
+  target_size        = "0"
+
+  update_policy {
+    max_surge_fixed         = "1"
+    max_surge_percent       = "0"
+    max_unavailable_fixed   = "1"
+    max_unavailable_percent = "0"
+    minimal_action          = "REPLACE"
+    replacement_method      = "SUBSTITUTE"
+    type                    = "OPPORTUNISTIC"
+  }
+
+  version {
+    instance_template = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/regions/us-central1/instanceTemplates/turbo-cache-x86-cpu-worker-instance-template-3"
+  }
+
+  wait_for_instances_status = "STABLE"
+  zone                      = "us-central1-c"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/outputs.tf
new file mode 100755
index 0000000..b232ac6
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/outputs.tf
@@ -0,0 +1,23 @@
+output "google_compute_instance_group_manager_tfer--turbo-cache-cas-instance-group_instance_group" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-cas-instance-group.instance_group}"
+}
+
+output "google_compute_instance_group_manager_tfer--turbo-cache-cas-instance-group_self_link" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-cas-instance-group.self_link}"
+}
+
+output "google_compute_instance_group_manager_tfer--turbo-cache-scheduler-instance-group_instance_group" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-scheduler-instance-group.instance_group}"
+}
+
+output "google_compute_instance_group_manager_tfer--turbo-cache-scheduler-instance-group_self_link" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-scheduler-instance-group.self_link}"
+}
+
+output "google_compute_instance_group_manager_tfer--turbo-cache-x86-cpu-worker-instance-group_instance_group" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-x86-cpu-worker-instance-group.instance_group}"
+}
+
+output "google_compute_instance_group_manager_tfer--turbo-cache-x86-cpu-worker-instance-group_self_link" {
+  value = "${google_compute_instance_group_manager.tfer--turbo-cache-x86-cpu-worker-instance-group.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroupManagers/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/compute_instance_group.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/compute_instance_group.tf
new file mode 100755
index 0000000..d72c705
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/compute_instance_group.tf
@@ -0,0 +1,35 @@
+resource "google_compute_instance_group" "tfer--us-central1-c-002F-turbo-cache-cas-instance-group" {
+  description = "This instance group is controlled by Instance Group Manager 'turbo-cache-cas-instance-group'. To modify instances in this group, use the Instance Group Manager API: https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers"
+  name        = "turbo-cache-cas-instance-group"
+
+  named_port {
+    name = "cas"
+    port = "50051"
+  }
+
+  network = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/networks/default"
+  project = "turbo-cache-gcp-test"
+  zone    = "us-central1-c"
+}
+
+resource "google_compute_instance_group" "tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group" {
+  description = "This instance group is controlled by Instance Group Manager 'turbo-cache-scheduler-instance-group'. To modify instances in this group, use the Instance Group Manager API: https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers"
+  name        = "turbo-cache-scheduler-instance-group"
+
+  named_port {
+    name = "scheduler"
+    port = "50052"
+  }
+
+  network = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/networks/default"
+  project = "turbo-cache-gcp-test"
+  zone    = "us-central1-c"
+}
+
+resource "google_compute_instance_group" "tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group" {
+  description = "This instance group is controlled by Instance Group Manager 'turbo-cache-x86-cpu-worker-instance-group'. To modify instances in this group, use the Instance Group Manager API: https://cloud.google.com/compute/docs/reference/latest/instanceGroupManagers"
+  name        = "turbo-cache-x86-cpu-worker-instance-group"
+  network     = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/networks/default"
+  project     = "turbo-cache-gcp-test"
+  zone        = "us-central1-c"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/outputs.tf
new file mode 100755
index 0000000..73deaad
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/outputs.tf
@@ -0,0 +1,11 @@
+output "google_compute_instance_group_tfer--us-central1-c-002F-turbo-cache-cas-instance-group_self_link" {
+  value = "${google_compute_instance_group.tfer--us-central1-c-002F-turbo-cache-cas-instance-group.self_link}"
+}
+
+output "google_compute_instance_group_tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group_self_link" {
+  value = "${google_compute_instance_group.tfer--us-central1-c-002F-turbo-cache-scheduler-instance-group.self_link}"
+}
+
+output "google_compute_instance_group_tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group_self_link" {
+  value = "${google_compute_instance_group.tfer--us-central1-c-002F-turbo-cache-x86-cpu-worker-instance-group.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/variables.tf
new file mode 100755
index 0000000..7f9ebe1
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceGroups/us-central1/variables.tf
@@ -0,0 +1,7 @@
+data "terraform_remote_state" "instanceTemplates" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/instanceTemplates/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceTemplates/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceTemplates/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/instanceTemplates/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/compute_network.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/compute_network.tf
new file mode 100755
index 0000000..95fd90a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/compute_network.tf
@@ -0,0 +1,18 @@
+resource "google_compute_network" "tfer--default" {
+  auto_create_subnetworks         = "true"
+  delete_default_routes_on_create = "false"
+  description                     = "Default network for the project"
+  mtu                             = "0"
+  name                            = "default"
+  project                         = "turbo-cache-gcp-test"
+  routing_mode                    = "REGIONAL"
+}
+
+resource "google_compute_network" "tfer--turbo-cache-vpc-network" {
+  auto_create_subnetworks         = "true"
+  delete_default_routes_on_create = "false"
+  mtu                             = "0"
+  name                            = "turbo-cache-vpc-network"
+  project                         = "turbo-cache-gcp-test"
+  routing_mode                    = "REGIONAL"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/outputs.tf
new file mode 100755
index 0000000..17e5c84
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_network_tfer--default_self_link" {
+  value = "${google_compute_network.tfer--default.self_link}"
+}
+
+output "google_compute_network_tfer--turbo-cache-vpc-network_self_link" {
+  value = "${google_compute_network.tfer--turbo-cache-vpc-network.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/networks/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/outputs.tf
new file mode 100755
index 0000000..47f7d37
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/outputs.tf
@@ -0,0 +1,3 @@
+output "google_project_tfer--turbo-cache-gcp-test_id" {
+  value = "${google_project.tfer--turbo-cache-gcp-test.id}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/project.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/project.tf
new file mode 100755
index 0000000..06956fe
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/project.tf
@@ -0,0 +1,3 @@
+resource "google_project" "tfer--turbo-cache-gcp-test" {
+  auto_create_network = "true"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/project/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/compute_route.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/compute_route.tf
new file mode 100755
index 0000000..cfdb16e
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/compute_route.tf
@@ -0,0 +1,748 @@
+resource "google_compute_route" "tfer--default-route-0019527cca558235" {
+  description = "Default local route to the subnetwork 10.128.0.0/20."
+  dest_range  = "10.128.0.0/20"
+  name        = "default-route-0019527cca558235"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-04c1b0461a872b50" {
+  description = "Default local route to the subnetwork 10.140.0.0/20."
+  dest_range  = "10.140.0.0/20"
+  name        = "default-route-04c1b0461a872b50"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-0b4fa768ed09fd63" {
+  description = "Default local route to the subnetwork 10.128.0.0/20."
+  dest_range  = "10.128.0.0/20"
+  name        = "default-route-0b4fa768ed09fd63"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-0d27a7767931ab21" {
+  description = "Default local route to the subnetwork 10.190.0.0/20."
+  dest_range  = "10.190.0.0/20"
+  name        = "default-route-0d27a7767931ab21"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-0f62af207fbbdeff" {
+  description = "Default local route to the subnetwork 10.99.0.0/16."
+  dest_range  = "10.99.0.0/16"
+  name        = "default-route-0f62af207fbbdeff"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-11450d73af23b415" {
+  description = "Default local route to the subnetwork 10.202.0.0/20."
+  dest_range  = "10.202.0.0/20"
+  name        = "default-route-11450d73af23b415"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-123bbb3ec39ce3b3" {
+  description = "Default local route to the subnetwork 10.214.0.0/20."
+  dest_range  = "10.214.0.0/20"
+  name        = "default-route-123bbb3ec39ce3b3"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-130fbf8b17229194" {
+  description      = "Default route to the Internet."
+  dest_range       = "0.0.0.0/0"
+  name             = "default-route-130fbf8b17229194"
+  network          = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  next_hop_gateway = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/gateways/default-internet-gateway"
+  priority         = "1000"
+  project          = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-1a8c70096159cee2" {
+  description = "Default local route to the subnetwork 10.204.0.0/20."
+  dest_range  = "10.204.0.0/20"
+  name        = "default-route-1a8c70096159cee2"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-209443d4543a5d15" {
+  description = "Default local route to the subnetwork 10.146.0.0/20."
+  dest_range  = "10.146.0.0/20"
+  name        = "default-route-209443d4543a5d15"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-20b9ce9655acfeca" {
+  description = "Default local route to the subnetwork 10.148.0.0/20."
+  dest_range  = "10.148.0.0/20"
+  name        = "default-route-20b9ce9655acfeca"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-23f238ee89feeb70" {
+  description = "Default local route to the subnetwork 10.174.0.0/20."
+  dest_range  = "10.174.0.0/20"
+  name        = "default-route-23f238ee89feeb70"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-2ac230117cd1df88" {
+  description = "Default local route to the subnetwork 10.212.0.0/20."
+  dest_range  = "10.212.0.0/20"
+  name        = "default-route-2ac230117cd1df88"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-2d82f980db9deb5a" {
+  description = "Default local route to the subnetwork 10.190.0.0/20."
+  dest_range  = "10.190.0.0/20"
+  name        = "default-route-2d82f980db9deb5a"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-32bd1b1dee5e163e" {
+  description = "Default local route to the subnetwork 10.156.0.0/20."
+  dest_range  = "10.156.0.0/20"
+  name        = "default-route-32bd1b1dee5e163e"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-3b020815222f933d" {
+  description = "Default local route to the subnetwork 10.152.0.0/20."
+  dest_range  = "10.152.0.0/20"
+  name        = "default-route-3b020815222f933d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-43ee4e5c9e3993a8" {
+  description = "Default local route to the subnetwork 10.154.0.0/20."
+  dest_range  = "10.154.0.0/20"
+  name        = "default-route-43ee4e5c9e3993a8"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-49c894ede0b94c37" {
+  description = "Default local route to the subnetwork 10.174.0.0/20."
+  dest_range  = "10.174.0.0/20"
+  name        = "default-route-49c894ede0b94c37"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-4a5838035d7c0501" {
+  description      = "Default route to the Internet."
+  dest_range       = "0.0.0.0/0"
+  name             = "default-route-4a5838035d7c0501"
+  network          = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  next_hop_gateway = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/gateways/default-internet-gateway"
+  priority         = "1000"
+  project          = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-4ed1d3861121ddd7" {
+  description = "Default local route to the subnetwork 10.192.0.0/20."
+  dest_range  = "10.192.0.0/20"
+  name        = "default-route-4ed1d3861121ddd7"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-569760f171824cc3" {
+  description = "Default local route to the subnetwork 10.188.0.0/20."
+  dest_range  = "10.188.0.0/20"
+  name        = "default-route-569760f171824cc3"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-584b0d0f47ece219" {
+  description = "Default local route to the subnetwork 10.216.0.0/20."
+  dest_range  = "10.216.0.0/20"
+  name        = "default-route-584b0d0f47ece219"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-5c571d83169d07eb" {
+  description = "Default local route to the subnetwork 10.162.0.0/20."
+  dest_range  = "10.162.0.0/20"
+  name        = "default-route-5c571d83169d07eb"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-60f44ad6c23f0432" {
+  description = "Default local route to the subnetwork 10.140.0.0/20."
+  dest_range  = "10.140.0.0/20"
+  name        = "default-route-60f44ad6c23f0432"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-63027ceaa856854e" {
+  description = "Default local route to the subnetwork 10.206.0.0/20."
+  dest_range  = "10.206.0.0/20"
+  name        = "default-route-63027ceaa856854e"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-6404671ccb4d7c2f" {
+  description = "Default local route to the subnetwork 10.206.0.0/20."
+  dest_range  = "10.206.0.0/20"
+  name        = "default-route-6404671ccb4d7c2f"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-6405745abb835128" {
+  description = "Default local route to the subnetwork 10.202.0.0/20."
+  dest_range  = "10.202.0.0/20"
+  name        = "default-route-6405745abb835128"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-6a80746134bf063d" {
+  description = "Default local route to the subnetwork 10.142.0.0/20."
+  dest_range  = "10.142.0.0/20"
+  name        = "default-route-6a80746134bf063d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-71a2fa72cf1c6db1" {
+  description = "Default local route to the subnetwork 10.196.0.0/20."
+  dest_range  = "10.196.0.0/20"
+  name        = "default-route-71a2fa72cf1c6db1"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-7322eec5b40e307a" {
+  description = "Default local route to the subnetwork 10.184.0.0/20."
+  dest_range  = "10.184.0.0/20"
+  name        = "default-route-7322eec5b40e307a"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-747ae95436e6d3cc" {
+  description = "Default local route to the subnetwork 10.168.0.0/20."
+  dest_range  = "10.168.0.0/20"
+  name        = "default-route-747ae95436e6d3cc"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-74b3ac5836647410" {
+  description = "Default local route to the subnetwork 10.138.0.0/20."
+  dest_range  = "10.138.0.0/20"
+  name        = "default-route-74b3ac5836647410"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-7597643f93464df5" {
+  description = "Default local route to the subnetwork 10.180.0.0/20."
+  dest_range  = "10.180.0.0/20"
+  name        = "default-route-7597643f93464df5"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-75f842656d4b6f97" {
+  description = "Default local route to the subnetwork 10.198.0.0/20."
+  dest_range  = "10.198.0.0/20"
+  name        = "default-route-75f842656d4b6f97"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-78dba8d625549dc5" {
+  description = "Default local route to the subnetwork 10.212.0.0/20."
+  dest_range  = "10.212.0.0/20"
+  name        = "default-route-78dba8d625549dc5"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-78f4795a0885e98b" {
+  description = "Default local route to the subnetwork 10.160.0.0/20."
+  dest_range  = "10.160.0.0/20"
+  name        = "default-route-78f4795a0885e98b"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-7b5630320aefa2af" {
+  description = "Default local route to the subnetwork 10.182.0.0/20."
+  dest_range  = "10.182.0.0/20"
+  name        = "default-route-7b5630320aefa2af"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-811e27ead9653a85" {
+  description = "Default local route to the subnetwork 10.182.0.0/20."
+  dest_range  = "10.182.0.0/20"
+  name        = "default-route-811e27ead9653a85"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-81d94c40e4b0296d" {
+  description = "Default local route to the subnetwork 10.178.0.0/20."
+  dest_range  = "10.178.0.0/20"
+  name        = "default-route-81d94c40e4b0296d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-88b2b1507351cbdd" {
+  description = "Default local route to the subnetwork 10.164.0.0/20."
+  dest_range  = "10.164.0.0/20"
+  name        = "default-route-88b2b1507351cbdd"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-932d9bdcf55c85aa" {
+  description = "Default local route to the subnetwork 10.166.0.0/20."
+  dest_range  = "10.166.0.0/20"
+  name        = "default-route-932d9bdcf55c85aa"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-944d73c3bbe4a542" {
+  description = "Default local route to the subnetwork 10.172.0.0/20."
+  dest_range  = "10.172.0.0/20"
+  name        = "default-route-944d73c3bbe4a542"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-94b68415dd658b77" {
+  description = "Default local route to the subnetwork 10.170.0.0/20."
+  dest_range  = "10.170.0.0/20"
+  name        = "default-route-94b68415dd658b77"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-977f4717c5fbc87e" {
+  description = "Default local route to the subnetwork 10.158.0.0/20."
+  dest_range  = "10.158.0.0/20"
+  name        = "default-route-977f4717c5fbc87e"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-9c23b905591382cd" {
+  description = "Default local route to the subnetwork 10.164.0.0/20."
+  dest_range  = "10.164.0.0/20"
+  name        = "default-route-9c23b905591382cd"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-a16b0daf6b88178f" {
+  description = "Default local route to the subnetwork 10.156.0.0/20."
+  dest_range  = "10.156.0.0/20"
+  name        = "default-route-a16b0daf6b88178f"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-a36d64d39b876f97" {
+  description = "Default local route to the subnetwork 10.186.0.0/20."
+  dest_range  = "10.186.0.0/20"
+  name        = "default-route-a36d64d39b876f97"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-a4e3a84be3161c8d" {
+  description = "Default local route to the subnetwork 10.170.0.0/20."
+  dest_range  = "10.170.0.0/20"
+  name        = "default-route-a4e3a84be3161c8d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ab048d63612ba245" {
+  description = "Default local route to the subnetwork 10.172.0.0/20."
+  dest_range  = "10.172.0.0/20"
+  name        = "default-route-ab048d63612ba245"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ab39b87b212a8fbe" {
+  description = "Default local route to the subnetwork 10.158.0.0/20."
+  dest_range  = "10.158.0.0/20"
+  name        = "default-route-ab39b87b212a8fbe"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ab9385ef85d6dc28" {
+  description = "Default local route to the subnetwork 10.154.0.0/20."
+  dest_range  = "10.154.0.0/20"
+  name        = "default-route-ab9385ef85d6dc28"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-abdcf310bfbcc666" {
+  description = "Default local route to the subnetwork 10.138.0.0/20."
+  dest_range  = "10.138.0.0/20"
+  name        = "default-route-abdcf310bfbcc666"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ae6256954a08a830" {
+  description = "Default local route to the subnetwork 10.132.0.0/20."
+  dest_range  = "10.132.0.0/20"
+  name        = "default-route-ae6256954a08a830"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-b2708d57016f4f2a" {
+  description = "Default local route to the subnetwork 10.210.0.0/20."
+  dest_range  = "10.210.0.0/20"
+  name        = "default-route-b2708d57016f4f2a"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-b6e5571795be85be" {
+  description = "Default local route to the subnetwork 10.194.0.0/20."
+  dest_range  = "10.194.0.0/20"
+  name        = "default-route-b6e5571795be85be"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-b8bd8288f34b3af1" {
+  description = "Default local route to the subnetwork 10.216.0.0/20."
+  dest_range  = "10.216.0.0/20"
+  name        = "default-route-b8bd8288f34b3af1"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ba7e250887fc459f" {
+  description = "Default local route to the subnetwork 10.166.0.0/20."
+  dest_range  = "10.166.0.0/20"
+  name        = "default-route-ba7e250887fc459f"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-bd809d27e9e38ec7" {
+  description = "Default local route to the subnetwork 10.132.0.0/20."
+  dest_range  = "10.132.0.0/20"
+  name        = "default-route-bd809d27e9e38ec7"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-bde6f6e56d9db8f0" {
+  description = "Default local route to the subnetwork 10.186.0.0/20."
+  dest_range  = "10.186.0.0/20"
+  name        = "default-route-bde6f6e56d9db8f0"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-be9f9751c6838016" {
+  description = "Default local route to the subnetwork 10.146.0.0/20."
+  dest_range  = "10.146.0.0/20"
+  name        = "default-route-be9f9751c6838016"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-bf9aa3cfa955dabe" {
+  description = "Default local route to the subnetwork 10.208.0.0/20."
+  dest_range  = "10.208.0.0/20"
+  name        = "default-route-bf9aa3cfa955dabe"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-c3a3c7b942e4668b" {
+  description = "Default local route to the subnetwork 10.196.0.0/20."
+  dest_range  = "10.196.0.0/20"
+  name        = "default-route-c3a3c7b942e4668b"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-c4c0aedd05649e09" {
+  description = "Default local route to the subnetwork 10.160.0.0/20."
+  dest_range  = "10.160.0.0/20"
+  name        = "default-route-c4c0aedd05649e09"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-c5b7159a556b3b73" {
+  description = "Default local route to the subnetwork 10.200.0.0/20."
+  dest_range  = "10.200.0.0/20"
+  name        = "default-route-c5b7159a556b3b73"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-c7392ed4ed916150" {
+  description = "Default local route to the subnetwork 10.214.0.0/20."
+  dest_range  = "10.214.0.0/20"
+  name        = "default-route-c7392ed4ed916150"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-cbd3a22d4d33724c" {
+  description = "Default local route to the subnetwork 10.188.0.0/20."
+  dest_range  = "10.188.0.0/20"
+  name        = "default-route-cbd3a22d4d33724c"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-cd8deeb48c8faaab" {
+  description = "Default local route to the subnetwork 10.150.0.0/20."
+  dest_range  = "10.150.0.0/20"
+  name        = "default-route-cd8deeb48c8faaab"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-cdb382bdea58f8dc" {
+  description = "Default local route to the subnetwork 10.194.0.0/20."
+  dest_range  = "10.194.0.0/20"
+  name        = "default-route-cdb382bdea58f8dc"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-d8d9dd1063724e9b" {
+  description = "Default local route to the subnetwork 10.204.0.0/20."
+  dest_range  = "10.204.0.0/20"
+  name        = "default-route-d8d9dd1063724e9b"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-dc9fea81f7d63c95" {
+  description = "Default local route to the subnetwork 10.208.0.0/20."
+  dest_range  = "10.208.0.0/20"
+  name        = "default-route-dc9fea81f7d63c95"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-ddad1406950e05c3" {
+  description = "Default local route to the subnetwork 10.148.0.0/20."
+  dest_range  = "10.148.0.0/20"
+  name        = "default-route-ddad1406950e05c3"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-dde7e7d6f77ee8e9" {
+  description = "Default local route to the subnetwork 10.178.0.0/20."
+  dest_range  = "10.178.0.0/20"
+  name        = "default-route-dde7e7d6f77ee8e9"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-de2aaf11809bd4d5" {
+  description = "Default local route to the subnetwork 10.142.0.0/20."
+  dest_range  = "10.142.0.0/20"
+  name        = "default-route-de2aaf11809bd4d5"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-dfea5d2d870107c0" {
+  description = "Default local route to the subnetwork 10.150.0.0/20."
+  dest_range  = "10.150.0.0/20"
+  name        = "default-route-dfea5d2d870107c0"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-e7bb08c2376e687d" {
+  description = "Default local route to the subnetwork 10.184.0.0/20."
+  dest_range  = "10.184.0.0/20"
+  name        = "default-route-e7bb08c2376e687d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-e7da7ae7c709f674" {
+  description = "Default local route to the subnetwork 10.192.0.0/20."
+  dest_range  = "10.192.0.0/20"
+  name        = "default-route-e7da7ae7c709f674"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-e804a95236a48a39" {
+  description = "Default local route to the subnetwork 10.162.0.0/20."
+  dest_range  = "10.162.0.0/20"
+  name        = "default-route-e804a95236a48a39"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-f2e9e10d836e018d" {
+  description = "Default local route to the subnetwork 10.152.0.0/20."
+  dest_range  = "10.152.0.0/20"
+  name        = "default-route-f2e9e10d836e018d"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-f38935219ca1d61b" {
+  description = "Default local route to the subnetwork 10.168.0.0/20."
+  dest_range  = "10.168.0.0/20"
+  name        = "default-route-f38935219ca1d61b"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-f41a3502199084a7" {
+  description = "Default local route to the subnetwork 10.198.0.0/20."
+  dest_range  = "10.198.0.0/20"
+  name        = "default-route-f41a3502199084a7"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-f633ad749f51f2f5" {
+  description = "Default local route to the subnetwork 10.180.0.0/20."
+  dest_range  = "10.180.0.0/20"
+  name        = "default-route-f633ad749f51f2f5"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-fa2e97cfe590fe04" {
+  description = "Default local route to the subnetwork 10.200.0.0/20."
+  dest_range  = "10.200.0.0/20"
+  name        = "default-route-fa2e97cfe590fe04"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_route" "tfer--default-route-fc87f4918ddb7405" {
+  description = "Default local route to the subnetwork 10.210.0.0/20."
+  dest_range  = "10.210.0.0/20"
+  name        = "default-route-fc87f4918ddb7405"
+  network     = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  priority    = "0"
+  project     = "turbo-cache-gcp-test"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/outputs.tf
new file mode 100755
index 0000000..976adce
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/outputs.tf
@@ -0,0 +1,331 @@
+output "google_compute_route_tfer--default-route-0019527cca558235_self_link" {
+  value = "${google_compute_route.tfer--default-route-0019527cca558235.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-04c1b0461a872b50_self_link" {
+  value = "${google_compute_route.tfer--default-route-04c1b0461a872b50.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-0b4fa768ed09fd63_self_link" {
+  value = "${google_compute_route.tfer--default-route-0b4fa768ed09fd63.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-0d27a7767931ab21_self_link" {
+  value = "${google_compute_route.tfer--default-route-0d27a7767931ab21.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-0f62af207fbbdeff_self_link" {
+  value = "${google_compute_route.tfer--default-route-0f62af207fbbdeff.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-11450d73af23b415_self_link" {
+  value = "${google_compute_route.tfer--default-route-11450d73af23b415.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-123bbb3ec39ce3b3_self_link" {
+  value = "${google_compute_route.tfer--default-route-123bbb3ec39ce3b3.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-130fbf8b17229194_self_link" {
+  value = "${google_compute_route.tfer--default-route-130fbf8b17229194.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-1a8c70096159cee2_self_link" {
+  value = "${google_compute_route.tfer--default-route-1a8c70096159cee2.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-209443d4543a5d15_self_link" {
+  value = "${google_compute_route.tfer--default-route-209443d4543a5d15.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-20b9ce9655acfeca_self_link" {
+  value = "${google_compute_route.tfer--default-route-20b9ce9655acfeca.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-23f238ee89feeb70_self_link" {
+  value = "${google_compute_route.tfer--default-route-23f238ee89feeb70.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-2ac230117cd1df88_self_link" {
+  value = "${google_compute_route.tfer--default-route-2ac230117cd1df88.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-2d82f980db9deb5a_self_link" {
+  value = "${google_compute_route.tfer--default-route-2d82f980db9deb5a.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-32bd1b1dee5e163e_self_link" {
+  value = "${google_compute_route.tfer--default-route-32bd1b1dee5e163e.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-3b020815222f933d_self_link" {
+  value = "${google_compute_route.tfer--default-route-3b020815222f933d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-43ee4e5c9e3993a8_self_link" {
+  value = "${google_compute_route.tfer--default-route-43ee4e5c9e3993a8.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-49c894ede0b94c37_self_link" {
+  value = "${google_compute_route.tfer--default-route-49c894ede0b94c37.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-4a5838035d7c0501_self_link" {
+  value = "${google_compute_route.tfer--default-route-4a5838035d7c0501.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-4ed1d3861121ddd7_self_link" {
+  value = "${google_compute_route.tfer--default-route-4ed1d3861121ddd7.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-569760f171824cc3_self_link" {
+  value = "${google_compute_route.tfer--default-route-569760f171824cc3.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-584b0d0f47ece219_self_link" {
+  value = "${google_compute_route.tfer--default-route-584b0d0f47ece219.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-5c571d83169d07eb_self_link" {
+  value = "${google_compute_route.tfer--default-route-5c571d83169d07eb.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-60f44ad6c23f0432_self_link" {
+  value = "${google_compute_route.tfer--default-route-60f44ad6c23f0432.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-63027ceaa856854e_self_link" {
+  value = "${google_compute_route.tfer--default-route-63027ceaa856854e.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-6404671ccb4d7c2f_self_link" {
+  value = "${google_compute_route.tfer--default-route-6404671ccb4d7c2f.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-6405745abb835128_self_link" {
+  value = "${google_compute_route.tfer--default-route-6405745abb835128.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-6a80746134bf063d_self_link" {
+  value = "${google_compute_route.tfer--default-route-6a80746134bf063d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-71a2fa72cf1c6db1_self_link" {
+  value = "${google_compute_route.tfer--default-route-71a2fa72cf1c6db1.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-7322eec5b40e307a_self_link" {
+  value = "${google_compute_route.tfer--default-route-7322eec5b40e307a.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-747ae95436e6d3cc_self_link" {
+  value = "${google_compute_route.tfer--default-route-747ae95436e6d3cc.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-74b3ac5836647410_self_link" {
+  value = "${google_compute_route.tfer--default-route-74b3ac5836647410.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-7597643f93464df5_self_link" {
+  value = "${google_compute_route.tfer--default-route-7597643f93464df5.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-75f842656d4b6f97_self_link" {
+  value = "${google_compute_route.tfer--default-route-75f842656d4b6f97.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-78dba8d625549dc5_self_link" {
+  value = "${google_compute_route.tfer--default-route-78dba8d625549dc5.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-78f4795a0885e98b_self_link" {
+  value = "${google_compute_route.tfer--default-route-78f4795a0885e98b.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-7b5630320aefa2af_self_link" {
+  value = "${google_compute_route.tfer--default-route-7b5630320aefa2af.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-811e27ead9653a85_self_link" {
+  value = "${google_compute_route.tfer--default-route-811e27ead9653a85.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-81d94c40e4b0296d_self_link" {
+  value = "${google_compute_route.tfer--default-route-81d94c40e4b0296d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-88b2b1507351cbdd_self_link" {
+  value = "${google_compute_route.tfer--default-route-88b2b1507351cbdd.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-932d9bdcf55c85aa_self_link" {
+  value = "${google_compute_route.tfer--default-route-932d9bdcf55c85aa.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-944d73c3bbe4a542_self_link" {
+  value = "${google_compute_route.tfer--default-route-944d73c3bbe4a542.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-94b68415dd658b77_self_link" {
+  value = "${google_compute_route.tfer--default-route-94b68415dd658b77.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-977f4717c5fbc87e_self_link" {
+  value = "${google_compute_route.tfer--default-route-977f4717c5fbc87e.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-9c23b905591382cd_self_link" {
+  value = "${google_compute_route.tfer--default-route-9c23b905591382cd.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-a16b0daf6b88178f_self_link" {
+  value = "${google_compute_route.tfer--default-route-a16b0daf6b88178f.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-a36d64d39b876f97_self_link" {
+  value = "${google_compute_route.tfer--default-route-a36d64d39b876f97.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-a4e3a84be3161c8d_self_link" {
+  value = "${google_compute_route.tfer--default-route-a4e3a84be3161c8d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ab048d63612ba245_self_link" {
+  value = "${google_compute_route.tfer--default-route-ab048d63612ba245.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ab39b87b212a8fbe_self_link" {
+  value = "${google_compute_route.tfer--default-route-ab39b87b212a8fbe.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ab9385ef85d6dc28_self_link" {
+  value = "${google_compute_route.tfer--default-route-ab9385ef85d6dc28.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-abdcf310bfbcc666_self_link" {
+  value = "${google_compute_route.tfer--default-route-abdcf310bfbcc666.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ae6256954a08a830_self_link" {
+  value = "${google_compute_route.tfer--default-route-ae6256954a08a830.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-b2708d57016f4f2a_self_link" {
+  value = "${google_compute_route.tfer--default-route-b2708d57016f4f2a.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-b6e5571795be85be_self_link" {
+  value = "${google_compute_route.tfer--default-route-b6e5571795be85be.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-b8bd8288f34b3af1_self_link" {
+  value = "${google_compute_route.tfer--default-route-b8bd8288f34b3af1.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ba7e250887fc459f_self_link" {
+  value = "${google_compute_route.tfer--default-route-ba7e250887fc459f.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-bd809d27e9e38ec7_self_link" {
+  value = "${google_compute_route.tfer--default-route-bd809d27e9e38ec7.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-bde6f6e56d9db8f0_self_link" {
+  value = "${google_compute_route.tfer--default-route-bde6f6e56d9db8f0.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-be9f9751c6838016_self_link" {
+  value = "${google_compute_route.tfer--default-route-be9f9751c6838016.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-bf9aa3cfa955dabe_self_link" {
+  value = "${google_compute_route.tfer--default-route-bf9aa3cfa955dabe.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-c3a3c7b942e4668b_self_link" {
+  value = "${google_compute_route.tfer--default-route-c3a3c7b942e4668b.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-c4c0aedd05649e09_self_link" {
+  value = "${google_compute_route.tfer--default-route-c4c0aedd05649e09.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-c5b7159a556b3b73_self_link" {
+  value = "${google_compute_route.tfer--default-route-c5b7159a556b3b73.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-c7392ed4ed916150_self_link" {
+  value = "${google_compute_route.tfer--default-route-c7392ed4ed916150.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-cbd3a22d4d33724c_self_link" {
+  value = "${google_compute_route.tfer--default-route-cbd3a22d4d33724c.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-cd8deeb48c8faaab_self_link" {
+  value = "${google_compute_route.tfer--default-route-cd8deeb48c8faaab.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-cdb382bdea58f8dc_self_link" {
+  value = "${google_compute_route.tfer--default-route-cdb382bdea58f8dc.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-d8d9dd1063724e9b_self_link" {
+  value = "${google_compute_route.tfer--default-route-d8d9dd1063724e9b.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-dc9fea81f7d63c95_self_link" {
+  value = "${google_compute_route.tfer--default-route-dc9fea81f7d63c95.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-ddad1406950e05c3_self_link" {
+  value = "${google_compute_route.tfer--default-route-ddad1406950e05c3.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-dde7e7d6f77ee8e9_self_link" {
+  value = "${google_compute_route.tfer--default-route-dde7e7d6f77ee8e9.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-de2aaf11809bd4d5_self_link" {
+  value = "${google_compute_route.tfer--default-route-de2aaf11809bd4d5.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-dfea5d2d870107c0_self_link" {
+  value = "${google_compute_route.tfer--default-route-dfea5d2d870107c0.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-e7bb08c2376e687d_self_link" {
+  value = "${google_compute_route.tfer--default-route-e7bb08c2376e687d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-e7da7ae7c709f674_self_link" {
+  value = "${google_compute_route.tfer--default-route-e7da7ae7c709f674.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-e804a95236a48a39_self_link" {
+  value = "${google_compute_route.tfer--default-route-e804a95236a48a39.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-f2e9e10d836e018d_self_link" {
+  value = "${google_compute_route.tfer--default-route-f2e9e10d836e018d.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-f38935219ca1d61b_self_link" {
+  value = "${google_compute_route.tfer--default-route-f38935219ca1d61b.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-f41a3502199084a7_self_link" {
+  value = "${google_compute_route.tfer--default-route-f41a3502199084a7.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-f633ad749f51f2f5_self_link" {
+  value = "${google_compute_route.tfer--default-route-f633ad749f51f2f5.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-fa2e97cfe590fe04_self_link" {
+  value = "${google_compute_route.tfer--default-route-fa2e97cfe590fe04.self_link}"
+}
+
+output "google_compute_route_tfer--default-route-fc87f4918ddb7405_self_link" {
+  value = "${google_compute_route.tfer--default-route-fc87f4918ddb7405.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/variables.tf
new file mode 100755
index 0000000..79a424a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/routes/us-central1/variables.tf
@@ -0,0 +1,7 @@
+data "terraform_remote_state" "networks" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/networks/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/compute_managed_ssl_certificate.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/compute_managed_ssl_certificate.tf
new file mode 100755
index 0000000..8c24987
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/compute_managed_ssl_certificate.tf
@@ -0,0 +1,23 @@
+resource "google_compute_managed_ssl_certificate" "tfer--tubo-cache-cas-certificate" {
+  certificate_id = "3833669532178429162"
+
+  managed {
+    domains = ["cas.thirdwave.allada.com"]
+  }
+
+  name    = "tubo-cache-cas-certificate"
+  project = "turbo-cache-gcp-test"
+  type    = "MANAGED"
+}
+
+resource "google_compute_managed_ssl_certificate" "tfer--turbo-cache-scheduler-certificate" {
+  certificate_id = "455339997646259500"
+
+  managed {
+    domains = ["scheduler.thirdwave.allada.com"]
+  }
+
+  name    = "turbo-cache-scheduler-certificate"
+  project = "turbo-cache-gcp-test"
+  type    = "MANAGED"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/outputs.tf
new file mode 100755
index 0000000..0a7652b
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_managed_ssl_certificate_tfer--tubo-cache-cas-certificate_self_link" {
+  value = "${google_compute_managed_ssl_certificate.tfer--tubo-cache-cas-certificate.self_link}"
+}
+
+output "google_compute_managed_ssl_certificate_tfer--turbo-cache-scheduler-certificate_self_link" {
+  value = "${google_compute_managed_ssl_certificate.tfer--turbo-cache-scheduler-certificate.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslCertificates/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/compute_ssl_policy.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/compute_ssl_policy.tf
new file mode 100755
index 0000000..412a9dd
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/compute_ssl_policy.tf
@@ -0,0 +1,13 @@
+resource "google_compute_ssl_policy" "tfer--turbo-cache-cas-ssl-policy" {
+  min_tls_version = "TLS_1_0"
+  name            = "turbo-cache-cas-ssl-policy"
+  profile         = "COMPATIBLE"
+  project         = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_ssl_policy" "tfer--turbo-cache-scheduler-ssl-policy" {
+  min_tls_version = "TLS_1_0"
+  name            = "turbo-cache-scheduler-ssl-policy"
+  profile         = "COMPATIBLE"
+  project         = "turbo-cache-gcp-test"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/outputs.tf
new file mode 100755
index 0000000..51552d1
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_ssl_policy_tfer--turbo-cache-cas-ssl-policy_self_link" {
+  value = "${google_compute_ssl_policy.tfer--turbo-cache-cas-ssl-policy.self_link}"
+}
+
+output "google_compute_ssl_policy_tfer--turbo-cache-scheduler-ssl-policy_self_link" {
+  value = "${google_compute_ssl_policy.tfer--turbo-cache-scheduler-ssl-policy.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/sslPolicies/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/compute_subnetwork.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/compute_subnetwork.tf
new file mode 100755
index 0000000..5cf6984
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/compute_subnetwork.tf
@@ -0,0 +1,35 @@
+resource "google_compute_subnetwork" "tfer--default" {
+  ip_cidr_range              = "10.128.0.0/20"
+  name                       = "default"
+  network                    = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  private_ip_google_access   = "false"
+  private_ipv6_google_access = "DISABLE_GOOGLE_ACCESS"
+  project                    = "turbo-cache-gcp-test"
+  purpose                    = "PRIVATE"
+  region                     = "us-central1"
+  stack_type                 = "IPV4_ONLY"
+}
+
+resource "google_compute_subnetwork" "tfer--test" {
+  ip_cidr_range              = "10.99.0.0/16"
+  name                       = "test"
+  network                    = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--default_self_link}"
+  private_ip_google_access   = "false"
+  private_ipv6_google_access = "DISABLE_GOOGLE_ACCESS"
+  project                    = "turbo-cache-gcp-test"
+  purpose                    = "REGIONAL_MANAGED_PROXY"
+  region                     = "us-central1"
+  role                       = "ACTIVE"
+}
+
+resource "google_compute_subnetwork" "tfer--turbo-cache-vpc-network" {
+  ip_cidr_range              = "10.128.0.0/20"
+  name                       = "turbo-cache-vpc-network"
+  network                    = "${data.terraform_remote_state.networks.outputs.google_compute_network_tfer--turbo-cache-vpc-network_self_link}"
+  private_ip_google_access   = "false"
+  private_ipv6_google_access = "DISABLE_GOOGLE_ACCESS"
+  project                    = "turbo-cache-gcp-test"
+  purpose                    = "PRIVATE"
+  region                     = "us-central1"
+  stack_type                 = "IPV4_ONLY"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/outputs.tf
new file mode 100755
index 0000000..318bcc3
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/outputs.tf
@@ -0,0 +1,11 @@
+output "google_compute_subnetwork_tfer--default_self_link" {
+  value = "${google_compute_subnetwork.tfer--default.self_link}"
+}
+
+output "google_compute_subnetwork_tfer--test_self_link" {
+  value = "${google_compute_subnetwork.tfer--test.self_link}"
+}
+
+output "google_compute_subnetwork_tfer--turbo-cache-vpc-network_self_link" {
+  value = "${google_compute_subnetwork.tfer--turbo-cache-vpc-network.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/variables.tf
new file mode 100755
index 0000000..79a424a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/subnetworks/us-central1/variables.tf
@@ -0,0 +1,7 @@
+data "terraform_remote_state" "networks" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/networks/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/compute_target_https_proxy.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/compute_target_https_proxy.tf
new file mode 100755
index 0000000..a8191d4
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/compute_target_https_proxy.tf
@@ -0,0 +1,19 @@
+resource "google_compute_target_https_proxy" "tfer--turbo-cache-cas-load-balancer-target-proxy" {
+  name             = "turbo-cache-cas-load-balancer-target-proxy"
+  project          = "turbo-cache-gcp-test"
+  proxy_bind       = "false"
+  quic_override    = "NONE"
+  ssl_certificates = ["https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/sslCertificates/tubo-cache-cas-certificate"]
+  ssl_policy       = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/sslPolicies/turbo-cache-cas-ssl-policy"
+  url_map          = "${data.terraform_remote_state.urlMaps.outputs.google_compute_url_map_tfer--turbo-cache-cas-load-balancer_self_link}"
+}
+
+resource "google_compute_target_https_proxy" "tfer--turbo-cache-scheduler-load-bal-target-proxy" {
+  name             = "turbo-cache-scheduler-load-bal-target-proxy"
+  project          = "turbo-cache-gcp-test"
+  proxy_bind       = "false"
+  quic_override    = "NONE"
+  ssl_certificates = ["https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/sslCertificates/turbo-cache-scheduler-certificate"]
+  ssl_policy       = "https://www.googleapis.com/compute/v1/projects/turbo-cache-gcp-test/global/sslPolicies/turbo-cache-scheduler-ssl-policy"
+  url_map          = "${data.terraform_remote_state.urlMaps.outputs.google_compute_url_map_tfer--turbo-cache-scheduler-load-balancer_self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/outputs.tf
new file mode 100755
index 0000000..11ad6e1
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_target_https_proxy_tfer--turbo-cache-cas-load-balancer-target-proxy_self_link" {
+  value = "${google_compute_target_https_proxy.tfer--turbo-cache-cas-load-balancer-target-proxy.self_link}"
+}
+
+output "google_compute_target_https_proxy_tfer--turbo-cache-scheduler-load-bal-target-proxy_self_link" {
+  value = "${google_compute_target_https_proxy.tfer--turbo-cache-scheduler-load-bal-target-proxy.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/variables.tf
new file mode 100755
index 0000000..0d8600b
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/targetHttpsProxies/us-central1/variables.tf
@@ -0,0 +1,7 @@
+data "terraform_remote_state" "urlMaps" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/urlMaps/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/compute_url_map.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/compute_url_map.tf
new file mode 100755
index 0000000..c3dcd93
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/compute_url_map.tf
@@ -0,0 +1,11 @@
+resource "google_compute_url_map" "tfer--turbo-cache-cas-load-balancer" {
+  default_service = "${data.terraform_remote_state.backendServices.outputs.google_compute_backend_service_tfer--turbo-cache-cas-backend-service_self_link}"
+  name            = "turbo-cache-cas-load-balancer"
+  project         = "turbo-cache-gcp-test"
+}
+
+resource "google_compute_url_map" "tfer--turbo-cache-scheduler-load-balancer" {
+  default_service = "${data.terraform_remote_state.backendServices.outputs.google_compute_backend_service_tfer--turbo-cache-scheduler-backend-service_self_link}"
+  name            = "turbo-cache-scheduler-load-balancer"
+  project         = "turbo-cache-gcp-test"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/outputs.tf
new file mode 100755
index 0000000..6cf8a7f
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/outputs.tf
@@ -0,0 +1,7 @@
+output "google_compute_url_map_tfer--turbo-cache-cas-load-balancer_self_link" {
+  value = "${google_compute_url_map.tfer--turbo-cache-cas-load-balancer.self_link}"
+}
+
+output "google_compute_url_map_tfer--turbo-cache-scheduler-load-balancer_self_link" {
+  value = "${google_compute_url_map.tfer--turbo-cache-scheduler-load-balancer.self_link}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/provider.tf
new file mode 100755
index 0000000..ce34b4a
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/variables.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/variables.tf
new file mode 100755
index 0000000..b9600ac
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test/urlMaps/us-central1/variables.tf
@@ -0,0 +1,15 @@
+data "terraform_remote_state" "backendServices" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/backendServices/us-central1/terraform.tfstate"
+  }
+}
+
+data "terraform_remote_state" "regionBackendServices" {
+  backend = "local"
+
+  config = {
+    path = "../../../../../generated/google/turbo-cache-gcp-test/regionBackendServices/us-central1/terraform.tfstate"
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/outputs.tf
new file mode 100755
index 0000000..f5fae81
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/outputs.tf
@@ -0,0 +1,27 @@
+output "google_storage_bucket_acl_tfer--foobar-test-ewer2_id" {
+  value = "${google_storage_bucket_acl.tfer--foobar-test-ewer2.id}"
+}
+
+output "google_storage_bucket_iam_binding_tfer--foobar-test-ewer2_id" {
+  value = "${google_storage_bucket_iam_binding.tfer--foobar-test-ewer2.id}"
+}
+
+output "google_storage_bucket_iam_member_tfer--foobar-test-ewer2_id" {
+  value = "${google_storage_bucket_iam_member.tfer--foobar-test-ewer2.id}"
+}
+
+output "google_storage_bucket_iam_policy_tfer--foobar-test-ewer2_id" {
+  value = "${google_storage_bucket_iam_policy.tfer--foobar-test-ewer2.id}"
+}
+
+output "google_storage_bucket_tfer--foobar-test-ewer2_name" {
+  value = "${google_storage_bucket.tfer--foobar-test-ewer2.name}"
+}
+
+output "google_storage_bucket_tfer--foobar-test-ewer2_self_link" {
+  value = "${google_storage_bucket.tfer--foobar-test-ewer2.self_link}"
+}
+
+output "google_storage_default_object_acl_tfer--foobar-test-ewer2_id" {
+  value = "${google_storage_default_object_acl.tfer--foobar-test-ewer2.id}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/provider.tf
new file mode 100755
index 0000000..9aa55a4
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test7"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket.tf
new file mode 100755
index 0000000..fae8add
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket.tf
@@ -0,0 +1,10 @@
+resource "google_storage_bucket" "tfer--foobar-test-ewer2" {
+  default_event_based_hold    = "false"
+  force_destroy               = "false"
+  location                    = "US-CENTRAL1"
+  name                        = "foobar-test-ewer2"
+  project                     = "turbo-cache-gcp-test7"
+  requester_pays              = "false"
+  storage_class               = "STANDARD"
+  uniform_bucket_level_access = "true"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_acl.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_acl.tf
new file mode 100755
index 0000000..3ec7b94
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_acl.tf
@@ -0,0 +1,3 @@
+resource "google_storage_bucket_acl" "tfer--foobar-test-ewer2" {
+  bucket = "foobar-test-ewer2"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_binding.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_binding.tf
new file mode 100755
index 0000000..e8207dd
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_binding.tf
@@ -0,0 +1,5 @@
+resource "google_storage_bucket_iam_binding" "tfer--foobar-test-ewer2" {
+  bucket  = "b/foobar-test-ewer2"
+  members = ["projectEditor:turbo-cache-gcp-test7", "projectOwner:turbo-cache-gcp-test7"]
+  role    = "roles/storage.legacyObjectOwner"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_member.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_member.tf
new file mode 100755
index 0000000..1130fbe
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_member.tf
@@ -0,0 +1,5 @@
+resource "google_storage_bucket_iam_member" "tfer--foobar-test-ewer2" {
+  bucket = "b/foobar-test-ewer2"
+  member = "projectOwner:turbo-cache-gcp-test7"
+  role   = "roles/storage.legacyBucketOwner"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_policy.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_policy.tf
new file mode 100755
index 0000000..64aa902
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_bucket_iam_policy.tf
@@ -0,0 +1,36 @@
+resource "google_storage_bucket_iam_policy" "tfer--foobar-test-ewer2" {
+  bucket = "b/foobar-test-ewer2"
+
+  policy_data = <<POLICY
+{
+  "bindings": [
+    {
+      "members": [
+        "projectEditor:turbo-cache-gcp-test7",
+        "projectOwner:turbo-cache-gcp-test7"
+      ],
+      "role": "roles/storage.legacyBucketOwner"
+    },
+    {
+      "members": [
+        "projectViewer:turbo-cache-gcp-test7"
+      ],
+      "role": "roles/storage.legacyBucketReader"
+    },
+    {
+      "members": [
+        "projectEditor:turbo-cache-gcp-test7",
+        "projectOwner:turbo-cache-gcp-test7"
+      ],
+      "role": "roles/storage.legacyObjectOwner"
+    },
+    {
+      "members": [
+        "projectViewer:turbo-cache-gcp-test7"
+      ],
+      "role": "roles/storage.legacyObjectReader"
+    }
+  ]
+}
+POLICY
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_default_object_acl.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_default_object_acl.tf
new file mode 100755
index 0000000..37955bf
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/gcs/us-central1/storage_default_object_acl.tf
@@ -0,0 +1,3 @@
+resource "google_storage_default_object_acl" "tfer--foobar-test-ewer2" {
+  bucket = "foobar-test-ewer2"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/outputs.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/outputs.tf
new file mode 100755
index 0000000..d763bee
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/outputs.tf
@@ -0,0 +1,71 @@
+output "google_project_iam_custom_role_tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRole_id" {
+  value = "${google_project_iam_custom_role.tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRole.id}"
+}
+
+output "google_project_iam_member_tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRoleserviceAccount-003A-turbo-cache-cf-sa-0040-turbo-cache-gcp-test7-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRoleserviceAccount-003A-turbo-cache-cf-sa-0040-turbo-cache-gcp-test7-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-artifactregistry-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-artifactregistry-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-artifactregistry-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-artifactregistry-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-cloudbuild-002E-builds-002E-builderserviceAccount-003A-551021911287-0040-cloudbuild-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-cloudbuild-002E-builds-002E-builderserviceAccount-003A-551021911287-0040-cloudbuild-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-cloudbuild-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudbuild-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-cloudbuild-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudbuild-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-cloudfunctions-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcf-admin-robot-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-cloudfunctions-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcf-admin-robot-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-cloudscheduler-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudscheduler-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-cloudscheduler-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudscheduler-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-compute-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-compute-system-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-compute-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-compute-system-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-containerregistry-002E-ServiceAgentserviceAccount-003A-service-551021911287-0040-containerregistry-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-containerregistry-002E-ServiceAgentserviceAccount-003A-service-551021911287-0040-containerregistry-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-editorserviceAccount-003A-551021911287-0040-cloudservices-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-editorserviceAccount-003A-551021911287-0040-cloudservices-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-editorserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-editorserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-editorserviceAccount-003A-turbo-cache-gcp-test7-0040-appspot-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-editorserviceAccount-003A-turbo-cache-gcp-test7-0040-appspot-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-owneruser-003A-blaise-0040-tracemachina-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-owneruser-003A-blaise-0040-tracemachina-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-pubsub-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-pubsub-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-pubsub-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-pubsub-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-run-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-serverless-robot-prod-002E-iam-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-run-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-serverless-robot-prod-002E-iam-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_project_iam_member_tfer--roles-002F-storage-002E-objectUserserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com_id" {
+  value = "${google_project_iam_member.tfer--roles-002F-storage-002E-objectUserserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com.id}"
+}
+
+output "google_service_account_tfer--100748471643570447960_id" {
+  value = "${google_service_account.tfer--100748471643570447960.id}"
+}
+
+output "google_service_account_tfer--117834906656421721139_id" {
+  value = "${google_service_account.tfer--117834906656421721139.id}"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_custom_role.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_custom_role.tf
new file mode 100755
index 0000000..29a272b
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_custom_role.tf
@@ -0,0 +1,8 @@
+resource "google_project_iam_custom_role" "tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRole" {
+  description = "Update IPs Cloud Function Role"
+  permissions = ["compute.instances.list"]
+  project     = "turbo-cache-gcp-test7"
+  role_id     = "turboCacheUpdateIpsCfRole"
+  stage       = "GA"
+  title       = "Update IPs CF Role"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_member.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_member.tf
new file mode 100755
index 0000000..a545af0
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/project_iam_member.tf
@@ -0,0 +1,89 @@
+resource "google_project_iam_member" "tfer--projects-002F-turbo-cache-gcp-test7-002F-roles-002F-turboCacheUpdateIpsCfRoleserviceAccount-003A-turbo-cache-cf-sa-0040-turbo-cache-gcp-test7-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:turbo-cache-cf-sa@turbo-cache-gcp-test7.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "projects/turbo-cache-gcp-test7/roles/turboCacheUpdateIpsCfRole"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-artifactregistry-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-artifactregistry-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@gcp-sa-artifactregistry.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/artifactregistry.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-cloudbuild-002E-builds-002E-builderserviceAccount-003A-551021911287-0040-cloudbuild-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:551021911287@cloudbuild.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/cloudbuild.builds.builder"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-cloudbuild-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudbuild-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@gcp-sa-cloudbuild.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/cloudbuild.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-cloudfunctions-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcf-admin-robot-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@gcf-admin-robot.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/cloudfunctions.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-cloudscheduler-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-cloudscheduler-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@gcp-sa-cloudscheduler.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/cloudscheduler.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-compute-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-compute-system-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@compute-system.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/compute.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-containerregistry-002E-ServiceAgentserviceAccount-003A-service-551021911287-0040-containerregistry-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@containerregistry.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/containerregistry.ServiceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-editorserviceAccount-003A-551021911287-0040-cloudservices-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:551021911287@cloudservices.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/editor"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-editorserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:551021911287-compute@developer.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/editor"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-editorserviceAccount-003A-turbo-cache-gcp-test7-0040-appspot-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:turbo-cache-gcp-test7@appspot.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/editor"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-owneruser-003A-blaise-0040-tracemachina-002E-com" {
+  member  = "user:blaise@tracemachina.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/owner"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-pubsub-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-gcp-sa-pubsub-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@gcp-sa-pubsub.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/pubsub.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-run-002E-serviceAgentserviceAccount-003A-service-551021911287-0040-serverless-robot-prod-002E-iam-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:service-551021911287@serverless-robot-prod.iam.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/run.serviceAgent"
+}
+
+resource "google_project_iam_member" "tfer--roles-002F-storage-002E-objectUserserviceAccount-003A-551021911287-compute-0040-developer-002E-gserviceaccount-002E-com" {
+  member  = "serviceAccount:551021911287-compute@developer.gserviceaccount.com"
+  project = "turbo-cache-gcp-test7"
+  role    = "roles/storage.objectUser"
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/provider.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/provider.tf
new file mode 100755
index 0000000..9aa55a4
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/provider.tf
@@ -0,0 +1,11 @@
+provider "google" {
+  project = "turbo-cache-gcp-test7"
+}
+
+terraform {
+	required_providers {
+		google = {
+	    version = "~> 4.0.0"
+		}
+  }
+}
diff --git a/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/service_account.tf b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/service_account.tf
new file mode 100755
index 0000000..060926f
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/generated/google/turbo-cache-gcp-test7/iam/us-central1/service_account.tf
@@ -0,0 +1,13 @@
+resource "google_service_account" "tfer--100748471643570447960" {
+  account_id   = "turbo-cache-gcp-test7"
+  disabled     = "false"
+  display_name = "App Engine default service account"
+  project      = "turbo-cache-gcp-test7"
+}
+
+resource "google_service_account" "tfer--117834906656421721139" {
+  account_id   = "turbo-cache-cf-sa"
+  disabled     = "false"
+  display_name = "Cloud Functions Service Account"
+  project      = "turbo-cache-gcp-test7"
+}
diff --git a/deployment-examples/terraform_terraformer/versions.tf b/deployment-examples/terraform_terraformer/versions.tf
new file mode 100644
index 0000000..bcd52cd
--- /dev/null
+++ b/deployment-examples/terraform_terraformer/versions.tf
@@ -0,0 +1,9 @@
+terraform {
+  required_providers {
+    google = {
+      source = "hashicorp/google"
+      version = "4.0.0"
+    }
+  }
+  required_version = ">= 0.13"
+}
\ No newline at end of file
diff --git a/gencargo/cas/Cargo.toml b/gencargo/cas/Cargo.toml
index ee40d92..1299dbe 100644
--- a/gencargo/cas/Cargo.toml
+++ b/gencargo/cas/Cargo.toml
@@ -28,8 +28,12 @@ hyper = { workspace = true }
 json5 = { workspace = true }
 parking_lot = { workspace = true }
 prometheus-client = { workspace = true }
+rcgen = { workspace = true }
+rustls-pemfile = { workspace = true }
 scopeguard = { workspace = true }
+tls-listener = { workspace = true }
 tokio = { workspace = true }
+tokio-rustls = { workspace = true }
 tonic = { workspace = true }
 tower = { workspace = true }
 
diff --git a/tools/cargo_shared.bzl b/tools/cargo_shared.bzl
index f5f6e39..908b103 100644
--- a/tools/cargo_shared.bzl
+++ b/tools/cargo_shared.bzl
@@ -33,7 +33,7 @@ PACKAGES = {
     },
     "tonic": {
         "version": "0.9.2",
-        "features": ["gzip"],
+        "features": ["gzip", "tls", "transport"],
     },
     "log": {
         "version": "0.4.19",
@@ -160,4 +160,17 @@ PACKAGES = {
     "ctor": {
         "version": "0.2.3",
     },
+    "tls-listener": {
+        "version": "0.7.0",
+        "features": ["hyper-h2", "rustls"],
+    },
+    "tokio-rustls": {
+        "version": "0.24.1",
+    },
+    "rustls-pemfile": {
+        "version": "1.0.3",
+    },
+    "rcgen": {
+        "version": "0.11.3",
+    },
 }